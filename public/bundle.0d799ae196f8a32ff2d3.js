!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=85)}([function(e,t,n){e.exports=n(75)()},function(e,t,n){"use strict";e.exports=n(82)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,l],c=0;(u=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),l=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:l.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=l.isRequired,e[n]=i,e),o}var s=u(),c=n(15),d=n.n(c),f=n(2),p=n.n(f);var h=null,m={notify:function(){}};var g=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=m}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=m)},e}(),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var y=0,A={};function b(){}function C(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,s=o.methodName,c=void 0===s?"connectAdvanced":s,f=o.renderCountProp,h=void 0===f?void 0:f,m=o.shouldHandleStateChanges,C=void 0===m||m,E=o.storeKey,w=void 0===E?"store":E,k=o.withRef,x=void 0!==k&&k,_=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),B=w+"Subscription",O=y++,P=((t={})[w]=l,t[B]=i,t),T=((n={})[B]=i,n);return function(t){p()("function"==typeof t,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),a=v({},_,{getDisplayName:u,methodName:c,renderCountProp:h,shouldHandleStateChanges:C,storeKey:w,withRef:x,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=O,r.state={},r.renderCount=0,r.store=e[w]||t[w],r.propsMode=Boolean(e[w]),r.setWrappedInstance=r.setWrappedInstance.bind(r),p()(r.store,'Could not find "'+w+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+w+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[B]=t||this.context[B],e},i.prototype.componentDidMount=function(){C&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=b,this.store=null,this.selector.run=b,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return p()(x,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(C){var e=(this.propsMode?this.props:this.context)[B];this.subscription=new g(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(A)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(x||h||this.propsMode&&this.subscription))return e;var t=v({},e);return x&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[B]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=T,i.contextTypes=P,i.propTypes=P,d()(i,t)}}var E=Object.prototype.hasOwnProperty;function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!w(e[n[o]],t[n[o]]))return!1;return!0}var x=n(20),_=n(29),B="object"==typeof self&&self&&self.Object===Object&&self,O=(_.a||B||Function("return this")()).Symbol,P=Object.prototype;P.hasOwnProperty,P.toString,O&&O.toStringTag;Object.prototype.toString;O&&O.toStringTag;Object.getPrototypeOf,Object;var T=Function.prototype,S=Object.prototype,R=T.toString;S.hasOwnProperty,R.call(Object);function I(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function M(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function N(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=M(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=M(o),o=r(t,n)),o},r}}var j=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:I(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?I(function(t){return Object(x.bindActionCreators)(e,t)}):void 0}];var U=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:I(function(){return{}})}],F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function D(e,t,n){return F({},n,e,t)}var L=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,l){var u=e(t,n,l);return a?r&&o(u,i)||(i=u):(a=!0,i=u),i}}}(e):void 0},function(e){return e?void 0:function(){return D}}];function q(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function G(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,l=o.areStatePropsEqual,u=!1,s=void 0,c=void 0,d=void 0,f=void 0,p=void 0;function h(o,u){var h=!i(u,c),m=!a(o,s);return s=o,c=u,h&&m?(d=e(s,c),t.dependsOnOwnProps&&(f=t(r,c)),p=n(d,f,c)):h?(e.dependsOnOwnProps&&(d=e(s,c)),t.dependsOnOwnProps&&(f=t(r,c)),p=n(d,f,c)):m?function(){var t=e(s,c),r=!l(t,d);return d=t,r&&(p=n(d,f,c)),p}():p}return function(o,a){return u?h(o,a):function(o,a){return d=e(s=o,c=a),f=t(r,c),p=n(d,f,c),u=!0,p}(o,a)}}function z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),l=r(e,a),u=o(e,a);return(a.pure?G:q)(i,l,u,e,a)}var H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function K(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function V(e,t){return e===t}var Y=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?C:t,r=e.mapStateToPropsFactories,o=void 0===r?U:r,a=e.mapDispatchToPropsFactories,i=void 0===a?j:a,l=e.mergePropsFactories,u=void 0===l?L:l,s=e.selectorFactory,c=void 0===s?z:s;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},l=a.pure,s=void 0===l||l,d=a.areStatesEqual,f=void 0===d?V:d,p=a.areOwnPropsEqual,h=void 0===p?k:p,m=a.areStatePropsEqual,g=void 0===m?k:m,v=a.areMergedPropsEqual,y=void 0===v?k:v,A=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=K(e,o,"mapStateToProps"),C=K(t,i,"mapDispatchToProps"),E=K(r,u,"mergeProps");return n(c,H({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:C,initMergeProps:E,pure:s,areStatesEqual:f,areOwnPropsEqual:h,areStatePropsEqual:g,areMergedPropsEqual:y},A))}}();n.d(t,"Provider",function(){return s}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return C}),n.d(t,"connect",function(){return Y})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.account=function(e=null,{type:t,payload:n}){switch(t){case r:return n;case a:return null;default:return e}},t.checkedAuth=function(e=!1,{type:t}){switch(t){case o:return!0;default:return e}};const r=t.ACCOUNT_AUTH="ACCOUNT_AUTH",o=t.AUTH_CHECKED="AUTH_CHECKED",a=t.LOGOUT="LOGOUT";t.getAccount=(e=>e.account),t.getCheckedAuth=(e=>e.checkedAuth)},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,l=0,u=[],s=n(65);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(g(o.parts[i],t))}else{var l=[];for(i=0;i<o.parts.length;i++)l.push(g(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function f(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),f(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var u=l++;n=i||(i=h(t)),r=y.bind(null,n,u,!1),o=y.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return c(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var i=n[a];(l=r[i.id]).refs--,o.push(l)}e&&c(d(e,t),t);for(a=0;a<o.length;a++){var l;if(0===(l=o[a]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete r[l.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),a=n(1),i=n.n(a),l=n(0),u=n.n(l),s=n(4),c=n.n(s),d=n(2),f=n.n(d);function p(e){return"/"===e.charAt(0)}function h(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&p(e),a=t&&p(t),i=o||a;if(e&&p(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var l=void 0;if(r.length){var u=r[r.length-1];l="."===u||".."===u||""===u}else l=!1;for(var s=0,c=r.length;c>=0;c--){var d=r[c];"."===d?h(r,c):".."===d?(h(r,c),s++):s&&(h(r,c),s--)}if(!i)for(;s--;s)r.unshift("..");!i||""===r[0]||r[0]&&p(r[0])||r.unshift("");var f=r.join("/");return l&&"/"!==f.substr(-1)&&(f+="/"),f},g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var v=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":g(t);if(r!==(void 0===n?"undefined":g(n)))return!1;if("object"===r){var o=t.valueOf(),a=n.valueOf();if(o!==t||a!==n)return e(o,a);var i=Object.keys(t),l=Object.keys(n);return i.length===l.length&&i.every(function(r){return e(t[r],n[r])})}return!1},y=function(e){return"/"===e.charAt(0)?e:"/"+e},A=function(e){return"/"===e.charAt(0)?e.substr(1):e},b=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},C=function(e,t){return b(e,t)?e.substr(t.length):e},E=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},w=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},x=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=k({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=m(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},_=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&v(e.state,t.state)},B=function(){var e=null,t=[];return{setPrompt:function(t){return c()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):(c()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},O=!("undefined"==typeof window||!window.document||!window.document.createElement),P=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},T=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},S=function(e,t){return t(window.confirm(e))},R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(){try{return window.history.state||{}}catch(e){return{}}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(O,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,a=void 0!==o&&o,i=e.getUserConfirmation,l=void 0===i?S:i,u=e.keyLength,s=void 0===u?6:u,d=e.basename?E(y(e.basename)):"",p=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return c()(!d||b(a,d),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+d+'".'),d&&(a=C(a,d)),x(a,r,n)},h=function(){return Math.random().toString(36).substr(2,s)},m=B(),g=function(e){I(z,e),z.length=t.length,m.notifyListeners(z.location,z.action)},v=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||_(p(e.state))},A=function(){_(p(M()))},k=!1,_=function(e){k?(k=!1,g()):m.confirmTransitionTo(e,"POP",l,function(t){t?g({action:"POP",location:e}):N(e)})},N=function(e){var t=z.location,n=U.indexOf(t.key);-1===n&&(n=0);var r=U.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(k=!0,D(o))},j=p(M()),U=[j.key],F=function(e){return d+w(e)},D=function(e){t.go(e)},L=0,q=function(e){1===(L+=e)?(P(window,"popstate",v),r&&P(window,"hashchange",A)):0===L&&(T(window,"popstate",v),r&&T(window,"hashchange",A))},G=!1,z={length:t.length,action:"POP",location:j,createHref:F,push:function(e,r){c()(!("object"===(void 0===e?"undefined":R(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),z.location);m.confirmTransitionTo(o,"PUSH",l,function(e){if(e){var r=F(o),i=o.key,l=o.state;if(n)if(t.pushState({key:i,state:l},null,r),a)window.location.href=r;else{var u=U.indexOf(z.location.key),s=U.slice(0,-1===u?0:u+1);s.push(o.key),U=s,g({action:"PUSH",location:o})}else c()(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){c()(!("object"===(void 0===e?"undefined":R(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=x(e,r,h(),z.location);m.confirmTransitionTo(o,"REPLACE",l,function(e){if(e){var r=F(o),i=o.key,l=o.state;if(n)if(t.replaceState({key:i,state:l},null,r),a)window.location.replace(r);else{var u=U.indexOf(z.location.key);-1!==u&&(U[u]=o.key),g({action:"REPLACE",location:o})}else c()(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:D,goBack:function(){return D(-1)},goForward:function(){return D(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return G||(q(1),G=!0),function(){return G&&(G=!1,q(-1)),t()}},listen:function(e){var t=m.appendListener(e);return q(1),function(){q(-1),t()}}};return z},j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},U={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+A(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:A,decodePath:y},slash:{encodePath:y,decodePath:y}},F=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},D=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},L=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(O,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?S:r,a=e.hashType,i=void 0===a?"slash":a,l=e.basename?E(y(e.basename)):"",u=U[i],s=u.encodePath,d=u.decodePath,p=function(){var e=d(F());return c()(!l||b(e,l),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+l+'".'),l&&(e=C(e,l)),x(e)},h=B(),m=function(e){j(K,e),K.length=t.length,h.notifyListeners(K.location,K.action)},g=!1,v=null,A=function(){var e=F(),t=s(e);if(e!==t)D(t);else{var n=p(),r=K.location;if(!g&&_(r,n))return;if(v===w(n))return;v=null,k(n)}},k=function(e){g?(g=!1,m()):h.confirmTransitionTo(e,"POP",o,function(t){t?m({action:"POP",location:e}):R(e)})},R=function(e){var t=K.location,n=L.lastIndexOf(w(t));-1===n&&(n=0);var r=L.lastIndexOf(w(e));-1===r&&(r=0);var o=n-r;o&&(g=!0,q(o))},I=F(),M=s(I);I!==M&&D(M);var N=p(),L=[w(N)],q=function(e){c()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},G=0,z=function(e){1===(G+=e)?P(window,"hashchange",A):0===G&&T(window,"hashchange",A)},H=!1,K={length:t.length,action:"POP",location:N,createHref:function(e){return"#"+s(l+w(e))},push:function(e,t){c()(void 0===t,"Hash history cannot push state; it is ignored");var n=x(e,void 0,void 0,K.location);h.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=w(n),r=s(l+t);if(F()!==r){v=t,function(e){window.location.hash=e}(r);var o=L.lastIndexOf(w(K.location)),a=L.slice(0,-1===o?0:o+1);a.push(t),L=a,m({action:"PUSH",location:n})}else c()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),m()}})},replace:function(e,t){c()(void 0===t,"Hash history cannot replace state; it is ignored");var n=x(e,void 0,void 0,K.location);h.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=w(n),r=s(l+t);F()!==r&&(v=t,D(r));var o=L.indexOf(w(K.location));-1!==o&&(L[o]=t),m({action:"REPLACE",location:n})}})},go:q,goBack:function(){return q(-1)},goForward:function(){return q(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return H||(z(1),H=!0),function(){return H&&(H=!1,z(-1)),t()}},listen:function(e){var t=h.appendListener(e);return z(1),function(){z(-1),t()}}};return K},q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},z=function(e,t,n){return Math.min(Math.max(e,t),n)},H=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,a=void 0===o?0:o,i=e.keyLength,l=void 0===i?6:i,u=B(),s=function(e){G(g,e),g.length=g.entries.length,u.notifyListeners(g.location,g.action)},d=function(){return Math.random().toString(36).substr(2,l)},f=z(a,0,r.length-1),p=r.map(function(e){return x(e,void 0,"string"==typeof e?d():e.key||d())}),h=w,m=function(e){var n=z(g.index+e,0,g.entries.length-1),r=g.entries[n];u.confirmTransitionTo(r,"POP",t,function(e){e?s({action:"POP",location:r,index:n}):s()})},g={length:p.length,action:"POP",location:p[f],index:f,entries:p,createHref:h,push:function(e,n){c()(!("object"===(void 0===e?"undefined":q(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,d(),g.location);u.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=g.index+1,n=g.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){c()(!("object"===(void 0===e?"undefined":q(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=x(e,n,d(),g.location);u.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(g.entries[g.index]=r,s({action:"REPLACE",location:r}))})},go:m,goBack:function(){return m(-1)},goForward:function(){return m(1)},canGo:function(e){var t=g.index+e;return t>=0&&t<g.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return g},K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=V(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},V(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:K({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;f()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);Y.propTypes={history:u.a.object.isRequired,children:u.a.node},Y.contextTypes={router:u.a.object},Y.childContextTypes={router:u.a.object.isRequired};var Q=Y,W=Q;function X(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var $=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=X(this,e.call.apply(e,[this].concat(a))),r.history=N(r.props),X(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(W,{history:this.history,children:this.props.children})},t}(i.a.Component);$.propTypes={basename:u.a.string,forceRefresh:u.a.bool,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var Z=$;function J(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=J(this,e.call.apply(e,[this].concat(a))),r.history=L(r.props),J(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(W,{history:this.history,children:this.props.children})},t}(i.a.Component);ee.propTypes={basename:u.a.string,getUserConfirmation:u.a.func,hashType:u.a.oneOf(["hashbang","noslash","slash"]),children:u.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ae=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=re(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);f()(this.context.router,"You should not use <Link> outside a <Router>"),f()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,a="string"==typeof t?x(t,null,null,o.location):t,l=o.createHref(a);return i.a.createElement("a",ne({},r,{onClick:this.handleClick,href:l,ref:n}))},t}(i.a.Component);ae.propTypes={onClick:u.a.func,target:u.a.string,replace:u.a.bool,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired,innerRef:u.a.oneOfType([u.a.string,u.a.func])},ae.defaultProps={replace:!1},ae.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired,createHref:u.a.func.isRequired}).isRequired}).isRequired};var ie=ae;function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ue=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.history=H(r.props),le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(Q,{history:this.history,children:this.props.children})},t}(i.a.Component);ue.propTypes={initialEntries:u.a.array,initialIndex:u.a.number,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var se=ue,ce=n(14),de=n.n(ce),fe={},pe=0,he=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,a=r.exact,i=void 0!==a&&a,l=r.strict,u=void 0!==l&&l,s=r.sensitive,c=void 0!==s&&s;if(null==o)return n;var d=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=fe[n]||(fe[n]={});if(r[e])return r[e];var o=[],a={re:de()(e,o,t),keys:o};return pe<1e4&&(r[e]=a,pe++),a}(o,{end:i,strict:u,sensitive:c}),f=d.re,p=d.keys,h=f.exec(e);if(!h)return null;var m=h[0],g=h.slice(1),v=e===m;return i&&!v?null:{path:o,url:"/"===o&&""===m?"/":m,isExact:v,params:p.reduce(function(e,t,n){return e[t.name]=g[n],e},{})}},me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ge(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ve=function(e){return 0===i.a.Children.count(e)},ye=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ge(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},ge(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:me({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,l=e.sensitive;if(n)return n;f()(t,"You should not use <Route> or withRouter() outside a <Router>");var u=t.route,s=(r||u.location).pathname;return he(s,{path:o,strict:a,exact:i,sensitive:l},u.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!ve(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!ve(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,l=a.history,u=a.route,s=a.staticContext,c={match:e,location:this.props.location||u.location,history:l,staticContext:s};return r?e?i.a.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!ve(n)?i.a.Children.only(n):null},t}(i.a.Component);ye.propTypes={computedMatch:u.a.object,path:u.a.string,exact:u.a.bool,strict:u.a.bool,sensitive:u.a.bool,component:u.a.func,render:u.a.func,children:u.a.oneOfType([u.a.func,u.a.node]),location:u.a.object},ye.contextTypes={router:u.a.shape({history:u.a.object.isRequired,route:u.a.object.isRequired,staticContext:u.a.object})},ye.childContextTypes={router:u.a.object.isRequired};var Ae=ye,be=Ae,Ce=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var we=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,l=e.className,u=e.activeStyle,s=e.style,c=e.isActive,d=e["aria-current"],f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),p="object"===(void 0===t?"undefined":Ee(t))?t.pathname:t,h=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.a.createElement(be,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return i.a.createElement(ie,Ce({to:t,className:o?[l,a].filter(function(e){return e}).join(" "):l,style:o?Ce({},s,u):s,"aria-current":o&&d||null},f))}})};we.propTypes={to:ie.propTypes.to,exact:u.a.bool,strict:u.a.bool,location:u.a.object,activeClassName:u.a.string,className:u.a.string,activeStyle:u.a.object,style:u.a.object,isActive:u.a.func,"aria-current":u.a.oneOf(["page","step","location","date","time","true"])},we.defaultProps={activeClassName:"active","aria-current":"page"};var ke=we;var xe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);xe.propTypes={when:u.a.bool,message:u.a.oneOfType([u.a.func,u.a.string]).isRequired},xe.defaultProps={when:!0},xe.contextTypes={router:u.a.shape({history:u.a.shape({block:u.a.func.isRequired}).isRequired}).isRequired};var _e=xe,Be={},Oe=0,Pe=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Be[t]||(Be[t]={});if(n[e])return n[e];var r=de.a.compile(e);return Oe<1e4&&(n[e]=r,Oe++),r}(e)(t,{pretty:!0})},Te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Se=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=x(e.to),n=x(this.props.to);_(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Pe(n,t.params):Te({},n,{pathname:Pe(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);Se.propTypes={computedMatch:u.a.object,push:u.a.bool,from:u.a.string,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired},Se.defaultProps={push:!1},Se.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired}).isRequired,staticContext:u.a.object}).isRequired};var Re=Se,Ie=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Me(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ne=function(e){return"/"===e.charAt(0)?e:"/"+e},je=function(e,t){return e?Ie({},t,{pathname:Ne(e)+t.pathname}):t},Ue=function(e){return"string"==typeof e?e:w(e)},Fe=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},De=function(){},Le=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Me(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Ne(r.props.basename+Ue(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=je(n,x(e)),o.url=Ue(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=je(n,x(e)),o.url=Ue(o.location)},r.handleListen=function(){return De},r.handleBlock=function(){return De},Me(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Ne(e);return 0!==t.pathname.indexOf(n)?t:Ie({},t,{pathname:t.pathname.substr(n.length)})}(t,x(n)),push:this.handlePush,replace:this.handleReplace,go:Fe("go"),goBack:Fe("goBack"),goForward:Fe("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(Q,Ie({},r,{history:o}))},t}(i.a.Component);Le.propTypes={basename:u.a.string,context:u.a.object.isRequired,location:u.a.oneOfType([u.a.string,u.a.object])},Le.defaultProps={basename:"",location:"/"},Le.childContextTypes={router:u.a.object.isRequired};var qe=Le;var Ge=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(null==r&&i.a.isValidElement(t)){var a=t.props,l=a.path,u=a.exact,s=a.strict,c=a.sensitive,d=a.from,f=l||d;o=t,r=he(n.pathname,{path:f,exact:u,strict:s,sensitive:c},e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);Ge.contextTypes={router:u.a.shape({route:u.a.object.isRequired}).isRequired},Ge.propTypes={children:u.a.node,location:u.a.object};var ze=Ge,He=Pe,Ke=he,Ve=n(15),Ye=n.n(Ve),Qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var We=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(Ae,{children:function(t){return i.a.createElement(e,Qe({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:u.a.func},Ye()(t,e)};n.d(t,"BrowserRouter",function(){return Z}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return ie}),n.d(t,"MemoryRouter",function(){return se}),n.d(t,"NavLink",function(){return ke}),n.d(t,"Prompt",function(){return _e}),n.d(t,"Redirect",function(){return Re}),n.d(t,"Route",function(){return be}),n.d(t,"Router",function(){return W}),n.d(t,"StaticRouter",function(){return qe}),n.d(t,"Switch",function(){return ze}),n.d(t,"generatePath",function(){return He}),n.d(t,"matchPath",function(){return Ke}),n.d(t,"withRouter",function(){return We})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.capitalize=function(e){return`${e.charAt(0).toUpperCase()}${e.slice(1)}`},t.formatDate=function(e){return new Date(e).toLocaleDateString()},t.localizeDate=function(e){const t=e.substr(0,4),n=e.substr(5,2)-1,r=e.substr(8,2);return new Date(t,n,r)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadProfile=function(e){return{type:o.PROFILE_LOAD,payload:(e?(0,r.getFriendProfile)(e):(0,r.getUserProfile)()).then(a)}},t.updateProfile=function(e){return{type:o.PROFILE_UPDATE,payload:(0,r.putProfile)(e).then(()=>e)}},t.clearProfile=function(){return{type:o.PROFILE_LOAD,payload:{profile:null,giving:[],requesting:[]}}},t.updateShareable=function(e,t){const{type:n}=t;let a;"giving"===n&&(a=o.GIVING_UPDATE);"requesting"===n&&(a=o.REQUESTING_UPDATE);return{type:a,payload:(0,r.putShareable)(e,t)}},t.addShareable=function(e){const{type:t}=e;let n;"giving"===t&&(n=o.GIVING_ADD);"requesting"===t&&(n=o.REQUESTING_ADD);return{type:n,payload:(0,r.postShareable)(e)}},t.removeShareable=function(e,t){let n;"giving"===t&&(n=o.GIVING_REMOVE);"requesting"===t&&(n=o.REQUESTING_REMOVE);return{type:n,payload:(0,r.deleteShareable)(e).then(()=>({_id:e}))}};var r=n(13),o=n(18);function a(e){const{_id:t,firstName:n,lastName:r,pictureUrl:o,contact:a,availability:i,shareables:l}=e,u=l.reduce((e,t)=>("giving"===t.type&&(e.giving[t._id]=t),"requesting"===t.type&&(e.requesting[t._id]=t),e),{giving:{},requesting:{}}),{giving:s,requesting:c}=u;return{profile:{_id:t,firstName:n,lastName:r,pictureUrl:o,contact:a,availability:i},giving:s,requesting:c}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loading=function(e=!1,{type:t}){switch(t){case r:return!0;case o:return!1;default:return e}},t.error=function(e=null,{type:t,payload:n}){switch(t){case a:return n;case i:return null;default:return e}};const r=t.LOAD_START="LOAD_START",o=t.LOAD_END="LOAD_END",a=t.ERROR="ERROR",i=t.ERROR_CLEAR="ERROR_CLEAR";t.getLoading=(e=>e.loading),t.getError=(e=>e.error)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getAccountVerified=t.postSignup=t.postSignin=t.getFeed=t.deleteShareable=t.putShareable=t.postShareable=t.deleteFriend=t.getFriendProfile=t.putFriendsAccept=t.putFriends=t.getFriends=t.putProfile=t.getUserProfile=void 0;var r=n(23);const o="/api/profile";t.getUserProfile=(()=>(0,r.get)(o)),t.putProfile=(e=>(0,r.put)(o,e)),t.getFriends=(()=>(0,r.get)("/api/profile/friends")),t.putFriends=(e=>(0,r.put)("/api/profile/friends/",e)),t.putFriendsAccept=(e=>(0,r.put)(`/api/profile/friends/confirm/${e}`)),t.getFriendProfile=(e=>(0,r.get)(`/api/profile/friends/${e}`)),t.deleteFriend=(e=>(0,r.del)(`/api/profile/friends/${e}`)),t.postShareable=(e=>(0,r.post)("/api/profile/shareables",e)),t.putShareable=((e,t)=>(0,r.put)(`/api/profile/shareables/${e}`,t)),t.deleteShareable=(e=>(0,r.del)(`/api/profile/shareables/${e}`)),t.getFeed=(()=>(0,r.get)("/api/profile/feed")),t.postSignin=(e=>(0,r.post)("/api/signin",e)),t.postSignup=(e=>(0,r.post)("/api/signup",e)),t.getAccountVerified=(e=>(0,r.get)("/api/verify",{headers:{Authorization:e}}))},function(e,t,n){var r=n(71);e.exports=h,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",u=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],f=n[1],p=n.index;if(l+=e.slice(i,p),i=p+d.length,f)l+=f[1];else{var h=e[i],m=n[2],g=n[3],v=n[4],y=n[5],A=n[6],b=n[7];l&&(r.push(l),l="");var C=null!=m&&null!=h&&h!==m,E="+"===A||"*"===A,w="?"===A||"*"===A,k=n[2]||u,x=v||y;r.push({name:g||a++,prefix:m||"",delimiter:k,optional:w,repeat:E,partial:C,asterisk:!!b,pattern:x?c(x):b?".*":"[^"+s(k)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",u=n||{},s=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var d=e[c];if("string"!=typeof d){var f,p=u[d.name];if(null==p){if(d.optional){d.partial&&(a+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(p)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(f=s(p[h]),!t[c].test(f))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===h?d.prefix:d.delimiter)+f}}else{if(f=d.asterisk?l(p):s(p),!t[c].test(f))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+f+'"');a+=d.prefix+f}}else a+=d}return a}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)i+=s(u);else{var c=s(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+c+p+")*"),i+=p=u.optional?u.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")"}}var h=s(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",d(new RegExp("^"+i,f(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,c=s&&s(Object);e.exports=function e(t,n,d){if("string"!=typeof n){if(c){var f=s(n);f&&f!==c&&e(t,f,d)}var p=i(n);l&&(p=p.concat(l(n)));for(var h=0;h<p.length;++h){var m=p[h];if(!(r[m]||o[m]||d&&d[m])){var g=u(n,m);try{a(t,m,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFeed=t.FEED_LOAD=void 0,t.feed=function(e=[],{type:t,payload:n}){switch(t){case o:return n;case r.LOGOUT:return[];default:return e}};var r=n(6);const o=t.FEED_LOAD="FEED_LOAD";t.getFeed=(e=>e.feed)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFriendRequest=t.getFriends=t.DELETE_FRIEND=t.PENDING_FRIEND_REQUEST=t.FRIEND_REQUEST=t.FRIENDS_LOAD=void 0,t.friends=function(e=[],{type:t,payload:n}){switch(t){case o:return n;case r.LOGOUT:return[];default:return e}},t.friendRequest=function(e=null,{type:t,payload:n}){switch(t){case a:return n;default:return e}},t.pendingFriendRequest=function(e=null,{type:t,payload:n}){switch(t){case i:return n;default:return e}},t.removeFriend=function(e=null,{type:t,payload:n}){switch(t){case l:return n;default:return e}};var r=n(6);const o=t.FRIENDS_LOAD="FRIENDS_LOAD",a=t.FRIEND_REQUEST="FRIEND_REQUEST",i=t.PENDING_FRIEND_REQUEST="PENDING_FRIEND_REQUEST",l=t.DELETE_FRIEND="DELETE_FRIEND";t.getFriends=(e=>e.friends),t.getFriendRequest=(e=>e.friendRequest)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.requesting=t.giving=t.getRequestingArray=t.getRequesting=t.getGivingArray=t.getGiving=t.getProfile=t.REQUESTING_REMOVE=t.GIVING_REMOVE=t.REQUESTING_UPDATE=t.GIVING_UPDATE=t.REQUESTING_ADD=t.GIVING_ADD=t.PROFILE_UPDATE=t.PROFILE_LOAD=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.profile=function(e=null,{type:t,payload:n}){switch(t){case a:return n.profile;case i:return r({},e,n);case o.LOGOUT:return null;default:return e}};var o=n(6);const a=t.PROFILE_LOAD="PROFILE_LOAD",i=t.PROFILE_UPDATE="PROFILE_UPDATE",l=t.GIVING_ADD="GIVING_ADD",u=t.REQUESTING_ADD="REQUESTING_ADD",s=t.GIVING_UPDATE="GIVING_UPDATE",c=t.REQUESTING_UPDATE="REQUESTING_UPDATE",d=t.GIVING_REMOVE="GIVING_REMOVE",f=t.REQUESTING_REMOVE="REQUESTING_REMOVE",p=(t.getProfile=(e=>e.profile),t.getGiving=(e=>e.giving)),h=(t.getGivingArray=(e=>Object.values(p(e))),t.getRequesting=(e=>e.requesting));t.getRequestingArray=(e=>Object.values(h(e)));function m(e,t,n,i){return(l={},{type:u,payload:s})=>{switch(u){case a:return s[e];case t:case n:return r({},l,{[s._id]:s});case i:{const e=r({},l);return delete e[s._id],e}case o.LOGOUT:return{};default:return l}}}t.giving=m("giving",l,s,d),t.requesting=m("requesting",u,c,f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attemptAccountLoad=t.logout=t.signin=t.signup=void 0;var r=n(6),o=n(13),a=n(23);const i=e=>t=>({type:r.ACCOUNT_AUTH,payload:e(t)}),l=(t.signup=i(o.postSignup),t.signin=i(o.postSignin),t.logout=(()=>((0,a.clearStoredAccount)(),{type:r.LOGOUT})),()=>({type:r.AUTH_CHECKED}));t.attemptAccountLoad=(()=>e=>{const t=(0,a.getStoredAccount)();return t&&t.token?(0,o.getAccountVerified)(t.token).then(()=>e({type:r.ACCOUNT_AUTH,payload:t})).catch(()=>{(0,a.clearStoredAccount)()}).then(()=>{e(l())}):e(l())})},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return c}),n.d(t,"bindActionCreators",function(){return f}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return p}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(21),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function l(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var i;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,c=t,d=[],f=d,p=!1;function h(){f===d&&(f=d.slice())}function m(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function g(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=f.indexOf(e);f.splice(n,1)}}}function v(e){if(!l(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=s(c,e)}finally{p=!1}for(var t=d=f,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(i={dispatch:v,subscribe:g,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=g;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},i}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var i=Object.keys(n);var l=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){l=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(l)throw l;for(var r=!1,o={},a=0;a<i.length;a++){var u=i[a],c=n[u],d=e[u],f=c(d,t);if(void 0===f){var p=s(u,t);throw new Error(p)}o[u]=f,r=r||f!==d}return r?o:e}}function d(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return d(e,t);if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":a(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],l=e[i];"function"==typeof l&&(r[i]=d(l,t))}return r}function p(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=e.apply(void 0,r),l=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:a.getState,dispatch:function(){return l.apply(void 0,arguments)}},s=t.map(function(e){return e(u)});return l=p.apply(void 0,s)(a.dispatch),i({},a,{dispatch:l})}}}},function(e,t,n){"use strict";(function(e,r){var o,a=n(30);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(24),n(73)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(20),o=d(n(69)),a=d(n(68)),i=n(12),l=n(6),u=n(18),s=n(17),c=n(16);function d(e){return e&&e.__esModule?e:{default:e}}const f=(0,r.combineReducers)({loading:i.loading,error:i.error,account:l.account,profile:u.profile,giving:u.giving,requesting:u.requesting,friends:s.friends,checkedAuth:l.checkedAuth,feed:c.feed}),p=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.compose,h=(0,r.createStore)(f,p((0,r.applyMiddleware)(o.default,a.default)));t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.del=t.put=t.post=t.get=t.getStoredAccount=t.clearStoredAccount=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(22)),a=n(6);let i="";const l="account",u=window.localStorage;o.default.subscribe(()=>{const e=(0,a.getAccount)(o.default.getState()),t=e&&e.token||"";t!==i&&((i=t)?u.setItem(l,JSON.stringify(e)):s())});const s=t.clearStoredAccount=(()=>u.removeItem(l));t.getStoredAccount=(()=>{const e=u.getItem(l);try{return JSON.parse(e)}catch(e){s()}});function c(e,t={},n){return n&&(t.body=JSON.stringify(n)),i&&(t.headers||(t.headers={}),t.headers.Authorization=i),fetch(e,t).then(e=>[e.ok,e.json()]).then(([e,t])=>{if(e)return t;throw t.message||t.error||t.errors||t})}const d={"content-type":"application/json"};t.get=((e,t={})=>c(e,r({method:"GET"},t))),t.post=((e,t)=>c(e,{method:"POST",headers:d},t)),t.put=((e,t)=>c(e,{method:"PUT",headers:d},t)),t.del=((e,t)=>c(e,{method:"DELETE"},t))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(l[i[c]]=n[i[c]])}}return l}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,l,u){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,l,u],d=0;(s=new Error(t.replace(/%s/g,function(){return c[d++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(24))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){(e.exports=n(8)(!0)).push([e.i,":root {\n  --soft-black: #141414;\n  --dark-gray: #3a3a3a;\n  --mid-gray: #9e9e9e;\n  --pale-gray: #ebebeb;\n  --magenta: #c41e5a;\n  --saffron: #fc9815;\n  --dark-saffron: #ee8802;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, #root {\n  width: 100%;\n  height: 100%;\n}\n\nbody {\n  font-family: Montserrat, sans-serif;\n  color: #141414;\n  color: var(--soft-black);\n}\n\na {\n  text-decoration: none;\n}\n\nul {\n  list-style: none;\n}\n\n\n\n\n\n","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/main.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,qBAAqB;EACrB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,mBAAmB;EACnB,wBAAwB;CACzB;;AAED;EACE,UAAU;EACV,WAAW;EACX,uBAAuB;CACxB;;AAED;EACE,YAAY;EACZ,aAAa;CACd;;AAED;EACE,oCAAoC;EACpC,eAAyB;EAAzB,yBAAyB;CAC1B;;AAED;EACE,sBAAsB;CACvB;;AAED;EACE,iBAAiB;CAClB",file:"main.css",sourcesContent:[":root {\n  --soft-black: #141414;\n  --dark-gray: #3a3a3a;\n  --mid-gray: #9e9e9e;\n  --pale-gray: #ebebeb;\n  --magenta: #c41e5a;\n  --saffron: #fc9815;\n  --dark-saffron: #ee8802;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body, #root {\n  width: 100%;\n  height: 100%;\n}\n\nbody {\n  font-family: Montserrat, sans-serif;\n  color: var(--soft-black);\n}\n\na {\n  text-decoration: none;\n}\n\nul {\n  list-style: none;\n}\n\n\n\n\n\n"],sourceRoot:""}])},function(e,t,n){var r=n(31);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(1)),a=s(n(0)),i=n(5),l=n(6),u=n(9);function s(e){return e&&e.__esModule?e:{default:e}}const c=e=>{let{account:t,component:n,render:a}=e,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["account","component","render"]);return o.default.createElement(u.Route,r({},i,{render:e=>t?n?o.default.createElement(n,e):a?a(e):null:o.default.createElement(u.Redirect,{to:{pathname:"/auth/signin",state:{from:e.location.pathname}}})}))};c.propTypes={account:a.default.object,component:a.default.func,render:a.default.func,location:a.default.object},t.default=(0,i.connect)(e=>({account:(0,l.getAccount)(e)}),null)(c)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,".F0gPOfREPPpLBJEicPB5J {\n  width: 75%;\n  margin: 2.5rem auto;\n}\n  .F0gPOfREPPpLBJEicPB5J :first-child {\n    color: var(--magenta);\n    color: var(--magenta);\n    font-weight: 500;\n    margin-top: 0;\n  }\n  .F0gPOfREPPpLBJEicPB5J p {\n    margin-top: 1.5rem;\n    line-height: 1.4rem;\n  }\n@media (min-width: 730px) {\n  .F0gPOfREPPpLBJEicPB5J {\n    width: 550px;\n  }\n}","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/about/About.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,oBAAoB;CAarB;EAZC;IACE,sBAAsB;IAAtB,sBAAsB;IACtB,iBAAiB;IACjB,cAAc;GACf;EACD;IACE,mBAAmB;IACnB,oBAAoB;GACrB;AACD;EAZF;IAaI,aAAa;GAEhB;CADE",file:"About.css",sourcesContent:[":local(.about) {\n  width: 75%;\n  margin: 2.5rem auto;\n  :first-child {\n    color: var(--magenta);\n    font-weight: 500;\n    margin-top: 0;\n  }\n  p {\n    margin-top: 1.5rem;\n    line-height: 1.4rem;\n  }\n  @media (min-width: 730px) {\n    width: 550px;\n  }\n}"],sourceRoot:""}]),t.locals={about:"F0gPOfREPPpLBJEicPB5J"}},function(e,t,n){var r=n(34);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=i(r),a=i(n(35));function i(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.PureComponent{render(){return o.default.createElement("div",{className:a.default.about},o.default.createElement("p",null,"We built Shareable out of a desire for true personal connection."),o.default.createElement("p",null,"Its purpose is to help friends interact in ways that allow us to increase feelings of community and belonging."),o.default.createElement("p",null,"In our world today, people are linked more than at any other point in history. We have friends from all around the globe, yet depression and loneliness are on the rise. More individuals feel isolated and disconnected than ever before."),o.default.createElement("p",null,"A Harvard health study, spanning more than 75 years, reveals that close relationships are what keep us happy throughout our lives. These ties protect us from life’s discontents, help delay mental and physical decline, and are better predictors of long and happy lives than social class, IQ, or even genes."),o.default.createElement("p",null,"Decades of research also show that giving to others increases our own joy. Measuring hormones and activity in our bodies and brains when being helpful or cooperative lights up our pleasure centers. We are, quite literally, hard-wired to be generous with others."),o.default.createElement("p",null,"There are wonderful resources available to help enhance personal happiness.  There are also incredible social platforms that help us communicate with one another.  We feel Shareable brings an opportunity for these to overlap. Spending time with someone who matters to you, knowing you are there for them when they need support, and that they are there for you is the crucial ingredient in the recipe for happiness. Shareable is not only about what we need for our own happiness, but what we each have to give to each other."),o.default.createElement("p",null,"Join Shareable and see what you have to gain by sharing what you have to give."),o.default.createElement("p",null,"You can find the people behind Shareable at ",o.default.createElement("a",{href:"https://github.com/eighthnote",target:"_blank"},"https://github.com/eighthnote"),"."))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadFriends=function(){return{type:o.FRIENDS_LOAD,payload:(0,r.getFriends)()}},t.sendFriendRequest=function(e){return{type:o.FRIEND_REQUEST,payload:(0,r.putFriends)(e)}},t.acceptFriendRequest=function(e){return{type:o.PENDING_FRIEND_REQUEST,payload:(0,r.putFriendsAccept)(e)}},t.removeFriend=function(e){return{type:o.DELETE_FRIEND,payload:(0,r.deleteFriend)(e)}};var r=n(13),o=n(17)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._3Q2_c7qUk8dMcq4YKA2MU1 {\n  padding: 2rem 1rem;\n  width: 75%;\n  margin: 0 auto;\n}\n  ._3Q2_c7qUk8dMcq4YKA2MU1 h3 {\n    margin-bottom: 0.5rem;\n  }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-add-form {\n    border: 1rem solid var(--dark-saffron);\n    border: 1rem solid var(--dark-saffron);\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n  }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-add-form input {\n      display: block;\n      width: 100%;\n      border: 1px solid var(--mid-gray);\n      border: 1px solid var(--mid-gray);\n      font-size: 1em;\n      padding: 0.2rem;\n      margin-top: 0.2rem;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-add-form label {\n      align-self: flex-start;\n      margin-top: 1rem;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 button {\n    font-size: 0.8em;\n    margin-top: 1rem;\n    border: none;\n    background-color: var(--mid-gray);\n    background-color: var(--mid-gray);\n    color: white;\n    padding: 0.5rem\n  }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 button:hover {\n  background-color: var(--soft-black);\n  background-color: var(--soft-black);\n}\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list h3 {\n      margin-top: 2rem;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list a {\n      color: var(--magenta);\n      color: var(--magenta);\n      font-weight: 500;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list button {\n      margin: 0 0 0 0.5rem;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list li {\n      margin-bottom: 0.8rem;\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list .remove-friend {\n      position: relative;\n      padding-left: 0;\n      top: 0.1rem;\n      font-size: 2.5em;\n      line-height: 1.5rem;\n      margin: 0 0.5rem 0 0;\n      border: none;\n      color: var(--mid-gray);\n      color: var(--mid-gray);\n      background-color: transparent\n    }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list .remove-friend:hover {\n  color: var(--magenta);\n  color: var(--magenta);\n}\n  ._3Q2_c7qUk8dMcq4YKA2MU1 img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    margin-right: 1rem;\n  }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .existing-friends {\n    display: flex;\n    align-items: flex-start;\n    position: relative;\n  }\n  ._3Q2_c7qUk8dMcq4YKA2MU1 .friend-list-item {\n    display: flex;\n    align-items: center;\n  }\n@media (min-width: 470px) {\n  ._3Q2_c7qUk8dMcq4YKA2MU1 {\n    width: 350px;\n  }\n}\n","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/friends/Friends.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,eAAe;CAgFhB;EA/EC;IACE,sBAAsB;GACvB;EACD;IACE,uCAAuC;IAAvC,uCAAuC;IACvC,cAAc;IACd,cAAc;IACd,uBAAuB;GAaxB;EAZC;MACE,eAAe;MACf,YAAY;MACZ,kCAAkC;MAAlC,kCAAkC;MAClC,eAAe;MACf,gBAAgB;MAChB,mBAAmB;KACpB;EACD;MACE,uBAAuB;MACvB,iBAAiB;KAClB;EAEH;IACE,iBAAiB;IACjB,iBAAiB;IACjB,aAAa;IACb,kCAAkC;IAAlC,kCAAkC;IAClC,aAAa;IACb,eAAgB;GAIjB;EAHC;EACE,oCAAoC;EAApC,oCAAoC;CACrC;EAGD;MACE,iBAAiB;KAClB;EACD;MACE,sBAAsB;MAAtB,sBAAsB;MACtB,iBAAiB;KAClB;EACD;MACE,qBAAqB;KACtB;EACD;MACE,sBAAsB;KACvB;EACD;MACE,mBAAmB;MACnB,gBAAgB;MAChB,YAAY;MACZ,iBAAiB;MACjB,oBAAoB;MACpB,qBAAqB;MACrB,aAAa;MACb,uBAAuB;MAAvB,uBAAuB;MACvB,6BAA8B;KAI/B;EAHC;EACE,sBAAsB;EAAtB,sBAAsB;CACvB;EAGL;IACE,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,mBAAmB;GACpB;EACD;IACE,cAAc;IACd,wBAAwB;IACxB,mBAAmB;GACpB;EACD;IACE,cAAc;IACd,oBAAoB;GACrB;AACD;EAhFF;IAiFI,aAAa;GAEhB;CADE",file:"Friends.css",sourcesContent:[":local(.friends) {\n  padding: 2rem 1rem;\n  width: 75%;\n  margin: 0 auto;\n  h3 {\n    margin-bottom: 0.5rem;\n  }\n  .friend-add-form {\n    border: 1rem solid var(--dark-saffron);\n    padding: 1rem;\n    display: flex;\n    flex-direction: column;\n    input {\n      display: block;\n      width: 100%;\n      border: 1px solid var(--mid-gray);\n      font-size: 1em;\n      padding: 0.2rem;\n      margin-top: 0.2rem;\n    }\n    label {\n      align-self: flex-start;\n      margin-top: 1rem;\n    }\n  }\n  button {\n    font-size: 0.8em;\n    margin-top: 1rem;\n    border: none;\n    background-color: var(--mid-gray);\n    color: white;\n    padding: 0.5rem;\n    &:hover {\n      background-color: var(--soft-black);\n    }\n  }\n  .friend-list {\n    h3 {\n      margin-top: 2rem;\n    }\n    a {\n      color: var(--magenta);\n      font-weight: 500;\n    }\n    button {\n      margin: 0 0 0 0.5rem;\n    }\n    li {\n      margin-bottom: 0.8rem;\n    }\n    .remove-friend {\n      position: relative;\n      padding-left: 0;\n      top: 0.1rem;\n      font-size: 2.5em;\n      line-height: 1.5rem;\n      margin: 0 0.5rem 0 0;\n      border: none;\n      color: var(--mid-gray);\n      background-color: transparent;\n      &:hover {\n        color: var(--magenta);\n      }\n    }\n  }\n  img {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    margin-right: 1rem;\n  }\n  .existing-friends {\n    display: flex;\n    align-items: flex-start;\n    position: relative;\n  }\n  .friend-list-item {\n    display: flex;\n    align-items: center;\n  }\n  @media (min-width: 470px) {\n    width: 350px;\n  }\n}\n"],sourceRoot:""}]),t.locals={friends:"_3Q2_c7qUk8dMcq4YKA2MU1"}},function(e,t,n){var r=n(38);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=i(r),a=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{render(){const{firstName:e,lastName:t,imageUrl:n}=this.props;return o.default.createElement("li",{className:"friend-list-item"},o.default.createElement("img",{src:n||"https://user-images.githubusercontent.com/35273043/42105486-551c71d2-7b85-11e8-8aa4-ee39ebe015d7.png",alt:`profile picture for ${e} ${t}`}),o.default.createElement("p",null,e," ",t))}}t.default=l,l.propTypes={firstName:a.default.any,lastName:a.default.any,imageUrl:a.default.any}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=f(r),a=f(n(0)),i=n(9),l=n(5),u=f(n(40)),s=f(n(39)),c=n(37),d=n(17);function f(e){return e&&e.__esModule?e:{default:e}}class p extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={addFriendForm:"",friendMessage:null},this.handleChange=(({target:e})=>{this.setState({addFriendForm:e.value})}),this.handleSubmit=(e=>{e.preventDefault(),this.props.sendFriendRequest({email:`${this.state.addFriendForm}`}).then(e=>{this.setState({friendMessage:e.payload})}),this.setState({addFriendForm:""})}),this.handleAcceptFriend=(e=>{this.props.acceptFriendRequest(e.target.id),this.props.loadFriends()}),this.handleRemoveFriend=(e=>{confirm("This will remove your friend, and remove you from their friends list. Are you sure you want to do this?")&&(this.props.removeFriend(e.target.id),this.props.loadFriends())}),t}componentDidMount(){this.props.loadFriends()}render(){const{friends:e}=this.props,{addFriendForm:t,friendMessage:n}=this.state;return o.default.createElement("div",{className:s.default.friends},o.default.createElement("h3",null,"Add a Friend"),o.default.createElement("form",{className:"friend-add-form",onSubmit:this.handleSubmit},o.default.createElement("div",{className:"input-wrapper"},o.default.createElement("label",{htmlFor:"add-friend"},"Enter your friend's email:"),o.default.createElement("input",{onChange:this.handleChange,id:"add-friend",name:"addFriendForm",type:"text",required:!0,value:t})),o.default.createElement("button",{type:"submit"},"SEND REQUEST"),n&&o.default.createElement("p",null,n)),o.default.createElement("div",{className:"friend-list"},e[1]&&!!e[1].length&&o.default.createElement("h3",null,"Pending Friend Requests"),o.default.createElement("ul",null,e[1]&&e[1].map(e=>o.default.createElement("li",{key:e._id},e.firstName,o.default.createElement("button",{id:e._id,onClick:this.handleAcceptFriend},"ACCEPT"))))),o.default.createElement("div",{className:"friend-list"},o.default.createElement("h3",null,"Friends"),o.default.createElement("ul",null,e[0]&&e[0].map((e,t)=>o.default.createElement("span",{className:"existing-friends",key:t},o.default.createElement("button",{id:e._id,className:"remove-friend",onClick:this.handleRemoveFriend},"×"),o.default.createElement(i.Link,{to:`/friends/${e._id}`},o.default.createElement(u.default,{firstName:e.firstName,lastName:e.lastName,imageUrl:e.imageUrl})))))))}}p.propTypes={friends:a.default.array,sendFriendRequest:a.default.func.isRequired,acceptFriendRequest:a.default.func.isRequired,loadFriends:a.default.func.isRequired,removeFriend:a.default.func.isRequired},t.default=(0,l.connect)(e=>({friends:(0,d.getFriends)(e)}),{loadFriends:c.loadFriends,sendFriendRequest:c.sendFriendRequest,acceptFriendRequest:c.acceptFriendRequest,removeFriend:c.removeFriend})(p)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._1oYrgbKdBmQOjKbWNQB09O {\n  padding: 2rem 1rem;\n}\n  ._1oYrgbKdBmQOjKbWNQB09O li {\n    border: 1rem solid var(--mid-gray);\n    border: 1rem solid var(--mid-gray);\n    margin-bottom: 2rem;\n  }\n  ._1oYrgbKdBmQOjKbWNQB09O li .owner {\n      background-color: var(--soft-black);\n      background-color: var(--soft-black);\n      padding: 0.5rem;\n      color: var(--mid-gray);\n      color: var(--mid-gray);\n      font-weight: 400;\n    }\n  ._1oYrgbKdBmQOjKbWNQB09O li .owner a {\n        color: white;\n        font-weight: 500;\n      }\n  ._1oYrgbKdBmQOjKbWNQB09O li .content {\n      padding: 1rem;\n    }\n  ._1oYrgbKdBmQOjKbWNQB09O li .feed-date {\n      font-weight: 400;\n      margin-top: 0.5rem;\n    }\n  ._1oYrgbKdBmQOjKbWNQB09O .giving {\n    border-color: var(--magenta);\n    border-color: var(--magenta);\n  }\n  ._1oYrgbKdBmQOjKbWNQB09O .requesting {\n    border-color: var(--dark-saffron);\n    border-color: var(--dark-saffron);\n  }\n@media (min-width: 730px) {\n  ._1oYrgbKdBmQOjKbWNQB09O {\n    margin: 0 auto;\n    width: 550px;\n  }\n}","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/feed/Feed.css"],names:[],mappings:"AAAA;EACE,mBAAmB;CAgCpB;EA/BC;IACE,mCAAmC;IAAnC,mCAAmC;IACnC,oBAAoB;GAkBrB;EAjBC;MACE,oCAAoC;MAApC,oCAAoC;MACpC,gBAAgB;MAChB,uBAAuB;MAAvB,uBAAuB;MACvB,iBAAiB;KAKlB;EAJC;QACE,aAAa;QACb,iBAAiB;OAClB;EAEH;MACE,cAAc;KACf;EACD;MACE,iBAAiB;MACjB,mBAAmB;KACpB;EAEH;IACE,6BAA6B;IAA7B,6BAA6B;GAC9B;EACD;IACE,kCAAkC;IAAlC,kCAAkC;GACnC;AACD;EA7BF;IA8BI,eAAe;IACf,aAAa;GAEhB;CADE",file:"Feed.css",sourcesContent:[":local(.feed) {\n  padding: 2rem 1rem;\n  li {\n    border: 1rem solid var(--mid-gray);\n    margin-bottom: 2rem;\n    .owner {\n      background-color: var(--soft-black);\n      padding: 0.5rem;\n      color: var(--mid-gray);\n      font-weight: 400;\n      a {\n        color: white;\n        font-weight: 500;\n      }\n    }\n    .content {\n      padding: 1rem;\n    }\n    .feed-date {\n      font-weight: 400;\n      margin-top: 0.5rem;\n    }\n  }\n  .giving {\n    border-color: var(--magenta);\n  }\n  .requesting {\n    border-color: var(--dark-saffron);\n  }\n  @media (min-width: 730px) {\n    margin: 0 auto;\n    width: 550px;\n  }\n}"],sourceRoot:""}]),t.locals={feed:"_1oYrgbKdBmQOjKbWNQB09O"}},function(e,t,n){var r=n(42);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadFeed=function(){return{type:o.FEED_LOAD,payload:(0,r.getFeed)()}};var r=n(13),o=n(16)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),a=u(n(0)),i=n(9),l=n(10);function u(e){return e&&e.__esModule?e:{default:e}}class s extends r.Component{render(){const{name:e,date:t,type:n,owner:r,ownerId:a}=this.props;return o.default.createElement("li",{className:n},o.default.createElement("h3",{className:"owner"},o.default.createElement(i.Link,{to:`/friends/${a}`},r)," is ",n,":"),o.default.createElement("div",{className:"content"},o.default.createElement("h3",null,e),o.default.createElement("h3",{className:"feed-date"},"by ",(0,l.formatDate)(t))))}}t.default=s,s.propTypes={name:a.default.string.isRequired,type:a.default.string.isRequired,date:a.default.string,owner:a.default.string.isRequired,ownerId:a.default.string.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(1),a=f(o),i=f(n(0)),l=n(5),u=f(n(45)),s=n(44),c=n(16),d=f(n(43));function f(e){return e&&e.__esModule?e:{default:e}}class p extends o.PureComponent{componentDidMount(){this.props.loadFeed()}render(){const{feed:e}=this.props;return e?a.default.createElement("div",{className:d.default.feed},a.default.createElement("ul",null,e&&e.map((e,t)=>a.default.createElement(u.default,r({key:t},e))))):null}}p.propTypes={feed:i.default.array.isRequired,loadFeed:i.default.func.isRequired},t.default=(0,l.connect)(e=>({feed:(0,c.getFeed)(e)}),{loadFeed:s.loadFeed,getFeed:c.getFeed})(p)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,'._25YvCOX3TRn0kUMXym1pQ9 {\n  margin: 9rem auto;\n  background: linear-gradient(330deg,var(--saffron), var(--magenta));\n  background: linear-gradient(330deg,var(--saffron), var(--magenta));\n  position: relative;\n  padding: 1rem;\n}\n  ._25YvCOX3TRn0kUMXym1pQ9 .wrapper {\n    padding: 4rem 7% 2rem 7%;\n    background-color: white;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 h4 {\n    font-size: 1.5em;\n    margin-bottom: 1rem;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .contact-info {\n    margin: 0 0 1rem 3rem;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .name-and-picture {\n    position: absolute;\n    top: -110px;\n    display: flex;\n    align-items: center;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .name-and-picture .picture-button {\n      background-color: var(--soft-black);\n      background-color: var(--soft-black);\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      border: none;\n      width: 2rem;\n      height: 2rem;\n      color: white;\n      font-size: 1.5em;\n      align-self: flex-end\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .name-and-picture .picture-button:hover {\n  background-color: var(--dark-saffron);\n  background-color: var(--dark-saffron);\n}\n  ._25YvCOX3TRn0kUMXym1pQ9 .name-and-picture .editing {\n      background-color: var(--dark-saffron);\n      background-color: var(--dark-saffron);\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .profile-picture {\n    position: relative;\n    height: 150px;\n    width: 150px;\n    border-radius: 50%;\n    background: url("https://user-images.githubusercontent.com/35273043/42075792-670034be-7b27-11e8-9950-1f88efc4902a.png") 50% 50% no-repeat;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .name {\n    margin: 1.3rem 0 0 0.6rem;\n    font-size: 2em;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .save-button {\n    background-color: var(--mid-gray);\n    background-color: var(--mid-gray);\n    font-size: 0.8em;\n    color: white;\n    height: 1.5rem;\n    padding: 0 0.3rem\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .save-button:hover {\n  background-color: var(--soft-black);\n  background-color: var(--soft-black);\n}\n  ._25YvCOX3TRn0kUMXym1pQ9 .button-and-heading {\n    display: flex;\n    align-items: center;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .button-and-heading button {\n      background-color: var(--soft-black);\n      background-color: var(--soft-black);\n      border: none;\n      width: 2rem;\n      height: 2rem;\n      color: white;\n      font-size: 1.5em;\n      margin: 0 0.5rem 1rem 0\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .button-and-heading button:hover {\n  background-color: var(--dark-saffron);\n  background-color: var(--dark-saffron);\n}\n  ._25YvCOX3TRn0kUMXym1pQ9 .button-and-heading .add-button {\n      font-size: 1.8rem;\n      line-height: 1.8rem;\n      font-weight: 500;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .button-and-heading .editing {\n      background-color: var(--dark-saffron);\n      background-color: var(--dark-saffron);\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 form {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 input {\n    width: 12rem;\n    height: 1.5rem;\n    padding: 0 0.2rem;\n    border: 1px solid var(--mid-gray);\n    border: 1px solid var(--mid-gray);\n    font-size: 1em;\n    margin: 0 0.5rem;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-form {\n    display: block;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-form input[type="checkbox"] {\n      width: -webkit-fit-content;\n      width: -moz-fit-content;\n      width: fit-content;\n      display: block;\n      margin: 0 0.5rem 0 0;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-form input[type="text"] {\n      width: 60%;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-form .checkbox {\n      display: flex;\n      align-items: center;\n      margin-bottom: 0.5rem;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-form button {\n      margin: 0.5rem 0;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-info {\n    margin: 0 0 1rem 3rem;\n  }\n  ._25YvCOX3TRn0kUMXym1pQ9 .availability-info p {\n      margin-top: 1rem;\n    }\n  ._25YvCOX3TRn0kUMXym1pQ9 .notes-heading {\n    font-weight: 500;\n    font-size: 1.2em;\n  }\n@media (min-width: 730px) {\n  ._25YvCOX3TRn0kUMXym1pQ9 {\n    width: 75%;\n  }\n}\n@media (min-width: 900px) {\n  ._25YvCOX3TRn0kUMXym1pQ9 {\n    width: 675px;\n  }\n}',"",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/profile/Profile.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,mEAAmE;EAAnE,mEAAmE;EACnE,mBAAmB;EACnB,cAAc;CAiIf;EAhIC;IACE,yBAAyB;IACzB,wBAAwB;GACzB;EACD;IACE,iBAAiB;IACjB,oBAAoB;GACrB;EACD;IACE,sBAAsB;GACvB;EACD;IACE,mBAAmB;IACnB,YAAY;IACZ,cAAc;IACd,oBAAoB;GAmBrB;EAlBC;MACE,oCAAoC;MAApC,oCAAoC;MACpC,mBAAmB;MACnB,SAAS;MACT,UAAU;MACV,aAAa;MACb,YAAY;MACZ,aAAa;MACb,aAAa;MACb,iBAAiB;MACjB,oBAAqB;KAItB;EAHC;EACE,sCAAsC;EAAtC,sCAAsC;CACvC;EAEH;MACE,sCAAsC;MAAtC,sCAAsC;KACvC;EAEH;IACE,mBAAmB;IACnB,cAAc;IACd,aAAa;IACb,mBAAmB;IACnB,0IAA0I;GAC3I;EACD;IACE,0BAA0B;IAC1B,eAAe;GAChB;EACD;IACE,kCAAkC;IAAlC,kCAAkC;IAClC,iBAAiB;IACjB,aAAa;IACb,eAAe;IACf,iBAAkB;GAInB;EAHC;EACE,oCAAoC;EAApC,oCAAoC;CACrC;EAEH;IACE,cAAc;IACd,oBAAoB;GAqBrB;EApBC;MACE,oCAAoC;MAApC,oCAAoC;MACpC,aAAa;MACb,YAAY;MACZ,aAAa;MACb,aAAa;MACb,iBAAiB;MACjB,uBAAwB;KAIzB;EAHC;EACE,sCAAsC;EAAtC,sCAAsC;CACvC;EAEH;MACE,kBAAkB;MAClB,oBAAoB;MACpB,iBAAiB;KAClB;EACD;MACE,sCAAsC;MAAtC,sCAAsC;KACvC;EAEH;IACE,cAAc;IACd,oBAAoB;IACpB,oBAAoB;GACrB;EACD;IACE,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,kCAAkC;IAAlC,kCAAkC;IAClC,eAAe;IACf,iBAAiB;GAClB;EACD;IACE,eAAe;GAiBhB;EAhBC;MACE,2BAAmB;MAAnB,wBAAmB;MAAnB,mBAAmB;MACnB,eAAe;MACf,qBAAqB;KACtB;EACD;MACE,WAAW;KACZ;EACD;MACE,cAAc;MACd,oBAAoB;MACpB,sBAAsB;KACvB;EACD;MACE,iBAAiB;KAClB;EAEH;IACE,sBAAsB;GAIvB;EAHC;MACE,iBAAiB;KAClB;EAEH;IACE,iBAAiB;IACjB,iBAAiB;GAClB;AACD;EA/HF;IAgII,WAAW;GAKd;CAJE;AACD;EAlIF;IAmII,aAAa;GAEhB;CADE",file:"Profile.css",sourcesContent:[':local(.profile) {\n  margin: 9rem auto;\n  background: linear-gradient(330deg,var(--saffron), var(--magenta));\n  position: relative;\n  padding: 1rem;\n  .wrapper {\n    padding: 4rem 7% 2rem 7%;\n    background-color: white;\n  }\n  h4 {\n    font-size: 1.5em;\n    margin-bottom: 1rem;\n  }\n  .contact-info {\n    margin: 0 0 1rem 3rem;\n  }\n  .name-and-picture {\n    position: absolute;\n    top: -110px;\n    display: flex;\n    align-items: center;\n    .picture-button {\n      background-color: var(--soft-black);\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      border: none;\n      width: 2rem;\n      height: 2rem;\n      color: white;\n      font-size: 1.5em;\n      align-self: flex-end;\n      &:hover {\n        background-color: var(--dark-saffron);\n      }\n    }\n    .editing {\n      background-color: var(--dark-saffron);\n    }\n  }\n  .profile-picture {\n    position: relative;\n    height: 150px;\n    width: 150px;\n    border-radius: 50%;\n    background: url("https://user-images.githubusercontent.com/35273043/42075792-670034be-7b27-11e8-9950-1f88efc4902a.png") 50% 50% no-repeat;\n  }\n  .name {\n    margin: 1.3rem 0 0 0.6rem;\n    font-size: 2em;\n  }\n  .save-button {\n    background-color: var(--mid-gray);\n    font-size: 0.8em;\n    color: white;\n    height: 1.5rem;\n    padding: 0 0.3rem;\n    &:hover {\n      background-color: var(--soft-black);\n    }\n  }\n  .button-and-heading {\n    display: flex;\n    align-items: center;\n    button {\n      background-color: var(--soft-black);\n      border: none;\n      width: 2rem;\n      height: 2rem;\n      color: white;\n      font-size: 1.5em;\n      margin: 0 0.5rem 1rem 0;\n      &:hover {\n        background-color: var(--dark-saffron);\n      }\n    }\n    .add-button {\n      font-size: 1.8rem;\n      line-height: 1.8rem;\n      font-weight: 500;\n    }\n    .editing {\n      background-color: var(--dark-saffron);\n    }\n  }\n  form {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n  }\n  input {\n    width: 12rem;\n    height: 1.5rem;\n    padding: 0 0.2rem;\n    border: 1px solid var(--mid-gray);\n    font-size: 1em;\n    margin: 0 0.5rem;\n  }\n  .availability-form {\n    display: block;\n    input[type="checkbox"] {\n      width: fit-content;\n      display: block;\n      margin: 0 0.5rem 0 0;\n    }\n    input[type="text"] {\n      width: 60%;\n    }\n    .checkbox {\n      display: flex;\n      align-items: center;\n      margin-bottom: 0.5rem;\n    }\n    button {\n      margin: 0.5rem 0;\n    }\n  }\n  .availability-info {\n    margin: 0 0 1rem 3rem;\n    p {\n      margin-top: 1rem;\n    }\n  }\n  .notes-heading {\n    font-weight: 500;\n    font-size: 1.2em;\n  }\n  @media (min-width: 730px) {\n    width: 75%;\n  }\n  @media (min-width: 900px) {\n    width: 675px;\n  }\n}'],sourceRoot:""}]),t.locals={profile:"_25YvCOX3TRn0kUMXym1pQ9"}},function(e,t,n){var r=n(47);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,'._1VZ1VgXPKe8F9SxIGF2ghM {\n  position: relative;\n}\n  ._1VZ1VgXPKe8F9SxIGF2ghM h4 {\n    margin-bottom: 0.5rem;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM ul {\n    margin: 0 0 2rem 3rem;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM li {\n    font-weight: 500;\n    margin-top: 0.8rem;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .remove {\n    position: absolute;\n    bottom: 0;\n    font-size: 2em;\n    line-height: 1.5rem;\n    margin: 0 0.5rem;\n    border: none;\n    background-color: transparent\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .remove:hover {\n  color: var(--magenta);\n  color: var(--magenta);\n}\n  ._1VZ1VgXPKe8F9SxIGF2ghM .shareable-info {\n    position: relative;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .high-priority {\n    color: var(--magenta);\n    color: var(--magenta)\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .high-priority::before {\n  content: "\\276F   \\276F   \\276F";\n  color: var(--magenta);\n  color: var(--magenta);\n  padding-right: 0.5rem;\n}\n  ._1VZ1VgXPKe8F9SxIGF2ghM .accessible-priority {\n    position:absolute;\n    left:-10000px;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .shareable-form {\n    margin-bottom: 1.5rem;\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 3fr 2fr;\n    grid-gap: 1rem;\n    grid-template-areas: "description description" "date priority"\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .description {\n    grid-area: description;\n    display: flex;\n    align-items: center;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .description input {\n      width: 100%;\n      margin-right: 0;\n    }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .date {\n    grid-area: date;\n    display: flex;\n    align-items: center;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .date input {\n      width: auto;\n      width: initial;\n    }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .priority {\n    grid-area: priority;\n    display: flex;\n    align-items: center;\n    align-self: flex-start;\n  }\n  ._1VZ1VgXPKe8F9SxIGF2ghM .priority input {\n      width: auto;\n      width: initial;\n    }\n  ._1VZ1VgXPKe8F9SxIGF2ghM button {\n    grid-area: priority;\n    justify-self: flex-end;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n  }',"",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/profile/Shareable.css"],names:[],mappings:"AAAA;EACE,mBAAmB;CA6EpB;EA5EC;IACE,sBAAsB;GACvB;EACD;IACE,sBAAsB;GACvB;EACD;IACE,iBAAiB;IACjB,mBAAmB;GACpB;EACD;IACE,mBAAmB;IACnB,UAAU;IACV,eAAe;IACf,oBAAoB;IACpB,iBAAiB;IACjB,aAAa;IACb,6BAA8B;GAI/B;EAHC;EACE,sBAAsB;EAAtB,sBAAsB;CACvB;EAEH;IACE,mBAAmB;GACpB;EACD;IACE,sBAAsB;IAAtB,qBAAsB;GAMvB;EALC;EACE,iCAA6B;EAC7B,sBAAsB;EAAtB,sBAAsB;EACtB,sBAAsB;CACvB;EAEH;IACE,kBAAkB;IAClB,cAAc;GACf;EACD;IACE,sBAAsB;IACtB,cAAc;IACd,4BAA4B;IAC5B,+BAA+B;IAC/B,eAAe;IACf,8DAA8D;GAC/D;EACD;IACE,uBAAuB;IACvB,cAAc;IACd,oBAAoB;GAKrB;EAJC;MACE,YAAY;MACZ,gBAAgB;KACjB;EAEH;IACE,gBAAgB;IAChB,cAAc;IACd,oBAAoB;GAIrB;EAHC;MACE,YAAe;MAAf,eAAe;KAChB;EAEH;IACE,oBAAoB;IACpB,cAAc;IACd,oBAAoB;IACpB,uBAAuB;GAIxB;EAHC;MACE,YAAe;MAAf,eAAe;KAChB;EAEH;IACE,oBAAoB;IACpB,uBAAuB;IACvB,2BAAmB;IAAnB,wBAAmB;IAAnB,mBAAmB;GACpB",file:"Shareable.css",sourcesContent:[':local(.shareable) {\n  position: relative;\n  h4 {\n    margin-bottom: 0.5rem;\n  }\n  ul {\n    margin: 0 0 2rem 3rem;\n  }\n  li {\n    font-weight: 500;\n    margin-top: 0.8rem;\n  }\n  .remove {\n    position: absolute;\n    bottom: 0;\n    font-size: 2em;\n    line-height: 1.5rem;\n    margin: 0 0.5rem;\n    border: none;\n    background-color: transparent;\n    &:hover {\n      color: var(--magenta);\n    }\n  }\n  .shareable-info {\n    position: relative;\n  }\n  .high-priority {\n    color: var(--magenta);\n    &::before {\n      content: "\\276f \\276f \\276f";\n      color: var(--magenta);\n      padding-right: 0.5rem;\n    }\n  }\n  .accessible-priority {\n    position:absolute;\n    left:-10000px;\n  }\n  .shareable-form {\n    margin-bottom: 1.5rem;\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 3fr 2fr;\n    grid-gap: 1rem;\n    grid-template-areas: "description description" "date priority"\n  }\n  .description {\n    grid-area: description;\n    display: flex;\n    align-items: center;\n    input {\n      width: 100%;\n      margin-right: 0;\n    }\n  }\n  .date {\n    grid-area: date;\n    display: flex;\n    align-items: center;\n    input {\n      width: initial;\n    }\n  }\n  .priority {\n    grid-area: priority;\n    display: flex;\n    align-items: center;\n    align-self: flex-start;\n    input {\n      width: initial;\n    }\n  }\n  button {\n    grid-area: priority;\n    justify-self: flex-end;\n    width: fit-content;\n  }\n}'],sourceRoot:""}]),t.locals={shareable:"_1VZ1VgXPKe8F9SxIGF2ghM"}},function(e,t,n){var r=n(49);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),a=l(n(0)),i=n(10);function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={name:"",date:"",priority:!1},this.handleChange=(({target:e})=>{this.setState({[e.name]:e.value})}),this.handleSubmit=(e=>{e.preventDefault();const{shareableType:t,onComplete:n}=this.props;let{name:r,date:o,priority:a}=this.state;a&&(a=2),o&&(o=(0,i.localizeDate)(o)),n({name:r,date:o,priority:a,type:t}),this.setState({name:"",date:"",priority:!1})}),t}render(){const{action:e,shareableType:t}=this.props,{name:n,date:r,priority:a}=this.state;return o.default.createElement("form",{className:"shareable-form",onSubmit:this.handleSubmit},o.default.createElement("div",{className:"description"},o.default.createElement("label",{htmlFor:`${t}-name`},"Description:"),o.default.createElement("input",{id:`${t}-name`,type:"text",name:"name",value:n,required:!0,onChange:this.handleChange})),o.default.createElement("div",{className:"date"},o.default.createElement("label",{htmlFor:`${t}-date`},"By (optional):"),o.default.createElement("input",{id:`${t}-date`,type:"date",name:"date",value:r,onChange:this.handleChange})),o.default.createElement("div",{className:"priority"},o.default.createElement("label",{htmlFor:`${t}-priority`},"Urgent?"),o.default.createElement("input",{id:`${t}-priority`,type:"checkbox",name:"priority",checked:a,onChange:this.handleChange})),o.default.createElement("button",{className:"save-button",type:"submit"},e))}}t.default=u,u.propTypes={shareableType:a.default.string.isRequired,action:a.default.string.isRequired,onComplete:a.default.func.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=d(r),a=d(n(0)),i=n(5),l=n(11),u=d(n(51)),s=n(10),c=d(n(50));function d(e){return e&&e.__esModule?e:{default:e}}class f extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={editing:!1},this.handleFormToggle=(()=>{this.setState(e=>({editing:!e.editing}))}),this.handleClick=((e,t)=>{confirm("Are you sure you'd like to delete this shareable?")&&this.props.removeShareable(e,t)}),t}render(){const{heading:e,shareableType:t,shareable:n,addShareable:r,isUser:a}=this.props,{editing:i}=this.state;return o.default.createElement("section",{className:c.default.shareable},o.default.createElement("div",{className:"button-and-heading"},a&&o.default.createElement("button",{className:i?"editing add-button":"add-button",onClick:this.handleFormToggle},"＋"),o.default.createElement("h4",null,e,":")),a&&i&&o.default.createElement(u.default,{shareableType:t,action:"ADD",onComplete:r}),o.default.createElement("ul",null,n.map(e=>o.default.createElement("li",{key:e._id},!!e.priority&&o.default.createElement("span",{className:"accessible-priority"},"urgent"),o.default.createElement("span",{className:e.priority?"high-priority shareable-info":"shareable-info"},e.name,e.date&&` (by ${(0,s.formatDate)(e.date)})`,a&&o.default.createElement("button",{className:"remove",onClick:()=>this.handleClick(e._id,t)},"×"))))))}}f.propTypes={heading:a.default.string.isRequired,shareableType:a.default.string.isRequired,shareable:a.default.array.isRequired,addShareable:a.default.func.isRequired,removeShareable:a.default.func.isRequired,isUser:a.default.bool},t.default=(0,i.connect)(null,{addShareable:l.addShareable,removeShareable:l.removeShareable})(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),a=l(n(0)),i=n(10);function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{render(){const{handleCheckboxChange:e,days:t}=this.props,n=Object.keys(t);return o.default.createElement(r.Fragment,null,n.map(n=>o.default.createElement("div",{className:"checkbox",key:n},o.default.createElement("input",{onChange:t=>e(t),id:n,type:"checkbox",name:n,checked:t[n]}),o.default.createElement("label",{htmlFor:n},(0,i.capitalize)(n)))))}}t.default=u,u.propTypes={handleCheckboxChange:a.default.func.isRequired,days:a.default.object.isRequired}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(1),a=c(o),i=c(n(0)),l=n(5),u=n(11),s=c(n(53));function c(e){return e&&e.__esModule?e:{default:e}}class d extends o.PureComponent{constructor(...e){var t;return t=super(...e),this.state={days:{sunday:!1,monday:!1,tuesday:!1,wednesday:!1,thursday:!1,friday:!1,saturday:!1},notes:""},this.handleChange=(({target:e})=>{const{type:t,name:n,checked:o,value:a}=e;"checkbox"===t?this.setState(e=>({days:r({},e.days,{[n]:o})})):this.setState({[n]:a})}),this.handleSubmit=(e=>{e.preventDefault();const{days:t,notes:n}=this.state,r=Object.keys(t).filter(e=>t[e]);this.props.updateProfile({availability:{days:r,notes:n}}),this.props.onDone("editingAvailability")}),t}render(){const{notes:e,days:t}=this.state;return a.default.createElement("form",{className:"availability-form",onSubmit:this.handleSubmit},a.default.createElement(s.default,{handleCheckboxChange:this.handleChange,days:t}),a.default.createElement("label",{htmlFor:"notes"},"Notes:"),a.default.createElement("input",{onChange:this.handleChange,id:"notes",name:"notes",type:"text",value:e}),a.default.createElement("button",{className:"save-button",type:"submit"},"SAVE"))}}d.propTypes={updateProfile:i.default.func.isRequired,onDone:i.default.func.isRequired},t.default=(0,l.connect)(null,{updateProfile:u.updateProfile})(d)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),a=u(n(0)),i=n(5),l=n(11);function u(e){return e&&e.__esModule?e:{default:e}}class s extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={contact:""},this.handleChange=(({target:e})=>{this.setState({contact:e.value})}),this.handleSubmit=(e=>{e.preventDefault(),this.props.updateProfile(this.state),this.props.onDone("editingContact")}),t}render(){const{contact:e}=this.state;return o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("label",{htmlFor:"contact"},"How should friends contact you?"),o.default.createElement("input",{id:"contact",type:"text",value:e,required:!0,onChange:this.handleChange}),o.default.createElement("button",{className:"save-button",type:"submit"},"SAVE"))}}s.propTypes={updateProfile:a.default.func.isRequired,onDone:a.default.func.isRequired},t.default=(0,i.connect)(null,{updateProfile:l.updateProfile})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),a=u(n(0)),i=n(5),l=n(11);function u(e){return e&&e.__esModule?e:{default:e}}class s extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={pictureUrl:""},this.handleChange=(({target:e})=>{this.setState({pictureUrl:e.value})}),this.handleSubmit=(e=>{e.preventDefault(),this.props.updateProfile(this.state),this.props.onDone("editingPicture")}),t}render(){const{pictureUrl:e}=this.state;return o.default.createElement("form",{onSubmit:this.handleSubmit},o.default.createElement("label",{htmlFor:"picture"},"Enter an Image URL:"),o.default.createElement("input",{id:"picture",type:"text",required:!0,value:e,onChange:this.handleChange}),o.default.createElement("button",{className:"save-button",type:"submit"},"SAVE"))}}s.propTypes={updateProfile:a.default.func.isRequired,onDone:a.default.func.isRequired},t.default=(0,i.connect)(null,{updateProfile:l.updateProfile})(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=m(r),a=m(n(0)),i=n(5),l=n(18),u=n(11),s=m(n(56)),c=m(n(55)),d=m(n(54)),f=m(n(52)),p=n(10),h=m(n(48));function m(e){return e&&e.__esModule?e:{default:e}}class g extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={editingPicture:!1,editingContact:!1,editingAvailability:!1},this.handleProfileLoad=(()=>{const{match:e,isUser:t,loadProfile:n}=this.props;t?n():n(e.params.id)}),this.handleFormToggle=(e=>{this.setState(t=>({[e]:!t[e]}))}),t}componentDidMount(){this.handleProfileLoad()}componentDidUpdate({location:e}){e.pathname!==this.props.location.pathname&&(this.props.clearProfile(),this.handleProfileLoad())}componentWillUnmount(){this.props.clearProfile()}render(){const{profile:e,giving:t,requesting:n,isUser:r}=this.props,{editingPicture:a,editingContact:i,editingAvailability:l}=this.state;if(!e)return null;const{firstName:u,lastName:m,pictureUrl:g,availability:v,contact:y}=e;return o.default.createElement("section",{className:h.default.profile},o.default.createElement("div",{className:"wrapper"},o.default.createElement("div",{className:"name-and-picture"},o.default.createElement("div",{className:"profile-picture",style:g&&{background:`url(${g}) 50% 50% no-repeat`}},r&&o.default.createElement("button",{className:a?"editing picture-button":"picture-button",onClick:()=>this.handleFormToggle("editingPicture")},"✎")),o.default.createElement("h2",{className:"name"},u," ",m)),r&&a&&o.default.createElement(s.default,{onDone:this.handleFormToggle}),o.default.createElement("div",{className:"button-and-heading"},r&&o.default.createElement("button",{className:i?"editing":void 0,onClick:()=>this.handleFormToggle("editingContact")},"✎"),o.default.createElement("h4",null,"Reachable at:")),r&&i&&o.default.createElement(c.default,{onDone:this.handleFormToggle}),o.default.createElement("p",{className:"contact-info"},y),o.default.createElement("div",{className:"button-and-heading"},r&&o.default.createElement("button",{className:l?"editing":void 0,onClick:()=>this.handleFormToggle("editingAvailability")},"✎"),o.default.createElement("h4",null,"Most Likely to Be Available:")),r&&l&&o.default.createElement(d.default,{onDone:this.handleFormToggle}),o.default.createElement("div",{className:"availability-info"},o.default.createElement("ul",null,v&&v.days&&v.days.map((e,t)=>o.default.createElement("li",{key:t},(0,p.capitalize)(e)))),v&&v.notes&&o.default.createElement("p",null,o.default.createElement("span",{className:"notes-heading"},"Notes: "),v.notes)),o.default.createElement(f.default,{isUser:r,heading:"Giving",shareableType:"giving",shareable:t}),o.default.createElement(f.default,{isUser:r,heading:"Requesting",shareableType:"requesting",shareable:n})))}}g.propTypes={match:a.default.object,location:a.default.object.isRequired,isUser:a.default.bool,loadProfile:a.default.func.isRequired,clearProfile:a.default.func.isRequired,profile:a.default.object,giving:a.default.array,requesting:a.default.array},t.default=(0,i.connect)(e=>({giving:(0,l.getGivingArray)(e),requesting:(0,l.getRequestingArray)(e),profile:(0,l.getProfile)(e)}),{loadProfile:u.loadProfile,clearProfile:u.clearProfile})(g)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._2-A8Gdn-2Ll3AzK1tyn3YW {\n  width: 75%;\n  margin: 2rem auto 0 auto;\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-nav {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-nav li {\n      width: 50%;\n    }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-nav a {\n      text-align: center;\n      font-size: 1.2em;\n      padding: 0.5rem 2rem;\n      font-weight: 500;\n      color: white;\n      display: block;\n    }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-link {\n    background-color: var(--mid-gray);\n    background-color: var(--mid-gray)\n  }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-link:hover {\n  background-color: var(--soft-black);\n  background-color: var(--soft-black);\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .signin {\n    background-color: var(--dark-saffron);\n    background-color: var(--dark-saffron)\n  }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .signin:hover {\n  background-color: var(--dark-saffron);\n  background-color: var(--dark-saffron);\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW a.signin {\n  padding-top: 1rem;\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW a.signup {\n  padding-top: 1rem;\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .signup {\n    background-color: var(--magenta);\n    background-color: var(--magenta)\n  }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .signup:hover {\n  background-color: var(--magenta);\n  background-color: var(--magenta);\n}\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-form {\n    width: 100%;\n    padding: 1rem;\n  }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-form form {\n      width: 100%;\n      background-color: white;\n    }\n  ._2-A8Gdn-2Ll3AzK1tyn3YW .auth-error {\n    text-align: center;\n    margin-top: 1rem;\n    font-weight: 500;\n  }\n@media (min-width: 470px) {\n  ._2-A8Gdn-2Ll3AzK1tyn3YW {\n    width: 350px;\n  }\n}","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/auth/Auth.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,yBAAyB;CA2D1B;EA1DC;IACE,cAAc;IACd,+BAA+B;IAC/B,sBAAsB;GAYvB;EAXC;MACE,WAAW;KACZ;EACD;MACE,mBAAmB;MACnB,iBAAiB;MACjB,qBAAqB;MACrB,iBAAiB;MACjB,aAAa;MACb,eAAe;KAChB;EAEH;IACE,kCAAkC;IAAlC,iCAAkC;GAInC;EAHC;EACE,oCAAoC;EAApC,oCAAoC;CACrC;EAEH;IACE,sCAAsC;IAAtC,qCAAsC;GAIvC;EAHC;EACE,sCAAsC;EAAtC,sCAAsC;CACvC;EAGD;EACE,kBAAkB;CACnB;EACD;EACE,kBAAkB;CACnB;EAEH;IACE,iCAAiC;IAAjC,gCAAiC;GAIlC;EAHC;EACE,iCAAiC;EAAjC,iCAAiC;CAClC;EAEH;IACE,YAAY;IACZ,cAAc;GAKf;EAJC;MACE,YAAY;MACZ,wBAAwB;KACzB;EAEH;IACE,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;GAClB;AACD;EA1DF;IA2DI,aAAa;GAEhB;CADE",file:"Auth.css",sourcesContent:[":local(.auth) {\n  width: 75%;\n  margin: 2rem auto 0 auto;\n  .auth-nav {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    li {\n      width: 50%;\n    }\n    a {\n      text-align: center;\n      font-size: 1.2em;\n      padding: 0.5rem 2rem;\n      font-weight: 500;\n      color: white;\n      display: block;\n    }\n  }\n  .auth-link {\n    background-color: var(--mid-gray);\n    &:hover {\n      background-color: var(--soft-black);\n    }\n  }\n  .signin {\n    background-color: var(--dark-saffron);\n    &:hover {\n      background-color: var(--dark-saffron);\n    }\n  }\n  a {\n    &.signin {\n      padding-top: 1rem;\n    } \n    &.signup {\n      padding-top: 1rem;\n    } \n  }\n  .signup {\n    background-color: var(--magenta);\n    &:hover {\n      background-color: var(--magenta);\n    }\n  }\n  .auth-form {\n    width: 100%;\n    padding: 1rem;\n    form {\n      width: 100%;\n      background-color: white;\n    }\n  }\n  .auth-error {\n    text-align: center;\n    margin-top: 1rem;\n    font-weight: 500;\n  }\n  @media (min-width: 470px) {\n    width: 350px;\n  }\n}"],sourceRoot:""}]),t.locals={auth:"_2-A8Gdn-2Ll3AzK1tyn3YW"}},function(e,t,n){var r=n(58);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,"._3p-V-HCiwycd7Eke4FlJPb .input-wrapper {\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n    ._3p-V-HCiwycd7Eke4FlJPb .input-wrapper label {\n      align-self: flex-start;\n      margin-top: 1rem;\n      margin-bottom: 0.2rem;\n    }\n    ._3p-V-HCiwycd7Eke4FlJPb .input-wrapper input {\n      display: block;\n      width: 12rem;\n      border: 1px solid var(--mid-gray);\n      border: 1px solid var(--mid-gray);\n      font-size: 1em;\n      padding: 0.2rem;\n    }\n    ._3p-V-HCiwycd7Eke4FlJPb .input-wrapper button {\n      align-self: flex-end;\n      font-size: 0.8em;\n      margin: 1rem 0;\n      border: none;\n      background-color: var(--mid-gray);\n      background-color: var(--mid-gray);\n      color: white;\n      padding: 0.5rem\n    }\n    ._3p-V-HCiwycd7Eke4FlJPb .input-wrapper button:hover {\n    background-color: var(--soft-black);\n    background-color: var(--soft-black);\n}","",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/auth/Credentials.css"],names:[],mappings:"AACE;IACE,2BAAmB;IAAnB,wBAAmB;IAAnB,mBAAmB;IACnB,eAAe;IACf,cAAc;IACd,uBAAuB;IACvB,oBAAoB;GAyBrB;IAxBC;MACE,uBAAuB;MACvB,iBAAiB;MACjB,sBAAsB;KACvB;IACD;MACE,eAAe;MACf,aAAa;MACb,kCAAkC;MAAlC,kCAAkC;MAClC,eAAe;MACf,gBAAgB;KACjB;IACD;MACE,qBAAqB;MACrB,iBAAiB;MACjB,eAAe;MACf,aAAa;MACb,kCAAkC;MAAlC,kCAAkC;MAClC,aAAa;MACb,eAAgB;KAIjB;IAHC;IACE,oCAAoC;IAApC,oCAAoC;CACrC",file:"Credentials.css",sourcesContent:[":local(.credentials) {\n  .input-wrapper {\n    width: fit-content;\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    label {\n      align-self: flex-start;\n      margin-top: 1rem;\n      margin-bottom: 0.2rem;\n    }\n    input {\n      display: block;\n      width: 12rem;\n      border: 1px solid var(--mid-gray);\n      font-size: 1em;\n      padding: 0.2rem;\n    }\n    button {\n      align-self: flex-end;\n      font-size: 0.8em;\n      margin: 1rem 0;\n      border: none;\n      background-color: var(--mid-gray);\n      color: white;\n      padding: 0.5rem;\n      &:hover {\n        background-color: var(--soft-black);\n      }\n    }\n  }\n}"],sourceRoot:""}]),t.locals={credentials:"_3p-V-HCiwycd7Eke4FlJPb"}},function(e,t,n){var r=n(60);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),a=l(n(0)),i=l(n(61));function l(e){return e&&e.__esModule?e:{default:e}}class u extends r.PureComponent{constructor(...e){var t;return t=super(...e),this.state={firstName:"",lastName:"",email:"",password:""},this.handleChange=(({target:e})=>{this.setState({[e.id]:e.value})}),this.handleSubmit=(e=>{e.preventDefault(),this.props.submitCredentials(this.state)}),t}render(){const{action:e,includeName:t=!1}=this.props,{firstName:n,lastName:a,email:l,password:u}=this.state;return o.default.createElement("form",{onSubmit:this.handleSubmit,className:i.default.credentials},o.default.createElement("div",{className:"input-wrapper"},t&&o.default.createElement(r.Fragment,null,o.default.createElement("label",{htmlFor:"firstName"},"First Name:"),o.default.createElement("input",{type:"text",id:"firstName",value:n,required:!0,onChange:this.handleChange}),o.default.createElement("label",{htmlFor:"lastName"},"Last Name:"),o.default.createElement("input",{type:"text",id:"lastName",value:a,required:!0,onChange:this.handleChange})),o.default.createElement("label",{htmlFor:"email"},"Email:"),o.default.createElement("input",{type:"text",id:"email",value:l,required:!0,onChange:this.handleChange}),o.default.createElement("label",{htmlFor:"password"},"Password:"),o.default.createElement("input",{type:"password",id:"password",value:u,required:!0,onChange:this.handleChange}),o.default.createElement("button",{type:"submit"},e)))}}t.default=u,u.propTypes={submitCredentials:a.default.func.isRequired,action:a.default.string.isRequired,includeName:a.default.bool}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clearError=void 0;var r=n(12);t.clearError=(()=>({type:r.ERROR_CLEAR}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=h(r),a=h(n(0)),i=n(9),l=n(5),u=n(12),s=n(63),c=n(6),d=n(19),f=h(n(62)),p=h(n(59));function h(e){return e&&e.__esModule?e:{default:e}}class m extends r.PureComponent{componentWillUnmount(){this.props.clearError()}render(){const{account:e,signin:t,signup:n,location:a,error:l}=this.props,u=a.state?a.state.from:"/";return e?o.default.createElement(i.Redirect,{to:u}):o.default.createElement("section",{className:p.default.auth},o.default.createElement("ul",{className:"auth-nav"},o.default.createElement("li",null,o.default.createElement(i.NavLink,{activeClassName:"signin",className:"auth-link",to:"/auth/signin"},"Sign In")),o.default.createElement("li",null,o.default.createElement(i.NavLink,{activeClassName:"signup",className:"auth-link",to:"/auth/signup"},"Sign Up"))),o.default.createElement(i.Switch,null,o.default.createElement(i.Route,{path:"/auth/signin",render:()=>o.default.createElement("div",{className:"auth-form signin"},o.default.createElement(f.default,{action:"SIGN IN",submitCredentials:t}),!!l&&o.default.createElement("p",null,l.error))}),o.default.createElement(i.Route,{path:"/auth/signup",render:()=>o.default.createElement(r.Fragment,null,o.default.createElement("div",{className:"auth-form signup"},o.default.createElement(f.default,{action:"SIGN UP",submitCredentials:n,includeName:!0})),o.default.createElement("div",{className:"auth-error"},!!l&&o.default.createElement("span",null,l.error)))}),o.default.createElement(i.Redirect,{to:"/auth/signin"})))}}m.propTypes={account:a.default.object,signin:a.default.func.isRequired,signup:a.default.func.isRequired,location:a.default.object,error:a.default.any,clearError:a.default.func.isRequired},t.default=(0,l.connect)(e=>({account:(0,c.getAccount)(e),error:(0,u.getError)(e)}),{signin:d.signin,signup:d.signup,clearError:s.clearError})(m)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(8)(!0)).push([e.i,'._3AGlt-Gg3cJwjElbNhHvxZ .logo {\n    text-align: center;\n    font-family: Lobster, sans-serif;\n    font-size: 4em;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    display: block;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    margin: 0 auto;\n    background: linear-gradient(150deg,var(--saffron), var(--magenta));\n    background: linear-gradient(150deg,var(--saffron), var(--magenta));\n    background-clip: text;\n    -webkit-background-clip: text;\n    color: transparent;\n  }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav {\n    width: 100%;\n    background-color: var(--soft-black);\n    background-color: var(--soft-black);\n    padding: 0 0.5rem;\n  }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul {\n      margin: 0 auto;\n      display: flex;\n      justify-content: space-around;\n      align-items: center;\n      padding: 0.5rem 0 0.5rem 0;\n    }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation {\n        font-size: 0.9em;\n        font-weight: 500;\n        color: white;\n        padding: 0.5rem;\n        position: relative\n      }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation::after {\n    content: "";\n    position: absolute;\n    bottom: 0;\n    border-bottom: 0.2rem solid var(--soft-black);\n    border-bottom: 0.2rem solid var(--soft-black);\n    left: 50%;\n    right: 50%;\n    transition: all 0.3s ease;\n}\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation:hover::after {\n    border-bottom: 0.2rem solid white;\n    left: 0;\n    right: 0;\n    transition: all 0.3s ease;\n}\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation.current {\n    color: var(--dark-saffron);\n    color: var(--dark-saffron);\n}\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation.current::after {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-bottom: 0.2rem solid var(--dark-saffron);\n    border-bottom: 0.2rem solid var(--dark-saffron);\n}\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .logout {\n        padding: 0.15rem;\n        background-color: var(--mid-gray);\n        background-color: var(--mid-gray);\n        font-size: 0.7em;\n        font-weight: 500;\n      }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .logout a {\n          color: var(--soft-black);\n          color: var(--soft-black);\n        }\n  ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .logout:hover {\n    background-color: var(--magenta);\n    background-color: var(--magenta);\n}\n@media (min-width: 400px) {\n        ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .navigation {\n          font-size: 1.2em;\n        }\n        ._3AGlt-Gg3cJwjElbNhHvxZ nav ul .logout {\n          font-size: 1em;\n          padding: 0.2rem;\n        }\n}\n@media (min-width: 700px) {\n      ._3AGlt-Gg3cJwjElbNhHvxZ nav ul {\n        width: 700px;\n      }\n}',"",{version:3,sources:["/home/victor/projects/friendship-app/frontend/src/components/app/Header.css"],names:[],mappings:"AACE;IACE,mBAAmB;IACnB,iCAAiC;IACjC,eAAe;IACf,oBAAoB;IACpB,uBAAuB;IACvB,eAAe;IACf,2BAAmB;IAAnB,wBAAmB;IAAnB,mBAAmB;IACnB,eAAe;IACf,mEAAmE;IAAnE,mEAAmE;IACnE,sBAAsB;IACtB,8BAA8B;IAC9B,mBAAmB;GACpB;EACD;IACE,YAAY;IACZ,oCAAoC;IAApC,oCAAoC;IACpC,kBAAkB;GAoDnB;EAnDC;MACE,eAAe;MACf,cAAc;MACd,8BAA8B;MAC9B,oBAAoB;MACpB,2BAA2B;KA6C5B;EA5CC;QACE,iBAAiB;QACjB,iBAAiB;QACjB,aAAa;QACb,gBAAgB;QAChB,kBAAmB;OA0BpB;EAzBD;IACE,YAAY;IACZ,mBAAmB;IACnB,UAAU;IACV,8CAA8C;IAA9C,8CAA8C;IAC9C,UAAU;IACV,WAAW;IACX,0BAA0B;CAC3B;EACD;IACE,kCAAkC;IAClC,QAAQ;IACR,SAAS;IACT,0BAA0B;CAC3B;EACD;IACE,2BAA2B;IAA3B,2BAA2B;CAC5B;EACD;IACE,mBAAmB;IACnB,UAAU;IACV,QAAQ;IACR,SAAS;IACT,gDAAgD;IAAhD,gDAAgD;CACjD;EAED;QACE,iBAAiB;QACjB,kCAAkC;QAAlC,kCAAkC;QAClC,iBAAiB;QACjB,iBAAiB;OAOlB;EANC;UACE,yBAAyB;UAAzB,yBAAyB;SAC1B;EACD;IACE,iCAAiC;IAAjC,iCAAiC;CAClC;AAIP;QAGM;UACE,iBAAiB;SAClB;QACD;UACE,eAAe;UACf,gBAAgB;SACjB;CAGN;AACD;MAEI;QACE,aAAa;OACd;CAEJ",file:"Header.css",sourcesContent:[':local(.header) {\n  .logo {\n    text-align: center;\n    font-family: Lobster, sans-serif;\n    font-size: 4em;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    display: block;\n    width: fit-content;\n    margin: 0 auto;\n    background: linear-gradient(150deg,var(--saffron), var(--magenta));\n    background-clip: text;\n    -webkit-background-clip: text;\n    color: transparent;\n  }\n  nav {\n    width: 100%;\n    background-color: var(--soft-black);\n    padding: 0 0.5rem;\n    ul {\n      margin: 0 auto;\n      display: flex;\n      justify-content: space-around;\n      align-items: center;\n      padding: 0.5rem 0 0.5rem 0;\n      .navigation {\n        font-size: 0.9em;\n        font-weight: 500;\n        color: white;\n        padding: 0.5rem;\n        position: relative;\n      &::after {\n        content: "";\n        position: absolute;\n        bottom: 0;\n        border-bottom: 0.2rem solid var(--soft-black);\n        left: 50%;\n        right: 50%;\n        transition: all 0.3s ease;\n      }\n      &:hover::after {\n        border-bottom: 0.2rem solid white;\n        left: 0;\n        right: 0;\n        transition: all 0.3s ease;\n      }\n      &.current {\n        color: var(--dark-saffron);\n      }\n      &.current::after {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-bottom: 0.2rem solid var(--dark-saffron);\n      }\n      }\n      .logout {\n        padding: 0.15rem;\n        background-color: var(--mid-gray);\n        font-size: 0.7em;\n        font-weight: 500;\n        a {\n          color: var(--soft-black);\n        }\n        &:hover {\n          background-color: var(--magenta);\n        }\n      }\n    }\n  }\n  @media (min-width: 400px) {\n    nav {\n      ul {\n        .navigation {\n          font-size: 1.2em;\n        }\n        .logout {\n          font-size: 1em;\n          padding: 0.2rem;\n        }\n      }\n    }\n  }\n  @media (min-width: 700px) {\n    nav {\n      ul {\n        width: 700px;\n      }\n    }\n  }\n}'],sourceRoot:""}]),t.locals={header:"_3AGlt-Gg3cJwjElbNhHvxZ"}},function(e,t,n){var r=n(66);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.default=(({dispatch:e})=>t=>n=>{const{type:o,payload:a}=n;return(e=>e&&"function"==typeof e.then)(a)?(e({type:r.LOAD_START}),a.then(t=>(e({type:r.LOAD_END}),e({type:o,payload:t})),t=>{throw e({type:r.LOAD_END}),e({type:r.ERROR,payload:t}),t})):t(n)})},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=d(r),a=n(9),i=n(5),l=d(n(0)),u=n(6),s=n(19),c=d(n(67));function d(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{render(){const{account:e,logout:t}=this.props;return o.default.createElement("header",{className:c.default.header},o.default.createElement(a.Link,{to:"/profile",className:"logo"},"Shareable"),o.default.createElement("nav",null,o.default.createElement("ul",null,o.default.createElement("li",null,o.default.createElement(a.NavLink,{className:"navigation",activeClassName:"current",to:"/about"},"About")),e&&o.default.createElement(r.Fragment,null,o.default.createElement("li",null,o.default.createElement(a.NavLink,{className:"navigation",activeClassName:"current",to:"/profile"},e.name)),o.default.createElement("li",null,o.default.createElement(a.NavLink,{className:"navigation",activeClassName:"current",to:"/feed"},"Feed")),o.default.createElement("li",null,o.default.createElement(a.NavLink,{className:"navigation",activeClassName:"current",to:"/friends"},"Friends")),o.default.createElement("li",{className:"logout"},o.default.createElement(a.Link,{to:"/auth",onClick:t},"Log Out"))))))}}f.propTypes={account:l.default.object,logout:l.default.func.isRequired},t.default=(0,i.connect)(e=>({account:(0,u.getAccount)(e)}),{logout:s.logout})(f)},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=v(r),a=v(n(0)),i=n(9),l=n(5),u=v(n(70)),s=v(n(64)),c=v(n(57)),d=v(n(46)),f=v(n(41)),p=v(n(36)),h=v(n(33)),m=n(6),g=n(19);function v(e){return e&&e.__esModule?e:{default:e}}class y extends r.PureComponent{componentDidMount(){this.props.attemptAccountLoad()}render(){const{checkedAuth:e}=this.props;return o.default.createElement(i.BrowserRouter,null,o.default.createElement("div",null,o.default.createElement(i.Route,{component:u.default}),o.default.createElement("main",null,e&&o.default.createElement(i.Switch,null,o.default.createElement(i.Route,{path:"/auth",component:s.default}),o.default.createElement(h.default,{path:"/profile",render:({location:e})=>o.default.createElement(c.default,{location:e,isUser:!0})}),o.default.createElement(h.default,{path:"/feed",component:d.default}),o.default.createElement(h.default,{exact:!0,path:"/friends",component:f.default}),o.default.createElement(h.default,{path:"/friends/:id",component:c.default}),o.default.createElement(i.Route,{path:"/about",component:p.default}),o.default.createElement(i.Redirect,{to:"/profile"})))))}}y.propTypes={attemptAccountLoad:a.default.func.isRequired,checkedAuth:a.default.bool.isRequired},t.default=(0,l.connect)(e=>({checkedAuth:(0,m.getCheckedAuth)(e)}),{attemptAccountLoad:g.attemptAccountLoad})(y)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(74);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(76);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(77);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(27),o=n(28),a=n(26),i=n(25),l="function"==typeof Symbol&&Symbol.for,u=l?Symbol.for("react.element"):60103,s=l?Symbol.for("react.portal"):60106,c=l?Symbol.for("react.fragment"):60107,d=l?Symbol.for("react.strict_mode"):60108,f=l?Symbol.for("react.profiler"):60114,p=l?Symbol.for("react.provider"):60109,h=l?Symbol.for("react.context"):60110,m=l?Symbol.for("react.async_mode"):60111,g=l?Symbol.for("react.forward_ref"):60112;l&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||A}function C(){}function E(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||A}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=b.prototype;var w=E.prototype=new C;w.constructor=E,r(w,b.prototype),w.isPureReactComponent=!0;var k={current:null},x=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function B(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:a,ref:i,props:o,_owner:k.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,T=[];function S(e,t,n,r){if(T.length){var o=T.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>T.length&&T.push(e)}function I(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case u:case s:a=!0}}if(a)return n(r,e,""===t?"."+M(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var l=t+M(o=e[i],i);a+=I(o,l,n,r)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=v&&e[v]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),i=0;!(o=e.next()).done;)a+=I(o=o.value,l=t+M(o,i++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function N(e,t){e.func.call(e.context,t,e.count++)}function j(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,i.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function U(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(P,"$&/")+"/"),t=S(t,a,r,o),null==e||I(e,"",j,t),R(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=S(null,null,t,n),null==e||I(e,"",N,t),R(t)},count:function(e){return null==e?0:I(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return U(e,t,null,i.thatReturnsArgument),t},only:function(e){return O(e)||y("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:g,render:e}},Fragment:c,StrictMode:d,unstable_AsyncMode:m,unstable_Profiler:f,createElement:B,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var o=void 0,a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=k.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)x.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var d=0;d<o;d++)c[d]=arguments[d+2];a.children=c}return{$$typeof:u,type:e.type,key:i,ref:l,props:a,_owner:s}},createFactory:function(e){var t=B.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:k,assign:r}},D={default:F},L=D&&F||D;e.exports=L.default?L.default:L},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(28),o=n(1),a=n(81),i=n(27),l=n(25),u=n(80),s=n(79),c=n(78),d=n(26);function f(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||f("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,l,u){(function(e,t,n,r,o,a,i,l,u){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,l,u){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var s=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}f("198")}};var h=null,m={};function g(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||f("96",e),!y[n])for(var r in t.extractEvents||f("97",e),y[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,l=r;A.hasOwnProperty(l)&&f("99",l),A[l]=a;var u=a.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&v(u[o],i,l);o=!0}else a.registrationName?(v(a.registrationName,i,l),o=!0):o=!1;o||f("98",r,e)}}}function v(e,t,n){b[e]&&f("100",e),b[e]=t,C[e]=t.eventTypes[n].dependencies}var y=[],A={},b={},C={};function E(e){h&&f("101"),h=Array.prototype.slice.call(e),g()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&f("102",t),m[t]=r,n=!0)}n&&g()}var k={plugins:y,eventNameDispatchConfigs:A,registrationNameModules:b,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:w},x=null,_=null,B=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=B(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function R(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function I(e){return R(e,!0)}function M(e){return R(e,!1)}var N={injectEventPluginOrder:E,injectEventPluginsByName:w};function j(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function U(e,t){null!==e&&(S=P(S,e)),e=S,S=null,e&&(T(e,t?I:M),S&&f("95"),p.rethrowCaughtError())}function F(e,t,n,r){for(var o=null,a=0;a<y.length;a++){var i=y[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=P(o,i))}U(o,!1)}var D={injection:N,getListener:j,runEventsInBatch:U,runExtractedEventsInBatch:F},L=Math.random().toString(36).slice(2),q="__reactInternalInstance$"+L,G="__reactEventHandlers$"+L;function z(e){if(e[q])return e[q];for(;!e[q];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[q]).tag||6===e.tag?e:null}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function K(e){return e[G]||null}var V={precacheFiberNode:function(e,t){t[q]=e},getClosestInstanceFromNode:z,getInstanceFromNode:function(e){return!(e=e[q])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:H,getFiberCurrentPropsFromNode:K,updateFiberProps:function(e,t){e[G]=t}};function Y(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Q(e,t,n){for(var r=[];e;)r.push(e),e=Y(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function W(e,t,n){(t=j(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.phasedRegistrationNames&&Q(e._targetInst,W,e)}function $(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;Q(t=t?Y(t):null,W,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=j(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function ee(e){T(e,X)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,l=o;l;l=Y(l))i++;l=0;for(var u=a;u;u=Y(u))l++;for(;0<i-l;)o=Y(o),i--;for(;0<l-i;)a=Y(a),l--;for(;i--;){if(o===a||o===a.alternate)break e;o=Y(o),a=Y(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=Y(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=Y(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){T(e,$)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){T(e,J)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ae={},ie={};function le(e){if(ae[e])return ae[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ie)return ae[e]=n[t];return e}a.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var ue=le("animationend"),se=le("animationiteration"),ce=le("animationstart"),de=le("transitionend"),fe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),pe=null;function he(){return!pe&&a.canUseDOM&&(pe="textContent"in document.documentElement?"textContent":"innerText"),pe}var me={_root:null,_startText:null,_fallbackText:null};function ge(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ve(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ve(){return"value"in me._root?me._root.value:me._root[he()]}var ye="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ae={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function be(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function Ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ee(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function we(e){e.eventPool=[],e.getPooled=Ce,e.release=Ee}i(be.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ye.length;t++)this[ye[t]]=null}}),be.Interface=Ae,be.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,we(n),n},we(be);var ke=be.extend({data:null}),xe=be.extend({data:null}),_e=[9,13,27,32],Be=a.canUseDOM&&"CompositionEvent"in window,Oe=null;a.canUseDOM&&"documentMode"in document&&(Oe=document.documentMode);var Pe=a.canUseDOM&&"TextEvent"in window&&!Oe,Te=a.canUseDOM&&(!Be||Oe&&8<Oe&&11>=Oe),Se=String.fromCharCode(32),Re={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ie=!1;function Me(e,t){switch(e){case"keyup":return-1!==_e.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ne(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var je=!1;var Ue={eventTypes:Re,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(Be)e:{switch(e){case"compositionstart":o=Re.compositionStart;break e;case"compositionend":o=Re.compositionEnd;break e;case"compositionupdate":o=Re.compositionUpdate;break e}o=void 0}else je?Me(e,n)&&(o=Re.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Re.compositionStart);return o?(Te&&(je||o!==Re.compositionStart?o===Re.compositionEnd&&je&&(a=ge()):(me._root=r,me._startText=ve(),je=!0)),o=ke.getPooled(o,t,n,r),a?o.data=a:null!==(a=Ne(n))&&(o.data=a),ee(o),a=o):a=null,(e=Pe?function(e,t){switch(e){case"compositionend":return Ne(t);case"keypress":return 32!==t.which?null:(Ie=!0,Se);case"textInput":return(e=t.data)===Se&&Ie?null:e;default:return null}}(e,n):function(e,t){if(je)return"compositionend"===e||!Be&&Me(e,t)?(e=ge(),me._root=null,me._startText=null,me._fallbackText=null,je=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Te?null:t.data;default:return null}}(e,n))?((t=xe.getPooled(Re.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},Fe=null,De={injectFiberControlledHostComponent:function(e){Fe=e}},Le=null,qe=null;function Ge(e){if(e=_(e)){Fe&&"function"==typeof Fe.restoreControlledState||f("194");var t=x(e.stateNode);Fe.restoreControlledState(e.stateNode,e.type,t)}}function ze(e){Le?qe?qe.push(e):qe=[e]:Le=e}function He(){return null!==Le||null!==qe}function Ke(){if(Le){var e=Le,t=qe;if(qe=Le=null,Ge(e),t)for(e=0;e<t.length;e++)Ge(t[e])}}var Ve={injection:De,enqueueStateRestore:ze,needsStateRestore:He,restoreStateIfNeeded:Ke};function Ye(e,t){return e(t)}function Qe(e,t,n){return e(t,n)}function We(){}var Xe=!1;function $e(e,t){if(Xe)return e(t);Xe=!0;try{return Ye(e,t)}finally{Xe=!1,He()&&(We(),Ke())}}var Ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Je(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ze[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,it="function"==typeof Symbol&&Symbol.for,lt=it?Symbol.for("react.element"):60103,ut=it?Symbol.for("react.portal"):60106,st=it?Symbol.for("react.fragment"):60107,ct=it?Symbol.for("react.strict_mode"):60108,dt=it?Symbol.for("react.profiler"):60114,ft=it?Symbol.for("react.provider"):60109,pt=it?Symbol.for("react.context"):60110,ht=it?Symbol.for("react.async_mode"):60111,mt=it?Symbol.for("react.forward_ref"):60112,gt=it?Symbol.for("react.timeout"):60113,vt="function"==typeof Symbol&&Symbol.iterator;function yt(e){return null===e||void 0===e?null:"function"==typeof(e=vt&&e[vt]||e["@@iterator"])?e:null}function At(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case pt:return"Context.Consumer";case st:return"ReactFragment";case ut:return"ReactPortal";case dt:return"Profiler("+e.pendingProps.id+")";case ft:return"Context.Provider";case ct:return"StrictMode";case gt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function bt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=At(e),a=null;n&&(a=At(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var Ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Et={},wt={};function kt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var xt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){xt[e]=new kt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];xt[t]=new kt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){xt[e]=new kt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){xt[e]=new kt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){xt[e]=new kt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){xt[e]=new kt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){xt[e]=new kt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){xt[e]=new kt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){xt[e]=new kt(e,5,!1,e.toLowerCase(),null)});var _t=/[\-:]([a-z])/g;function Bt(e){return e[1].toUpperCase()}function Ot(e,t,n,r){var o=xt.hasOwnProperty(t)?xt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!wt.hasOwnProperty(e)||!Et.hasOwnProperty(e)&&(Ct.test(e)?wt[e]=!0:(Et[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Pt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Tt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Nt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function St(e,t){null!=(t=t.checked)&&Ot(e,"checked",t,!1)}function Rt(e,t){St(e,t);var n=Nt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Mt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Mt(e,t.type,Nt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function It(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Mt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Nt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(_t,Bt);xt[t]=new kt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(_t,Bt);xt[t]=new kt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(_t,Bt);xt[t]=new kt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),xt.tabIndex=new kt("tabIndex",1,!1,"tabindex",null);var jt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ut(e,t,n){return(e=be.getPooled(jt.change,e,t,n)).type="change",ze(n),ee(e),e}var Ft=null,Dt=null;function Lt(e){U(e,!1)}function qt(e){if(ot(H(e)))return e}function Gt(e,t){if("change"===e)return t}var zt=!1;function Ht(){Ft&&(Ft.detachEvent("onpropertychange",Kt),Dt=Ft=null)}function Kt(e){"value"===e.propertyName&&qt(Dt)&&$e(Lt,e=Ut(Dt,e,et(e)))}function Vt(e,t,n){"focus"===e?(Ht(),Dt=n,(Ft=t).attachEvent("onpropertychange",Kt)):"blur"===e&&Ht()}function Yt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qt(Dt)}function Qt(e,t){if("click"===e)return qt(t)}function Wt(e,t){if("input"===e||"change"===e)return qt(t)}a.canUseDOM&&(zt=tt("input")&&(!document.documentMode||9<document.documentMode));var Xt={eventTypes:jt,_isInputEventSupported:zt,extractEvents:function(e,t,n,r){var o=t?H(t):window,a=void 0,i=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?a=Gt:Je(o)?zt?a=Wt:(a=Yt,i=Vt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Qt),a&&(a=a(e,t)))return Ut(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Mt(o,"number",o.value)}},$t=be.extend({view:null,detail:null}),Zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Jt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zt[e])&&!!t[e]}function en(){return Jt}var tn=$t.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:en,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?z(t):null):a=null,a===t)return null;var i=void 0,l=void 0,u=void 0,s=void 0;return"mouseout"===e||"mouseover"===e?(i=tn,l=rn.mouseLeave,u=rn.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=nn,l=rn.pointerLeave,u=rn.pointerEnter,s="pointer"),e=null==a?o:H(a),o=null==t?o:H(t),(l=i.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=i.getPooled(u,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,te(l,n,a,t),[l,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==an(e)&&f("188")}function un(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return ln(o),e;if(i===r)return ln(o),t;i=i.sibling}f("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}i||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}function sn(e){if(!(e=un(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var cn=be.extend({animationName:null,elapsedTime:null,pseudoElement:null}),dn=be.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=$t.extend({relatedTarget:null});function pn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},gn=$t.extend({key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=pn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?mn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:en,charCode:function(e){return"keypress"===e.type?pn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?pn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=tn.extend({dataTransfer:null}),yn=$t.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:en}),An=be.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),Cn=[["abort","abort"],[ue,"animationEnd"],[se,"animationIteration"],[ce,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[de,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],En={},wn={};function kn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},En[e]=t,wn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){kn(e,!0)}),Cn.forEach(function(e){kn(e,!1)});var xn={eventTypes:En,isInteractiveTopLevelEventType:function(e){return void 0!==(e=wn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===pn(n))return null;case"keydown":case"keyup":e=gn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=yn;break;case ue:case se:case ce:e=cn;break;case de:e=An;break;case"scroll":e=$t;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=dn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=be}return ee(t=e.getPooled(o,t,n,r)),t}},_n=xn.isInteractiveTopLevelEventType,Bn=[];function On(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=z(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],F(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Pn=!0;function Tn(e){Pn=!!e}function Sn(e,t){if(!t)return null;var n=(_n(e)?In:Mn).bind(null,e);t.addEventListener(e,n,!1)}function Rn(e,t){if(!t)return null;var n=(_n(e)?In:Mn).bind(null,e);t.addEventListener(e,n,!0)}function In(e,t){Qe(Mn,e,t)}function Mn(e,t){if(Pn){var n=et(t);if(null===(n=z(n))||"number"!=typeof n.tag||2===an(n)||(n=null),Bn.length){var r=Bn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{$e(On,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Bn.length&&Bn.push(e)}}}var Nn={get _enabled(){return Pn},setEnabled:Tn,isEnabled:function(){return Pn},trapBubbledEvent:Sn,trapCapturedEvent:Rn,dispatchEvent:Mn},jn={},Un=0,Fn="_reactListenersID"+(""+Math.random()).slice(2);function Dn(e){return Object.prototype.hasOwnProperty.call(e,Fn)||(e[Fn]=Un++,jn[e[Fn]]={}),jn[e[Fn]]}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function qn(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var zn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Kn=null,Vn=null,Yn=null,Qn=!1;function Wn(e,t){if(Qn||null==Kn||Kn!==u())return null;var n=Kn;return"selectionStart"in n&&Gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Yn&&s(Yn,n)?null:(Yn=n,(e=be.getPooled(Hn.select,Vn,e,t)).type="select",e.target=Kn,ee(e),e)}var Xn={eventTypes:Hn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Dn(a),o=C.onSelect;for(var i=0;i<o.length;i++){var l=o[i];if(!a.hasOwnProperty(l)||!a[l]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?H(t):window,e){case"focus":(Je(a)||"true"===a.contentEditable)&&(Kn=a,Vn=t,Yn=null);break;case"blur":Yn=Vn=Kn=null;break;case"mousedown":Qn=!0;break;case"contextmenu":case"mouseup":return Qn=!1,Wn(n,r);case"selectionchange":if(zn)break;case"keydown":case"keyup":return Wn(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=V.getFiberCurrentPropsFromNode,_=V.getInstanceFromNode,B=V.getNodeFromInstance,N.injectEventPluginsByName({SimpleEventPlugin:xn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Xt,SelectEventPlugin:Xn,BeforeInputEventPlugin:Ue});var $n="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Zn=Date,Jn=setTimeout,er=clearTimeout,tr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var nr=performance;tr=function(){return nr.now()}}else tr=function(){return Zn.now()};var rr=void 0,or=void 0;if(a.canUseDOM){var ar="function"==typeof $n?$n:function(){f("276")},ir=null,lr=null,ur=-1,sr=!1,cr=!1,dr=0,fr=33,pr=33,hr={didTimeout:!1,timeRemaining:function(){var e=dr-tr();return 0<e?e:0}},mr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{or(e),r||(sr=!0,window.postMessage(gr,"*"))}},gr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===gr&&(sr=!1,null!==ir)){if(null!==ir){var t=tr();if(!(-1===ur||ur>t)){e=-1;for(var n=[],r=ir;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(hr.didTimeout=!0,t=0,r=n.length;t<r;t++)mr(n[t],hr);ur=e}}for(e=tr();0<dr-e&&null!==ir;)e=ir,hr.didTimeout=!1,mr(e,hr),e=tr();null===ir||cr||(cr=!0,ar(vr))}},!1);var vr=function(e){cr=!1;var t=e-dr+pr;t<pr&&fr<pr?(8>t&&(t=8),pr=t<fr?fr:t):fr=t,dr=e+pr,sr||(sr=!0,window.postMessage(gr,"*"))};rr=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=tr()+t.timeout),(-1===ur||-1!==n&&n<ur)&&(ur=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ir?ir=e:null!==(t=e.prev=lr)&&(t.next=e),lr=e,cr||(cr=!0,ar(vr)),e},or=function(e){if(null!==e.prev||ir===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ir=t):null!==n?(n.next=null,lr=n):lr=ir=null}}}else{var yr=new Map;rr=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=Jn(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return yr.set(e,n),t},or=function(e){var t=yr.get(e.scheduledCallback);yr.delete(e),er(t)}}function Ar(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function br(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Cr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Er(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function kr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function xr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var _r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Br(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Or(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Br(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Pr=void 0,Tr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==_r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Pr=Pr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Pr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Sr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Rr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ir=["Webkit","ms","Moz","O"];function Mr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Rr.hasOwnProperty(o)&&Rr[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Rr).forEach(function(e){Ir.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Rr[t]=Rr[e]})});var Nr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function jr(e,t,n){t&&(Nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function Ur(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Fr=l.thatReturns("");function Dr(e,t){var n=Dn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Rn("scroll",e);break;case"focus":case"blur":Rn("focus",e),Rn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Rn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===fe.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function Lr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===_r.html&&(r=Br(e)),r===_r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function qr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Gr(e,t,n,r){var o=Ur(t,n);switch(t){case"iframe":case"object":Sn("load",e);var a=n;break;case"video":case"audio":for(a=0;a<fe.length;a++)Sn(fe[a],e);a=n;break;case"source":Sn("error",e),a=n;break;case"img":case"image":case"link":Sn("error",e),Sn("load",e),a=n;break;case"form":Sn("reset",e),Sn("submit",e),a=n;break;case"details":Sn("toggle",e),a=n;break;case"input":Tt(e,n),a=Pt(e,n),Sn("invalid",e),Dr(r,"onChange");break;case"option":a=Ar(e,n);break;case"select":Cr(e,n),a=i({},n,{value:void 0}),Sn("invalid",e),Dr(r,"onChange");break;case"textarea":wr(e,n),a=Er(e,n),Sn("invalid",e),Dr(r,"onChange");break;default:a=n}jr(t,a,Fr);var u,s=a;for(u in s)if(s.hasOwnProperty(u)){var c=s[u];"style"===u?Mr(e,c):"dangerouslySetInnerHTML"===u?null!=(c=c?c.__html:void 0)&&Tr(e,c):"children"===u?"string"==typeof c?("textarea"!==t||""!==c)&&Sr(e,c):"number"==typeof c&&Sr(e,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(b.hasOwnProperty(u)?null!=c&&Dr(r,u):null!=c&&Ot(e,u,c,o))}switch(t){case"input":rt(e),It(e,n,!1);break;case"textarea":rt(e),xr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?br(e,!!n.multiple,t,!1):null!=n.defaultValue&&br(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=l)}}function zr(e,t,n,r,o){var a=null;switch(t){case"input":n=Pt(e,n),r=Pt(e,r),a=[];break;case"option":n=Ar(e,n),r=Ar(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Er(e,n),r=Er(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=l)}jr(t,r,Fr),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(u||(u={}),u[t]=c[t])}else u||(a||(a=[]),a.push(e,u)),u=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(a=a||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=c&&Dr(o,e),a||s===c||(a=[])):(a=a||[]).push(e,c))}return u&&(a=a||[]).push("style",u),a}function Hr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&St(e,o),Ur(n,r),r=Ur(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],l=t[a+1];"style"===i?Mr(e,l):"dangerouslySetInnerHTML"===i?Tr(e,l):"children"===i?Sr(e,l):Ot(e,i,l,r)}switch(n){case"input":Rt(e,o);break;case"textarea":kr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?br(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?br(e,!!o.multiple,o.defaultValue,!0):br(e,!!o.multiple,o.multiple?[]:"",!1))}}function Kr(e,t,n,r,o){switch(t){case"iframe":case"object":Sn("load",e);break;case"video":case"audio":for(r=0;r<fe.length;r++)Sn(fe[r],e);break;case"source":Sn("error",e);break;case"img":case"image":case"link":Sn("error",e),Sn("load",e);break;case"form":Sn("reset",e),Sn("submit",e);break;case"details":Sn("toggle",e);break;case"input":Tt(e,n),Sn("invalid",e),Dr(o,"onChange");break;case"select":Cr(e,n),Sn("invalid",e),Dr(o,"onChange");break;case"textarea":wr(e,n),Sn("invalid",e),Dr(o,"onChange")}for(var a in jr(t,n,Fr),r=null,n)if(n.hasOwnProperty(a)){var i=n[a];"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):b.hasOwnProperty(a)&&null!=i&&Dr(o,a)}switch(t){case"input":rt(e),It(e,n,!0);break;case"textarea":rt(e),xr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return r}function Vr(e,t){return e.nodeValue!==t}var Yr={createElement:Lr,createTextNode:qr,setInitialProperties:Gr,diffProperties:zr,updateProperties:Hr,diffHydratedProperties:Kr,diffHydratedText:Vr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Rt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=K(r);o||f("90"),ot(r),Rt(r,o)}}}break;case"textarea":kr(e,n);break;case"select":null!=(t=n.value)&&br(e,!!n.multiple,t,!1)}}},Qr=null,Wr=null;function Xr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function $r(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Zr=tr,Jr=rr,eo=or;function to(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function no(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){ro[++oo]=e.current,e.current=t}var uo=ao(d),so=ao(!1),co=d;function fo(e){return ho(e)?co:uo.current}function po(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return 2===e.tag&&null!=e.type.childContextTypes}function mo(e){ho(e)&&(io(so),io(uo))}function go(e){io(so),io(uo)}function vo(e,t,n){uo.current!==d&&f("168"),lo(uo,t),lo(so,n)}function yo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",At(e)||"Unknown",o);return i({},t,n)}function Ao(e){if(!ho(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,co=uo.current,lo(uo,t),lo(so,so.current),!0}function bo(e,t){var n=e.stateNode;if(n||f("169"),t){var r=yo(e,co);n.__reactInternalMemoizedMergedChildContext=r,io(so),io(uo),lo(uo,r)}else io(so);lo(so,t)}function Co(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Eo(e,t,n){var r=e.alternate;return null===r?((r=new Co(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function wo(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case st:return ko(e.children,t,n,o);case ht:a=11,t|=3;break;case ct:a=11,t|=2;break;case dt:return(r=new Co(15,e,o,4|t)).type=dt,r.expirationTime=n,r;case gt:a=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case ft:a=13;break e;case pt:a=12;break e;case mt:a=14;break e;default:f("130",null==r?r:typeof r,"")}a=void 0}}return(t=new Co(a,e,o,t)).type=r,t.expirationTime=n,t}function ko(e,t,n,r){return(e=new Co(10,e,r,t)).expirationTime=n,e}function xo(e,t,n){return(e=new Co(6,e,null,t)).expirationTime=n,e}function _o(e,t,n){return(t=new Co(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bo(e,t,n){return e={current:t=new Co(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Oo=null,Po=null;function To(e){return function(t){try{return e(t)}catch(e){}}}function So(e){"function"==typeof Oo&&Oo(e)}function Ro(e){"function"==typeof Po&&Po(e)}var Io=!1;function Mo(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function No(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function jo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Uo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Fo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,a=null;null===o&&(o=e.updateQueue=Mo(e.memoizedState))}else o=e.updateQueue,a=r.updateQueue,null===o?null===a?(o=e.updateQueue=Mo(e.memoizedState),a=r.updateQueue=Mo(r.memoizedState)):o=e.updateQueue=No(a):null===a&&(a=r.updateQueue=No(o));null===a||o===a?Uo(o,t,n):null===o.lastUpdate||null===a.lastUpdate?(Uo(o,t,n),Uo(a,t,n)):(Uo(o,t,n),a.lastUpdate=t)}function Do(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Mo(e.memoizedState):Lo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Lo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=No(t)),t}function qo(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Io=!0}return r}function Go(e,t,n,r,o){if(Io=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var a=(t=Lo(e,t)).baseState,i=null,l=0,u=t.firstUpdate,s=a;null!==u;){var c=u.expirationTime;c>o?(null===i&&(i=u,a=s),(0===l||l>c)&&(l=c)):(s=qo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var d=u.expirationTime;d>o?(null===c&&(c=u,null===i&&(a=s)),(0===l||l>d)&&(l=d)):(s=qo(e,0,u,s,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=s),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,t.expirationTime=l,e.memoizedState=s}}function zo(e,t){"function"!=typeof e&&f("191",e),e.call(t)}function Ho(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,zo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,zo(t,n)),e=e.nextEffect}function Ko(e,t){return{value:e,source:t,stack:bt(t)}}var Vo=ao(null),Yo=ao(null),Qo=ao(0);function Wo(e){var t=e.type._context;lo(Qo,t._changedBits),lo(Yo,t._currentValue),lo(Vo,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Xo(e){var t=Qo.current,n=Yo.current;io(Vo),io(Yo),io(Qo),(e=e.type._context)._currentValue=n,e._changedBits=t}var $o={},Zo=ao($o),Jo=ao($o),ea=ao($o);function ta(e){return e===$o&&f("174"),e}function na(e,t){lo(ea,t),lo(Jo,e),lo(Zo,$o);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Or(null,"");break;default:t=Or(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}io(Zo),lo(Zo,t)}function ra(e){io(Zo),io(Jo),io(ea)}function oa(e){Jo.current===e&&(io(Zo),io(Jo))}function aa(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:i({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ia={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=yi(),o=jo(r=gi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Fo(e,o,r),vi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=yi(),o=jo(r=gi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Fo(e,o,r),vi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=yi(),r=jo(n=gi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Fo(e,r,n),vi(e,n)}};function la(e,t,n,r,o,a){var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!s(t,n)||!s(r,o))}function ua(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ia.enqueueReplaceState(t,t.state,null)}function sa(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,a=fo(e);r.props=o,r.state=e.memoizedState,r.refs=d,r.context=po(e,a),null!==(a=e.updateQueue)&&(Go(e,a,o,r,t),r.state=e.memoizedState),"function"==typeof(a=e.type.getDerivedStateFromProps)&&(aa(e,a,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ia.enqueueReplaceState(r,r.state,null),null!==(a=e.updateQueue)&&(Go(e,a,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var ca=Array.isArray;function da(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===d?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function fa(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function pa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Eo(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=xo(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=da(e,t,n),r.return=e,r):((r=wo(n,e.mode,r)).ref=da(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=_o(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=ko(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=xo(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case lt:return(n=wo(t,e.mode,n)).ref=da(e,null,t),n.return=e,n;case ut:return(t=_o(t,e.mode,n)).return=e,t}if(ca(t)||yt(t))return(t=ko(t,e.mode,n,null)).return=e,t;fa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case lt:return n.key===o?n.type===st?c(e,t,n.props.children,r,o):u(e,t,n,r):null;case ut:return n.key===o?s(e,t,n,r):null}if(ca(n)||yt(n))return null!==o?null:c(e,t,n,r,null);fa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case lt:return e=e.get(null===r.key?n:r.key)||null,r.type===st?c(t,e,r.props.children,o,r.key):u(t,e,r,o);case ut:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ca(r)||yt(r))return c(t,e=e.get(n)||null,r,o,null);fa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(o,e)}),s}function g(o,i,l,u){var s=yt(l);"function"!=typeof s&&f("150"),null==(l=s.call(l))&&f("151");for(var c=s=null,m=i,g=i=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var A=p(o,m,y.value,u);if(null===A){m||(m=v);break}e&&m&&null===A.alternate&&t(o,m),i=a(A,i,g),null===c?s=A:c.sibling=A,c=A,m=v}if(y.done)return n(o,m),s;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(o,y.value,u))&&(i=a(y,i,g),null===c?s=y:c.sibling=y,c=y);return s}for(m=r(o,m);!y.done;g++,y=l.next())null!==(y=h(m,o,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),i=a(y,i,g),null===c?s=y:c.sibling=y,c=y);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,a,l){var u="object"==typeof a&&null!==a&&a.type===st&&null===a.key;u&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case lt:e:{for(s=a.key,u=r;null!==u;){if(u.key===s){if(10===u.tag?a.type===st:u.type===a.type){n(e,u.sibling),(r=o(u,a.type===st?a.props.children:a.props,l)).ref=da(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===st?((r=ko(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=wo(a,e.mode,l)).ref=da(e,r,a),l.return=e,e=l)}return i(e);case ut:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=_o(a,e.mode,l)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,l)).return=e,e=r):(n(e,r),(r=xo(a,e.mode,l)).return=e,e=r),i(e);if(ca(a))return m(e,r,a,l);if(yt(a))return g(e,r,a,l);if(s&&fa(e,a),void 0===a&&!u)switch(e.tag){case 2:case 1:f("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var ha=pa(!0),ma=pa(!1),ga=null,va=null,ya=!1;function Aa(e,t){var n=new Co(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ba(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ca(e){if(ya){var t=va;if(t){var n=t;if(!ba(e,t)){if(!(t=to(n))||!ba(e,t))return e.effectTag|=2,ya=!1,void(ga=e);Aa(ga,n)}ga=e,va=no(t)}else e.effectTag|=2,ya=!1,ga=e}}function Ea(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;ga=e}function wa(e){if(e!==ga)return!1;if(!ya)return Ea(e),ya=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!$r(t,e.memoizedProps))for(t=va;t;)Aa(e,t),t=to(t);return Ea(e),va=ga?to(e.stateNode):null,!0}function ka(){va=ga=null,ya=!1}function xa(e,t,n){_a(e,t,n,t.expirationTime)}function _a(e,t,n,r){t.child=null===e?ma(t,null,n,r):ha(t,e.child,n,r)}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Oa(e,t,n,r,o){Ba(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return r&&bo(t,!1),Sa(e,t);n=t.stateNode,at.current=t;var i=a?null:n.render();return t.effectTag|=1,a&&(_a(e,t,null,o),t.child=null),_a(e,t,i,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&bo(t,!0),t.child}function Pa(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),na(e,t.containerInfo)}function Ta(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function Sa(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=Eo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Eo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ra(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Pa(t);break;case 2:Ao(t);break;case 4:na(t,t.stateNode.containerInfo);break;case 13:Wo(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,a=fo(t);return r=r(o,a=po(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&aa(t,a,o),o=Ao(t),r.updater=ia,t.stateNode=r,r._reactInternalFiber=t,sa(t,n),e=Oa(e,t,!0,o,n)):(t.tag=1,xa(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,so.current||t.memoizedProps!==n?(o=o(n,r=po(t,r=fo(t))),t.effectTag|=1,xa(e,t,o),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 2:if(o=Ao(t),null===e)if(null===t.stateNode){var i=t.pendingProps,l=t.type;r=fo(t);var u=2===t.tag&&null!=t.type.contextTypes;i=new l(i,a=u?po(t,r):d),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=ia,t.stateNode=i,i._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,u.__reactInternalMemoizedMaskedChildContext=a),sa(t,n),r=!0}else{l=t.type,r=t.stateNode,u=t.memoizedProps,a=t.pendingProps,r.props=u;var s=r.context;i=po(t,i=fo(t));var c=l.getDerivedStateFromProps;(l="function"==typeof c||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(u!==a||s!==i)&&ua(t,r,a,i),Io=!1;var p=t.memoizedState;s=r.state=p;var h=t.updateQueue;null!==h&&(Go(t,h,a,r,n),s=t.memoizedState),u!==a||p!==s||so.current||Io?("function"==typeof c&&(aa(t,c,a),s=t.memoizedState),(u=Io||la(t,u,a,p,s,i))?(l||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=s),r.props=a,r.state=s,r.context=i,r=u):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else l=t.type,r=t.stateNode,a=t.memoizedProps,u=t.pendingProps,r.props=a,s=r.context,i=po(t,i=fo(t)),(l="function"==typeof(c=l.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(a!==u||s!==i)&&ua(t,r,u,i),Io=!1,s=t.memoizedState,p=r.state=s,null!==(h=t.updateQueue)&&(Go(t,h,u,r,n),p=t.memoizedState),a!==u||s!==p||so.current||Io?("function"==typeof c&&(aa(t,c,u),p=t.memoizedState),(c=Io||la(t,a,u,s,p,i))?(l||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(u,p,i),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(u,p,i)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=u,t.memoizedState=p),r.props=u,r.state=p,r.context=i,r=c):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Oa(e,t,r,o,n);case 3:return Pa(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,Go(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(ka(),e=Sa(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(va=no(t.stateNode.containerInfo),ga=t,r=ya=!0),r?(t.effectTag|=2,t.child=ma(t,null,o,n)):(ka(),xa(e,t,o)),e=t.child)):(ka(),e=Sa(e,t)),e;case 5:return ta(ea.current),(o=ta(Zo.current))!==(r=Or(o,t.type))&&(lo(Jo,t),lo(Zo,r)),null===e&&Ca(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,so.current||u!==r||((u=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,$r(o,r)?u=null:a&&$r(o,a)&&(t.effectTag|=16),Ba(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(xa(e,t,u),t.memoizedProps=r,e=t.child)):e=Sa(e,t),e;case 6:return null===e&&Ca(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return na(t,t.stateNode.containerInfo),o=t.pendingProps,so.current||t.memoizedProps!==o?(null===e?t.child=ha(t,null,o,n):xa(e,t,o),t.memoizedProps=o,e=t.child):e=Sa(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,so.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(xa(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 10:return n=t.pendingProps,so.current||t.memoizedProps!==n?(xa(e,t,n),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 11:return n=t.pendingProps.children,so.current||null!==n&&t.memoizedProps!==n?(xa(e,t,n),t.memoizedProps=n,e=t.child):e=Sa(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Sa(e,t):(xa(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=!0;if(so.current)i=!1;else if(a===o)return t.stateNode=0,Wo(t),Sa(e,t);var l=o.value;if(t.memoizedProps=o,null===a)l=1073741823;else if(a.value===o.value){if(a.children===o.children&&i)return t.stateNode=0,Wo(t),Sa(e,t);l=0}else{var u=a.value;if(u===l&&(0!==u||1/u==1/l)||u!=u&&l!=l){if(a.children===o.children&&i)return t.stateNode=0,Wo(t),Sa(e,t);l=0}else if(l="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,l):1073741823,0==(l|=0)){if(a.children===o.children&&i)return t.stateNode=0,Wo(t),Sa(e,t)}else Ta(t,r,l,n)}return t.stateNode=l,Wo(t),xa(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,a=t.pendingProps,u=t.memoizedProps,o=r._currentValue,i=r._changedBits,so.current||0!==i||u!==a){if(t.memoizedProps=a,void 0!==(l=a.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(i&l))Ta(t,r,i,n);else if(u===a){e=Sa(e,t);break e}n=(n=a.children)(o),t.effectTag|=1,xa(e,t,n),e=t.child}else e=Sa(e,t);return e;default:f("156")}}function Ia(e){e.effectTag|=4}var Ma=void 0,Na=void 0,ja=void 0;function Ua(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return mo(t),null;case 3:ra(),go();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(wa(t),t.effectTag&=-3),Ma(t),null;case 5:oa(t),r=ta(ea.current);var o=t.type;if(null!==e&&null!=t.stateNode){var a=e.memoizedProps,i=t.stateNode,l=ta(Zo.current);i=zr(i,o,a,n,r),Na(e,t,i,o,a,n,r,l),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&f("166"),null;if(e=ta(Zo.current),wa(t))n=t.stateNode,o=t.type,a=t.memoizedProps,n[q]=t,n[G]=a,r=Kr(n,o,a,e,r),t.updateQueue=r,null!==r&&Ia(t);else{(e=Lr(o,n,r,e))[q]=t,e[G]=n;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}Gr(e,o,n,r),Xr(o,n)&&Ia(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)ja(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&f("166"),null;r=ta(ea.current),ta(Zo.current),wa(t)?(r=t.stateNode,n=t.memoizedProps,r[q]=t,Vr(r,n)&&Ia(t)):((r=qr(n,r))[q]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ra(),Ma(t),null;case 13:return Xo(t),null;case 12:return null;case 0:f("167");default:f("156")}}function Fa(e,t){var n=t.source;null===t.stack&&null!==n&&bt(n),null!==n&&At(n),t=t.value,null!==e&&2===e.tag&&At(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){hi(e,t)}else t.current=null}function La(e){switch(Ro(e),e.tag){case 2:Da(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){hi(e,t)}break;case 5:Da(e);break;case 4:za(e)}}function qa(e){return 5===e.tag||3===e.tag||4===e.tag}function Ga(e){e:{for(var t=e.return;null!==t;){if(qa(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(Sr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||qa(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,i=o.stateNode,l=n;8===a.nodeType?a.parentNode.insertBefore(i,l):a.insertBefore(i,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,i=o.stateNode,8===a.nodeType?a.parentNode.insertBefore(i,a):a.appendChild(i)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function za(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,i=a;;)if(La(i),null!==i.child&&4!==i.tag)i.child.return=i,i=i.child;else{if(i===a)break;for(;null===i.sibling;){if(null===i.return||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}o?(a=r,i=t.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:La(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Ha(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&(n[G]=r,Hr(n,a,o,e,r))}break;case 6:null===t.stateNode&&f("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:f("163")}}function Ka(e,t,n){(n=jo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$i(r),Fa(e,t)},n}function Va(e,t,n){(n=jo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===si?si=new Set([this]):si.add(this);var n=t.value,r=t.stack;Fa(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Ya(e,t,n,r,o,a){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Ko(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Do(e,r=Ka(e,r,a),a);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===si||!si.has(n)))return e.effectTag|=1024,void Do(e,r=Va(e,t,a),a)}e=e.return}while(null!==e)}function Qa(e){switch(e.tag){case 2:mo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ra(),go(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return oa(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ra(),null;case 13:return Xo(e),null;default:return null}}Ma=function(){},Na=function(e,t,n){(t.updateQueue=n)&&Ia(t)},ja=function(e,t,n,r){n!==r&&Ia(t)};var Wa=Zr(),Xa=2,$a=Wa,Za=0,Ja=0,ei=!1,ti=null,ni=null,ri=0,oi=-1,ai=!1,ii=null,li=!1,ui=!1,si=null;function ci(){if(null!==ti)for(var e=ti.return;null!==e;){var t=e;switch(t.tag){case 2:mo(t);break;case 3:ra(),go();break;case 5:oa(t);break;case 4:ra();break;case 13:Xo(t)}e=e.return}ni=null,ri=0,oi=-1,ai=!1,ti=null,ui=!1}function di(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ua(t,e);var o=e;if(1073741823===ri||1073741823!==o.expirationTime){var a=0;switch(o.tag){case 3:case 2:var i=o.updateQueue;null!==i&&(a=i.expirationTime)}for(i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ui=!0;break}e=n}else{if(null!==(e=Qa(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function fi(e){var t=Ra(e.alternate,e,ri);return null===t&&(t=di(e)),at.current=null,t}function pi(e,t,n){ei&&f("243"),ei=!0,t===ri&&e===ni&&null!==ti||(ci(),ri=t,oi=-1,ti=Eo((ni=e).current,null,ri),e.pendingCommitExpirationTime=0);var r=!1;for(ai=!n||ri<=Xa;;){try{if(n)for(;null!==ti&&!Xi();)ti=fi(ti);else for(;null!==ti;)ti=fi(ti)}catch(t){if(null===ti)r=!0,$i(t);else{null===ti&&f("271");var o=(n=ti).return;if(null===o){r=!0,$i(t);break}Ya(e,o,n,t,0,ri),ti=di(n)}}break}if(ei=!1,r)return null;if(null===ti){if(ui)return e.pendingCommitExpirationTime=t,e.current.alternate;ai&&f("262"),0<=oi&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&qi(e,t)},oi),function(e){null===_i&&f("246"),_i.remainingExpirationTime=e}(e.current.expirationTime)}return null}function hi(e,t){var n;e:{for(ei&&!li&&f("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===si||!si.has(r))){Fo(n,e=Va(n,e=Ko(t,e),1),1),vi(n,1),n=void 0;break e}break;case 3:Fo(n,e=Ka(n,e=Ko(t,e),1),1),vi(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Fo(e,n=Ka(e,n=Ko(t,e),1),1),vi(e,1)),n=void 0}return n}function mi(){var e=2+25*(1+((yi()-2+500)/25|0));return e<=Za&&(e=Za+1),Za=e}function gi(e,t){return e=0!==Ja?Ja:ei?li?1:ri:1&t.mode?Ni?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ni&&(0===Oi||e>Oi)&&(Oi=e),e}function vi(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ei&&0!==ri&&t<ri&&ci();var r=n.current.expirationTime;ei&&!li&&ni===n||qi(n,r),Fi>Ui&&f("185")}e=e.return}}function yi(){return $a=Zr()-Wa,Xa=2+($a/10|0)}function Ai(e){var t=Ja;Ja=2+25*(1+((yi()-2+500)/25|0));try{return e()}finally{Ja=t}}function bi(e,t,n,r,o){var a=Ja;Ja=1;try{return e(t,n,r,o)}finally{Ja=a}}var Ci=null,Ei=null,wi=0,ki=void 0,xi=!1,_i=null,Bi=0,Oi=0,Pi=!1,Ti=!1,Si=null,Ri=null,Ii=!1,Mi=!1,Ni=!1,ji=null,Ui=1e3,Fi=0,Di=1;function Li(e){if(0!==wi){if(e>wi)return;null!==ki&&eo(ki)}var t=Zr()-Wa;wi=e,ki=Jr(zi,{timeout:10*(e-2)-t})}function qi(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ei?(Ci=Ei=e,e.nextScheduledRoot=e):(Ei=Ei.nextScheduledRoot=e).nextScheduledRoot=Ci;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}xi||(Ii?Mi&&(_i=e,Bi=1,Qi(e,1,!1)):1===t?Hi():Li(t))}function Gi(){var e=0,t=null;if(null!==Ei)for(var n=Ei,r=Ci;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ei)&&f("244"),r===r.nextScheduledRoot){Ci=Ei=r.nextScheduledRoot=null;break}if(r===Ci)Ci=o=r.nextScheduledRoot,Ei.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ei){(Ei=n).nextScheduledRoot=Ci,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ei)break;n=r,r=r.nextScheduledRoot}}null!==(n=_i)&&n===t&&1===e?Fi++:Fi=0,_i=t,Bi=e}function zi(e){Ki(0,!0,e)}function Hi(){Ki(1,!1,null)}function Ki(e,t,n){if(Ri=n,Gi(),t)for(;null!==_i&&0!==Bi&&(0===e||e>=Bi)&&(!Pi||yi()>=Bi);)yi(),Qi(_i,Bi,!Pi),Gi();else for(;null!==_i&&0!==Bi&&(0===e||e>=Bi);)Qi(_i,Bi,!1),Gi();null!==Ri&&(wi=0,ki=null),0!==Bi&&Li(Bi),Ri=null,Pi=!1,Yi()}function Vi(e,t){xi&&f("253"),_i=e,Bi=t,Qi(e,t,!1),Hi(),Yi()}function Yi(){if(Fi=0,null!==ji){var e=ji;ji=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ti||(Ti=!0,Si=e)}}}if(Ti)throw e=Si,Si=null,Ti=!1,e}function Qi(e,t,n){xi&&f("245"),xi=!0,n?null!==(n=e.finishedWork)?Wi(e,n,t):null!==(n=pi(e,t,!0))&&(Xi()?e.finishedWork=n:Wi(e,n,t)):null!==(n=e.finishedWork)?Wi(e,n,t):null!==(n=pi(e,t,!1))&&Wi(e,n,t),xi=!1}function Wi(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===ji?ji=[r]:ji.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,li=ei=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0,yi(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Qr=Pn;var a=u();if(Gn(a)){if("selectionStart"in a)var i={start:a.selectionStart,end:a.selectionEnd};else e:{var l=window.getSelection&&window.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var s=l.anchorOffset,d=l.focusNode;l=l.focusOffset;try{i.nodeType,d.nodeType}catch(e){i=null;break e}var p=0,h=-1,m=-1,g=0,v=0,y=a,A=null;t:for(;;){for(var b;y!==i||0!==s&&3!==y.nodeType||(h=p+s),y!==d||0!==l&&3!==y.nodeType||(m=p+l),3===y.nodeType&&(p+=y.nodeValue.length),null!==(b=y.firstChild);)A=y,y=b;for(;;){if(y===a)break t;if(A===i&&++g===s&&(h=p),A===d&&++v===l&&(m=p),null!==(b=y.nextSibling))break;A=(y=A).parentNode}y=b}i=-1===h||-1===m?null:{start:h,end:m}}else i=null}i=i||{start:0,end:0}}else i=null;for(Wr={focusedElem:a,selectionRange:i},Tn(!1),ii=o;null!==ii;){a=!1,i=void 0;try{for(;null!==ii;){if(256&ii.effectTag){var C=ii.alternate;switch((s=ii).tag){case 2:if(256&s.effectTag&&null!==C){var E=C.memoizedProps,w=C.memoizedState,k=s.stateNode;k.props=s.memoizedProps,k.state=s.memoizedState;var x=k.getSnapshotBeforeUpdate(E,w);k.__reactInternalSnapshotBeforeUpdate=x}break;case 3:case 5:case 6:case 4:break;default:f("163")}}ii=ii.nextEffect}}catch(e){a=!0,i=e}a&&(null===ii&&f("178"),hi(ii,i),null!==ii&&(ii=ii.nextEffect))}for(ii=o;null!==ii;){C=!1,E=void 0;try{for(;null!==ii;){var _=ii.effectTag;if(16&_&&Sr(ii.stateNode,""),128&_){var B=ii.alternate;if(null!==B){var O=B.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&_){case 2:Ga(ii),ii.effectTag&=-3;break;case 6:Ga(ii),ii.effectTag&=-3,Ha(ii.alternate,ii);break;case 4:Ha(ii.alternate,ii);break;case 8:za(w=ii),w.return=null,w.child=null,w.alternate&&(w.alternate.child=null,w.alternate.return=null)}ii=ii.nextEffect}}catch(e){C=!0,E=e}C&&(null===ii&&f("178"),hi(ii,E),null!==ii&&(ii=ii.nextEffect))}if(O=Wr,B=u(),_=O.focusedElem,C=O.selectionRange,B!==_&&c(document.documentElement,_)){null!==C&&Gn(_)&&(B=C.start,void 0===(O=C.end)&&(O=B),"selectionStart"in _?(_.selectionStart=B,_.selectionEnd=Math.min(O,_.value.length)):window.getSelection&&(B=window.getSelection(),E=_[he()].length,O=Math.min(C.start,E),C=void 0===C.end?O:Math.min(C.end,E),!B.extend&&O>C&&(E=C,C=O,O=E),E=qn(_,O),w=qn(_,C),E&&w&&(1!==B.rangeCount||B.anchorNode!==E.node||B.anchorOffset!==E.offset||B.focusNode!==w.node||B.focusOffset!==w.offset)&&((k=document.createRange()).setStart(E.node,E.offset),B.removeAllRanges(),O>C?(B.addRange(k),B.extend(w.node,w.offset)):(k.setEnd(w.node,w.offset),B.addRange(k))))),B=[];for(O=_;O=O.parentNode;)1===O.nodeType&&B.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<B.length;_++)(O=B[_]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(Wr=null,Tn(Qr),Qr=null,n.current=t,ii=o;null!==ii;){o=!1,_=void 0;try{for(B=r;null!==ii;){var P=ii.effectTag;if(36&P){var T=ii.alternate;switch(C=B,(O=ii).tag){case 2:var S=O.stateNode;if(4&O.effectTag)if(null===T)S.props=O.memoizedProps,S.state=O.memoizedState,S.componentDidMount();else{var R=T.memoizedProps,I=T.memoizedState;S.props=O.memoizedProps,S.state=O.memoizedState,S.componentDidUpdate(R,I,S.__reactInternalSnapshotBeforeUpdate)}var M=O.updateQueue;null!==M&&(S.props=O.memoizedProps,S.state=O.memoizedState,Ho(O,M,S));break;case 3:var N=O.updateQueue;if(null!==N){if(E=null,null!==O.child)switch(O.child.tag){case 5:E=O.child.stateNode;break;case 2:E=O.child.stateNode}Ho(O,N,E)}break;case 5:var j=O.stateNode;null===T&&4&O.effectTag&&Xr(O.type,O.memoizedProps)&&j.focus();break;case 6:case 4:case 15:case 16:break;default:f("163")}}if(128&P){O=void 0;var U=ii.ref;if(null!==U){var F=ii.stateNode;switch(ii.tag){case 5:O=F;break;default:O=F}"function"==typeof U?U(O):U.current=O}}var D=ii.nextEffect;ii.nextEffect=null,ii=D}}catch(e){o=!0,_=e}o&&(null===ii&&f("178"),hi(ii,_),null!==ii&&(ii=ii.nextEffect))}ei=li=!1,So(t.stateNode),0===(t=n.current.expirationTime)&&(si=null),e.remainingExpirationTime=t}function Xi(){return!(null===Ri||Ri.timeRemaining()>Di)&&(Pi=!0)}function $i(e){null===_i&&f("246"),_i.remainingExpirationTime=0,Ti||(Ti=!0,Si=e)}function Zi(e,t){var n=Ii;Ii=!0;try{return e(t)}finally{(Ii=n)||xi||Hi()}}function Ji(e,t){if(Ii&&!Mi){Mi=!0;try{return e(t)}finally{Mi=!1}}return e(t)}function el(e,t){xi&&f("187");var n=Ii;Ii=!0;try{return bi(e,t)}finally{Ii=n,Hi()}}function tl(e,t,n){if(Ni)return e(t,n);Ii||xi||0===Oi||(Ki(Oi,!1,null),Oi=0);var r=Ni,o=Ii;Ii=Ni=!0;try{return e(t,n)}finally{Ni=r,(Ii=o)||xi||Hi()}}function nl(e){var t=Ii;Ii=!0;try{bi(e)}finally{(Ii=t)||xi||Ki(1,!1,null)}}function rl(e,t,n,r,o){var a=t.current;if(n){var i;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||f("170"),i=n;3!==i.tag;){if(ho(i)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}(i=i.return)||f("171")}i=i.stateNode.context}n=ho(n)?yo(n,i):i}else n=d;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=jo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Fo(a,o,r),vi(a,r),r}function ol(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?f("188"):f("268",Object.keys(e))),null===(e=sn(t))?null:e.stateNode}function al(e,t,n,r){var o=t.current;return rl(e,t,n,o=gi(yi(),o),r)}function il(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ll(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Oo=To(function(e){return t.onCommitFiberRoot(n,e)}),Po=To(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var ul=Zi,sl=tl,cl=function(){xi||0===Oi||(Ki(Oi,!1,null),Oi=0)};function dl(e){this._expirationTime=mi(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function fl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function pl(e,t,n){this._internalRoot=Bo(e,t,n)}function hl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ml(e,t,n,r,o){hl(n)||f("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=il(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new pl(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=il(a._internalRoot);l.call(e)}}Ji(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return il(a._internalRoot)}function gl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return hl(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ut,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}De.injectFiberControlledHostComponent(Yr),dl.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new fl;return rl(e,t,null,n,r._onCommit),r},dl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},dl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Vi(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},dl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},fl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},fl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},pl.prototype.render=function(e,t){var n=this._internalRoot,r=new fl;return null!==(t=void 0===t?null:t)&&r.then(t),al(e,n,null,r._onCommit),r},pl.prototype.unmount=function(e){var t=this._internalRoot,n=new fl;return null!==(e=void 0===e?null:e)&&n.then(e),al(null,t,null,n._onCommit),n},pl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new fl;return null!==(n=void 0===n?null:n)&&o.then(n),al(t,r,e,o._onCommit),o},pl.prototype.createBatch=function(){var e=new dl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ye=ul,Qe=sl,We=cl;var vl={createPortal:gl,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ol(e)},hydrate:function(e,t,n){return ml(null,e,t,!0,n)},render:function(e,t,n){return ml(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),ml(e,t,n,!1,r)},unmountComponentAtNode:function(e){return hl(e)||f("40"),!!e._reactRootContainer&&(Ji(function(){ml(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return gl.apply(void 0,arguments)},unstable_batchedUpdates:Zi,unstable_deferredUpdates:Ai,unstable_interactiveUpdates:tl,flushSync:el,unstable_flushControlled:nl,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:D,EventPluginRegistry:k,EventPropagators:ne,ReactControlledComponent:Ve,ReactDOMComponentTree:V,ReactDOMEventListener:Nn},unstable_createRoot:function(e,t){return new pl(e,!0,null!=t&&!0===t.hydrate)}};ll({findFiberByHostInstance:z,bundleType:0,version:"16.4.1",rendererPackageName:"react-dom"});var yl={default:vl},Al=yl&&vl||yl;e.exports=Al.default?Al.default:Al},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(83)},function(e,t,n){"use strict";var r=u(n(84)),o=u(n(1)),a=n(5),i=u(n(72)),l=u(n(22));function u(e){return e&&e.__esModule?e:{default:e}}n(32),r.default.render(o.default.createElement(a.Provider,{store:l.default},o.default.createElement(i.default,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2Zvcm1hdHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZmVlZC9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mcmllbmRzL3JlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1ZXN0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uY3NzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmNzcz8xNzc4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9Qcml2YXRlUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYWJvdXQvQWJvdXQuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Fib3V0L0Fib3V0LmNzcz9hOTM2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Fib3V0L0Fib3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZyaWVuZHMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mcmllbmRzL0ZyaWVuZHMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZyaWVuZHMvRnJpZW5kcy5jc3M/NGZmMiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mcmllbmRzL0ZyaWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mcmllbmRzL0ZyaWVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZmVlZC9GZWVkLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mZWVkL0ZlZWQuY3NzPzQyMjgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZmVlZC9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ZlZWQvRmVlZFNoYXJlYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9mZWVkL0ZlZWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9Qcm9maWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL1Byb2ZpbGUuY3NzPzJiMDQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9TaGFyZWFibGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvU2hhcmVhYmxlLmNzcz9hNDM1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvU2hhcmVhYmxlRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL1NoYXJlYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL0RheVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL0F2YWlsYWJpbGl0eUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9Db250YWN0Rm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9wcm9maWxlL1BpY3R1cmVGb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvUHJvZmlsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL0F1dGguY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvQXV0aC5jc3M/ZGQ2YSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL0NyZWRlbnRpYWxzLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL0NyZWRlbnRpYWxzLmNzcz9mNjc0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvQ3JlZGVudGlhbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9BdXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0hlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0hlYWRlci5jc3M/NmVmOCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvcHJvbWlzZS1taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvSGVhZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9BcHAuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYSIsImIiLCJlIiwiZiIsImVycm9yIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJ3YXJuaW5nIiwic3Vic2NyaXB0aW9uU2hhcGUiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJzaGFwZSIsInRyeVN1YnNjcmliZSIsImZ1bmMiLCJpc1JlcXVpcmVkIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaXNTdWJzY3JpYmVkIiwic3RvcmVTaGFwZSIsInN1YnNjcmliZSIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJjcmVhdGVQcm92aWRlciIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsInN0b3JlS2V5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic3Vic2NyaXB0aW9uS2V5IiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJfdGhpcyIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic3RvcmUiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHMiLCJnZXRDaGlsZENvbnRleHQiLCJfcmVmIiwicmVuZGVyIiwicmVhY3QiLCJvbmx5IiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJlbGVtZW50IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb21wb25lbnRzX1Byb3ZpZGVyIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwiU3Vic2NyaXB0aW9uX2NsYXNzQ2FsbENoZWNrIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJhZGROZXN0ZWRTdWIiLCJsaXN0ZW5lciIsIkJvb2xlYW4iLCJjdXJyZW50IiwibmV4dCIsImNsZWFyIiwic2xpY2UiLCJwdXNoIiwic3BsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwiaG90UmVsb2FkaW5nVmVyc2lvbiIsImR1bW15U3RhdGUiLCJub29wIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYkc2hvdWxkSGFuZGxlU3RhdCIsInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyIsIl9yZWYkc3RvcmVLZXkiLCJfcmVmJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY29ubmVjdE9wdGlvbnMiLCJvYmoiLCJrZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwidmVyc2lvbiIsImNvbnRleHRUeXBlcyIsIldyYXBwZWRDb21wb25lbnQiLCJicm93c2VyX2RlZmF1bHQiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJDb25uZWN0IiwiY29ubmVjdEFkdmFuY2VkX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdEFkdmFuY2VkX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdGF0ZSIsInJlbmRlckNvdW50IiwicHJvcHNNb2RlIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiaW5pdFNlbGVjdG9yIiwiaW5pdFN1YnNjcmlwdGlvbiIsImNvbm5lY3RBZHZhbmNlZF9pbmhlcml0cyIsIl9yZWYyIiwic3Vic2NyaXB0aW9uIiwiY29tcG9uZW50RGlkTW91bnQiLCJzZWxlY3RvciIsInJ1biIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvcmNlVXBkYXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwicmVmIiwic291cmNlU2VsZWN0b3IiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSIsInNldFN0YXRlIiwiYWRkRXh0cmFQcm9wcyIsIndpdGhFeHRyYXMiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19janNfZGVmYXVsdCIsImhhc093biIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJmcmVlU2VsZiIsIl9TeW1ib2wiLCJfZnJlZUdsb2JhbCIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJ0b1N0cmluZyIsImdldFByb3RvdHlwZU9mIiwiZnVuY1Byb3RvIiwiaXNQbGFpbk9iamVjdF9vYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsIm9wdGlvbnMiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4IiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJtZXJnZVByb3BzX2V4dGVuZHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm1lcmdlZFByb3BzIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwiaGFuZGxlTmV3U3RhdGUiLCJmaXJzdFN0YXRlIiwiZmlyc3RPd25Qcm9wcyIsImhhbmRsZUZpcnN0Q2FsbCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwic2VsZWN0b3JGYWN0b3J5X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiY29ubmVjdF9leHRlbmRzIiwibWF0Y2giLCJhcmciLCJmYWN0b3JpZXMiLCJyZXN1bHQiLCJzdHJpY3RFcXVhbCIsImNvbm5lY3RfY29ubmVjdCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiRwdXJlIiwiX3JlZjIkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMiRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMiRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMiRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJjb25uZWN0X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiYWNjb3VudCIsInR5cGUiLCJwYXlsb2FkIiwiQUNDT1VOVF9BVVRIIiwiTE9HT1VUIiwiY2hlY2tlZEF1dGgiLCJBVVRIX0NIRUNLRUQiLCJnZXRBY2NvdW50IiwiZ2V0Q2hlY2tlZEF1dGgiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJmbiIsIm1lbW8iLCJhcHBseSIsIm1lbW9pemUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsImxpc3QiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGUiLCJyZW1vdmUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsIm1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNvbmNhdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsImNoYXJBdCIsInNwbGljZU9uZSIsImsiLCJwb3AiLCJyZXNvbHZlX3BhdGhuYW1lIiwidG8iLCJmcm9tIiwidG9QYXJ0cyIsInNwbGl0IiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwibGFzdCIsInVwIiwidW5zaGlmdCIsInN1YnN0ciIsIl90eXBlb2YiLCJpdGVyYXRvciIsInZhbHVlX2VxdWFsIiwidmFsdWVFcXVhbCIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJ2YWx1ZU9mIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJzdHJpcExlYWRpbmdTbGFzaCIsImhhc0Jhc2VuYW1lIiwicHJlZml4IiwiUmVnRXhwIiwidGVzdCIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXNoIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwiZXNfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImNhblVzZURPTSIsImFkZEV2ZW50TGlzdGVuZXIiLCJub2RlIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJjb25maXJtIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfZXh0ZW5kcyIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJlc19jcmVhdGVCcm93c2VySGlzdG9yeSIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3VwcG9ydHNIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwiTWF0aCIsInJhbmRvbSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiY3JlYXRlSGFzaEhpc3RvcnlfZXh0ZW5kcyIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwic3Vic3RyaW5nIiwicmVwbGFjZUhhc2hQYXRoIiwiZXNfY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZXh0ZW5kcyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJlc19jcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIlJvdXRlcl9leHRlbmRzIiwiUm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfdGVtcCIsImNvbXB1dGVNYXRjaCIsInJvdXRlciIsInJvdXRlIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsImNvbXBvbmVudFdpbGxNb3VudCIsIl90aGlzMiIsIl9wcm9wcyIsInJlYWN0X2RlZmF1bHQiLCJDaGlsZHJlbiIsImNvdW50Iiwid2FybmluZ19kZWZhdWx0IiwiQ29tcG9uZW50IiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIkJyb3dzZXJSb3V0ZXJfaW5oZXJpdHMiLCJzdHJpbmciLCJib29sIiwibnVtYmVyIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsIm9uZU9mIiwiZXNfSGFzaFJvdXRlciIsIkxpbmtfZXh0ZW5kcyIsIkxpbmtfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJMaW5rX0xpbmsiLCJMaW5rIiwiTGlua19jbGFzc0NhbGxDaGVjayIsImhhbmRsZUNsaWNrIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsIl90aGlzJHByb3BzIiwiTGlua19pbmhlcml0cyIsImlubmVyUmVmIiwib25lT2ZUeXBlIiwiZGVmYXVsdFByb3BzIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImFycmF5IiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwicGFyZW50IiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0Iiwic3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwic2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwicGF0dGVybiIsImNhY2hlS2V5IiwiZW5kIiwiY2FjaGUiLCJjb21waWxlZFBhdHRlcm4iLCJyZSIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJtYXRjaFBhdGhfY29tcGlsZVBhdGgiLCJleGVjIiwidmFsdWVzIiwicmVkdWNlIiwiUm91dGVfZXh0ZW5kcyIsIlJvdXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZV9pc0VtcHR5Q2hpbGRyZW4iLCJSb3V0ZV9Sb3V0ZSIsIlJvdXRlIiwiUm91dGVfY2xhc3NDYWxsQ2hlY2siLCJSb3V0ZV9pbmhlcml0cyIsImNvbXB1dGVkTWF0Y2giLCJjb21wb25lbnQiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJlc19Sb3V0ZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGUiLCJOYXZMaW5rX2V4dGVuZHMiLCJOYXZMaW5rX3R5cGVvZiIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiZ2V0SXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsInJlc3QiLCJOYXZMaW5rX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXNjYXBlZFBhdGgiLCJhcmlhLWN1cnJlbnQiLCJlc19OYXZMaW5rIiwiUHJvbXB0X1Byb21wdCIsIlByb21wdCIsIlByb21wdF9jbGFzc0NhbGxDaGVjayIsIlByb21wdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUHJvbXB0X2luaGVyaXRzIiwiZW5hYmxlIiwiZGlzYWJsZSIsIndoZW4iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1Byb21wdCIsImdlbmVyYXRlUGF0aF9wYXR0ZXJuQ2FjaGUiLCJnZW5lcmF0ZVBhdGhfY2FjaGVDb3VudCIsImVzX2dlbmVyYXRlUGF0aCIsImNvbXBpbGVkR2VuZXJhdG9yIiwiY29tcGlsZSIsImdlbmVyYXRlUGF0aF9jb21waWxlR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwicHJldHR5IiwiUmVkaXJlY3RfZXh0ZW5kcyIsIlJlZGlyZWN0X1JlZGlyZWN0IiwiUmVkaXJlY3QiLCJSZWRpcmVjdF9jbGFzc0NhbGxDaGVjayIsIlJlZGlyZWN0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWRpcmVjdF9pbmhlcml0cyIsImlzU3RhdGljIiwicGVyZm9ybSIsInByZXZQcm9wcyIsInByZXZUbyIsIm5leHRUbyIsImNvbXB1dGVUbyIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZExlYWRpbmdTbGFzaCIsImFkZEJhc2VuYW1lIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjbG9uZUVsZW1lbnQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N3aXRjaCIsInJlYWN0X3JvdXRlcl9kb21fZXNfZ2VuZXJhdGVQYXRoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJDIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwid2l0aFJvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInJvdXRlQ29tcG9uZW50UHJvcHMiLCJjYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJmb3JtYXREYXRlIiwiZGF0YWJhc2VEYXRlIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImxvY2FsaXplRGF0ZSIsImRhdGVQaWNrZXJEYXRlIiwieWVhciIsIm1vbnRoIiwiZGF5IiwibG9hZFByb2ZpbGUiLCJmcmllbmRJZCIsIlBST0ZJTEVfTE9BRCIsIl9hcGkiLCJnZXRGcmllbmRQcm9maWxlIiwiZ2V0VXNlclByb2ZpbGUiLCJ0aGVuIiwic2hhcGVQcm9maWxlIiwidXBkYXRlUHJvZmlsZSIsImRhdGEiLCJQUk9GSUxFX1VQREFURSIsInB1dFByb2ZpbGUiLCJjbGVhclByb2ZpbGUiLCJwcm9maWxlIiwiZ2l2aW5nIiwicmVxdWVzdGluZyIsInVwZGF0ZVNoYXJlYWJsZSIsInNoYXJlYWJsZUlkIiwic2hhcmVhYmxlIiwic2hhcmVhYmxlVHlwZSIsImFjdGlvblR5cGUiLCJHSVZJTkdfVVBEQVRFIiwiUkVRVUVTVElOR19VUERBVEUiLCJwdXRTaGFyZWFibGUiLCJhZGRTaGFyZWFibGUiLCJHSVZJTkdfQUREIiwiUkVRVUVTVElOR19BREQiLCJwb3N0U2hhcmVhYmxlIiwicmVtb3ZlU2hhcmVhYmxlIiwiR0lWSU5HX1JFTU9WRSIsIlJFUVVFU1RJTkdfUkVNT1ZFIiwiZGVsZXRlU2hhcmVhYmxlIiwiX2lkIiwiX3JlZHVjZXJzIiwicmVzcG9uc2UiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInBpY3R1cmVVcmwiLCJjb250YWN0IiwiYXZhaWxhYmlsaXR5Iiwic2hhcmVhYmxlcyIsInNoYXJlYWJsZXNNYXBzIiwibWFwcyIsImxvYWRpbmciLCJMT0FEX1NUQVJUIiwiTE9BRF9FTkQiLCJFUlJPUiIsIkVSUk9SX0NMRUFSIiwiZ2V0TG9hZGluZyIsImdldEVycm9yIiwiX3JlcXVlc3QiLCJQUk9GSUxFX1VSTCIsInB1dCIsImdldEZyaWVuZHMiLCJwdXRGcmllbmRzIiwiZW1haWwiLCJwdXRGcmllbmRzQWNjZXB0IiwiZGVsZXRlRnJpZW5kIiwiZGVsIiwicG9zdCIsImdldEZlZWQiLCJwb3N0U2lnbmluIiwiY3JlZGVudGlhbHMiLCJwb3N0U2lnbnVwIiwiZ2V0QWNjb3VudFZlcmlmaWVkIiwidG9rZW4iLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsInN0ciIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJvZmZzZXQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwib3B0cyIsImVuY29kZSIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJmZWVkIiwiRkVFRF9MT0FEIiwiZnJpZW5kcyIsIkZSSUVORFNfTE9BRCIsImZyaWVuZFJlcXVlc3QiLCJGUklFTkRfUkVRVUVTVCIsInBlbmRpbmdGcmllbmRSZXF1ZXN0IiwiUEVORElOR19GUklFTkRfUkVRVUVTVCIsInJlbW92ZUZyaWVuZCIsIkRFTEVURV9GUklFTkQiLCJnZXRGcmllbmRSZXF1ZXN0IiwiZ2V0R2l2aW5nIiwiZ2V0UHJvZmlsZSIsImdldFJlcXVlc3RpbmciLCJnZXRHaXZpbmdBcnJheSIsImdldFJlcXVlc3RpbmdBcnJheSIsIm1ha2VTaGFyZWFibGVSZWR1Y2VyIiwiYWRkQWN0aW9uVHlwZSIsInVwZGF0ZUFjdGlvblR5cGUiLCJyZW1vdmVBY3Rpb25UeXBlIiwiW29iamVjdCBPYmplY3RdIiwiY29weSIsIm1ha2VBdXRoIiwiYXBpIiwiYXV0aENoZWNrZWQiLCJzaWdudXAiLCJzaWduaW4iLCJsb2dvdXQiLCJjbGVhclN0b3JlZEFjY291bnQiLCJhdHRlbXB0QWNjb3VudExvYWQiLCJnZXRTdG9yZWRBY2NvdW50IiwiY2F0Y2giLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiaXNQbGFpbk9iamVjdCIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiU3RyaW5nIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZ2xvYmFsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9yZWR1eCIsIl9yZWR1Y2VyczIiLCJfcmVkdWNlcnMzIiwiX3JlZHVjZXJzNCIsIl9yZWR1Y2VyczUiLCJyb290UmVkdWNlciIsImNvbXBvc2VFbmhhbmNlcnMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJ0aHVuayIsInByb21pc2VNaWRkbGV3YXJlIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsImxhdGVzdFRva2VuIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJqc29uIiwiZ2V0SXRlbSIsImVyciIsInJlcXVlc3QiLCJib2R5IiwiZmV0Y2giLCJlcnJvcnMiLCJjb250ZW50LXR5cGUiLCJtZXRob2QiLCJnIiwiZXZhbCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidmFsIiwidG9PYmplY3QiLCJ2YWxpZGF0ZUZvcm1hdCIsImZyZWVHbG9iYWwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwibmFtZXMiLCJtYXBwaW5ncyIsImZpbGUiLCJzb3VyY2VzQ29udGVudCIsImhtciIsImxvY2FscyIsIl9yZWFjdFJlZHV4IiwiX3JlYWN0Um91dGVyRG9tIiwiUHJpdmF0ZVJvdXRlIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJQcm9wVHlwZXMiLCJjb25uZWN0IiwiYWJvdXQiLCJfcmVhY3QiLCJQdXJlQ29tcG9uZW50IiwibG9hZEZyaWVuZHMiLCJzZW5kRnJpZW5kUmVxdWVzdCIsImFjY2VwdEZyaWVuZFJlcXVlc3QiLCJGcmllbmQiLCJpbWFnZVVybCIsInNyYyIsImFsdCIsImFueSIsIl9hY3Rpb25zIiwiRnJpZW5kcyIsInN1cGVyIiwiYWRkRnJpZW5kRm9ybSIsImZyaWVuZE1lc3NhZ2UiLCJoYW5kbGVDaGFuZ2UiLCJoYW5kbGVTdWJtaXQiLCJoYW5kbGVBY2NlcHRGcmllbmQiLCJoYW5kbGVSZW1vdmVGcmllbmQiLCJvblN1Ym1pdCIsImh0bWxGb3IiLCJvbkNoYW5nZSIsInJlcXVpcmVkIiwiZnJpZW5kIiwiX0ZyaWVuZDIiLCJsb2FkRmVlZCIsIl9mb3JtYXR0ZXJzIiwiRmVlZFNoYXJlYWJsZSIsImRhdGUiLCJvd25lciIsIm93bmVySWQiLCJGZWVkIiwiX0ZlZWRTaGFyZWFibGUyIiwiU2hhcmVhYmxlRm9ybSIsInByaW9yaXR5Iiwib25Db21wbGV0ZSIsImNoZWNrZWQiLCJTaGFyZWFibGUiLCJlZGl0aW5nIiwiaGFuZGxlRm9ybVRvZ2dsZSIsInByZXZTdGF0ZSIsImhlYWRpbmciLCJpc1VzZXIiLCJfU2hhcmVhYmxlRm9ybTIiLCJEYXlQaWNrZXIiLCJoYW5kbGVDaGVja2JveENoYW5nZSIsImRheXMiLCJkYXlOYW1lcyIsIkZyYWdtZW50IiwiQXZhaWxhYmlsaXR5Rm9ybSIsInN1bmRheSIsIm1vbmRheSIsInR1ZXNkYXkiLCJ3ZWRuZXNkYXkiLCJ0aHVyc2RheSIsImZyaWRheSIsInNhdHVyZGF5Iiwibm90ZXMiLCJjaGVja2VkRGF5cyIsIm9uRG9uZSIsIl9EYXlQaWNrZXIyIiwiQ29udGFjdEZvcm0iLCJQaWN0dXJlRm9ybSIsIlByb2ZpbGUiLCJlZGl0aW5nUGljdHVyZSIsImVkaXRpbmdDb250YWN0IiwiZWRpdGluZ0F2YWlsYWJpbGl0eSIsImhhbmRsZVByb2ZpbGVMb2FkIiwiYmFja2dyb3VuZCIsIl9QaWN0dXJlRm9ybTIiLCJfQ29udGFjdEZvcm0yIiwiX0F2YWlsYWJpbGl0eUZvcm0yIiwiX1NoYXJlYWJsZTIiLCJhdXRoIiwiQ3JlZGVudGlhbHMiLCJwYXNzd29yZCIsInN1Ym1pdENyZWRlbnRpYWxzIiwiaW5jbHVkZU5hbWUiLCJjbGVhckVycm9yIiwiX2FjdGlvbnMyIiwiQXV0aCIsInJlZGlyZWN0IiwiTmF2TGluayIsIl9DcmVkZW50aWFsczIiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJoZWFkZXIiLCJpc1Byb21pc2UiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50Iiwid2l0aEV4dHJhQXJndW1lbnQiLCJIZWFkZXIiLCJhcnIiLCJBcHAiLCJfUHJpdmF0ZVJvdXRlMiIsIl9Qcm9maWxlMiIsIkFib3V0Iiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiY2hlY2tQcm9wVHlwZXMiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwicSIsImZvciIsInUiLCJ2IiwidyIsInoiLCJBIiwiQiIsIkQiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsIksiLCJMIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiaCIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsImtleVByZWZpeCIsIlIiLCJTIiwiVCIsImRvbmUiLCI9IiwiOiIsImVzY2FwZSIsIlUiLCJWIiwiVyIsIlgiLCJ0b0FycmF5IiwiY3JlYXRlUmVmIiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9kZWZhdWx0VmFsdWUiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfY2hhbmdlZEJpdHMiLCJfY2hhbmdlZEJpdHMyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjcmVhdGVGYWN0b3J5IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiYWEiLCJiYSIsImRhIiwiZWEiLCJmYSIsImhhIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInZhIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwid2EiLCJ4YSIsInlhIiwiemEiLCJjdXJyZW50VGFyZ2V0IiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJFYSIsIkZhIiwiR2EiLCJIYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiSWEiLCJKYSIsIkthIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkxhIiwiTWEiLCJOYSIsInRhZyIsIk9hIiwiUGEiLCJRYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwicmV0dXJuIiwiUmEiLCJTYSIsImRpc3BhdGNoQ29uZmlnIiwiVGEiLCJfdGFyZ2V0SW5zdCIsIlVhIiwiVmEiLCJYYSIsIllhIiwiWmEiLCJhbHRlcm5hdGUiLCIkYSIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwiYWIiLCJ0b0xvd2VyQ2FzZSIsImJiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiY2IiLCJkYiIsImViIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwiZG9jdW1lbnRFbGVtZW50IiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkNiIiwiRGIiLCJrZXlDb2RlIiwiRWIiLCJkZXRhaWwiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImNoYXIiLCJIYiIsIkpiIiwiS2IiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiTGIiLCJNYiIsIk5iIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJjb2xvciIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsIlliIiwiWmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCIkYiIsImFjIiwiY2MiLCJfdmFsdWVUcmFja2VyIiwic2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nUHJvcHMiLCJ2YyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwid2MiLCJ4YyIsInpjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkRjIiwiRWMiLCJGYyIsIkJjIiwiaXNOYU4iLCJDYyIsIkFjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJHYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiSGMiLCJJYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJKYyIsIktjIiwiTGMiLCJNYyIsInRhYkluZGV4IiwiTmMiLCJjaGFuZ2UiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsImJkIiwidmlldyIsImNkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsImRkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImVkIiwiZmQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJnZCIsInBvaW50ZXJJZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJoZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwicGFyZW50V2luZG93IiwiamQiLCJlZmZlY3RUYWciLCJrZCIsImxkIiwic2libGluZyIsIm1kIiwib2QiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwicGQiLCJjbGlwYm9hcmREYXRhIiwicWQiLCJyZCIsImNoYXJDb2RlIiwic2QiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidGQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwidWQiLCJsb2NhbGUiLCJ2ZCIsImRhdGFUcmFuc2ZlciIsIndkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInhkIiwieWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInpkIiwiQWQiLCJCZCIsIkNkIiwiaXNJbnRlcmFjdGl2ZSIsIkRkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiRWQiLCJGZCIsIkdkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJIZCIsIklkIiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwidGV4dENvbnRlbnQiLCJVZCIsImNvbnRlbnRFZGl0YWJsZSIsIlZkIiwiV2QiLCJzZWxlY3QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImJlIiwib25TZWxlY3QiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiY2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkZSIsImVlIiwic2V0VGltZW91dCIsImZlIiwiY2xlYXJUaW1lb3V0IiwiZ2UiLCJwZXJmb3JtYW5jZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwic2UiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsInVlIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJwb3N0TWVzc2FnZSIsInRlIiwidGltZW91dFRpbWUiLCJ2ZSIsInRpbWVvdXQiLCJwcmV2Iiwid2UiLCJNYXAiLCJJbmZpbml0eSIsImRlbGV0ZSIsInllIiwieGUiLCJ6ZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiQWUiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIkdlIiwiSGUiLCJJZSIsIkplIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIktlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiTGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJNZSIsIk5lIiwic2V0UHJvcGVydHkiLCJPZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJQZSIsIlFlIiwiUmUiLCJTZSIsImJsdXIiLCJmb2N1cyIsIlRlIiwiY3JlYXRlRWxlbWVudE5TIiwiVWUiLCJWZSIsIl9faHRtbCIsIm9uY2xpY2siLCJXZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImFmIiwiYmYiLCJjZiIsImF1dG9Gb2N1cyIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJqZiIsIlNldCIsImtmIiwibGYiLCJtZiIsIm5mIiwib2YiLCJwZiIsInFmIiwicmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ4ZiIsInlmIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIkVmIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFBpbmdlZFRpbWUiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJmaW5pc2hlZFdvcmsiLCJwZW5kaW5nQ29udGV4dCIsImh5ZHJhdGUiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImZpcnN0QmF0Y2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkZmIiwiR2YiLCJIZiIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiVmYiLCJXZiIsIlhmIiwic3RhY2siLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImlnIiwidGFnTmFtZSIsImpnIiwia2ciLCJsZyIsInBnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIm1nIiwibmciLCJvZyIsInFnIiwicmciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInNnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwidGciLCJ1ZyIsIl9zdHJpbmdSZWYiLCJ2ZyIsIndnIiwibmMiLCJKZCIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiUmciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJoaWRkZW4iLCJRZyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsInN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmciLCJjb25zb2xlIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJjb21wb25lbnREaWRDYXRjaCIsImhoIiwiYWRkIiwiY29tcG9uZW50U3RhY2siLCJpaCIsImhhcyIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJfb25Db21wbGV0ZSIsImFpIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwicmFuZ2VDb3VudCIsIldhIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImphIiwibWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiaGciLCJvYyIsImNhIiwid2kiLCJ4aSIsIk5nIiwiT2ciLCJ5aSIsInljIiwiUGciLCJ6aSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJJZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibGkiLCJvaSIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInBpIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInFpIiwiX2ludGVybmFsUm9vdCIsInJpIiwidGkiLCJfcmVhY3RSb290Q29udGFpbmVyIiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwic2kiLCJ1aSIsIm5pIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwidmkiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkFpIiwiQmkiLCJjaGVja0RDRSIsIlJlYWN0RE9NIiwiX0FwcDIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFB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R0FBQWp5RCxXQUFBLEVBQzVnQm5PLFlBQVcrZ0Usd0JBQUFoRCxHQUFBaUQseUJBQUFwRyxHQUFBcUcsNEJBQUEvQyxHQUFBZ0QsVUFBQWpELEdBQUFrRCx5QkFBQWhELEdBQUFsMUIsb0RBQW9MbTRCLGVBQUFwMEIsRUFBQXEwQixvQkFBQW4yQixFQUFBbzJCLGlCQUFBeHlCLEdBQUF5eUIseUJBQUFodEIsR0FBQWl0QixzQkFBQTd6QixFQUFBOHpCLHNCQUFBcGUsSUFBMklxZSxvQkFBQSxTQUFBdGpFLEVBQUFDLEdBQW1DLFdBQUF1aEUsR0FBQXhoRSxHQUFBLFFBQUFDLElBQUEsSUFBQUEsRUFBQWkwRCxXQUE4Q2tNLElBQUlDLHdCQUFBbHhCLEVBQUFvMEIsV0FBQSxFQUFBMThELFFBQUEsU0FBQTI4RCxvQkFBQSxjQUMvWixJQUFBQyxJQUFRM2xDLFFBQUF1a0MsSUFBV3FCLEdBQUFELElBQUFwQixJQUFBb0IsR0FBZTVsRSxFQUFBRCxRQUFBOGxFLEdBQUE1bEMsUUFBQTRsQyxHQUFBNWxDLFFBQUE0bEMsa0NDN09sQyxTQUFBQyxJQUVBLEdBQ0Esb0JBQUFyRCxnQ0FDQSxtQkFBQUEsK0JBQUFxRCxTQWNBLElBRUFyRCwrQkFBQXFELFlBQ0csTUFBQXZvQyxHQUdIMCtCLFFBQUExNUQsTUFBQWc3QixJQU9BdW9DLEdBQ0E5bEUsRUFBQUQsUUFBQUYsRUFBQSxrQ0NsQ0EsUUFBQUEsRUFBQSxTQUNBQSxFQUFBLElBQ0FnZ0MsRUFBQWhnQyxFQUFBLE9BQ0FBLEVBQUEsU0FDQUEsRUFBQSx3REFDQUEsRUFBQSxJQUdBa21FLFVBQVNyZ0UsT0FDUHM2QixFQUFBQyxRQUFBL3FCLGNBQUMycUIsRUFBQTM3QixVQUFTYSxNQUFPQSxXQUNmaTdCLEVBQUFDLFFBQUEvcUIsY0FBQzh3RCxFQUFBL2xDLFFBQUQsT0FFRjV0QixTQUFTNHpELGVBQWUiLCJmaWxlIjoiYnVuZGxlLjBkNzk5YWUxOTZmOGEzMmZmMmQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDg1KTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgd2FybmluZ1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gdHJ1ZTtcblxuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXg7XG5cbiAgdmFyIHN0b3JlS2V5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnc3RvcmUnO1xuICB2YXIgc3ViS2V5ID0gYXJndW1lbnRzWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdWJLZXkgfHwgc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvdmlkZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQcm92aWRlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcblxuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWJzY3JpcHRpb24pO1xuXG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSA9IG9uU3RhdGVDaGFuZ2U7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICB9XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG5cbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgc3RvcmVTaGFwZSwgc3Vic2NyaXB0aW9uU2hhcGUgfSBmcm9tICcuLi91dGlscy9Qcm9wVHlwZXMnO1xuXG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnkpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJGdldERpc3BsYXlOYW1lID0gX3JlZi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZiRnZXREaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gJ0Nvbm5lY3RBZHZhbmNlZCgnICsgbmFtZSArICcpJztcbiAgfSA6IF9yZWYkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmJG1ldGhvZE5hbWUgPSBfcmVmLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZiRtZXRob2ROYW1lID09PSB1bmRlZmluZWQgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYkcmVuZGVyQ291bnRQcm9wID0gX3JlZi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmJHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3JlZiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmJHNob3VsZEhhbmRsZVN0YXQgPSBfcmVmLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYkc2hvdWxkSGFuZGxlU3RhdCxcbiAgICAgIF9yZWYkc3RvcmVLZXkgPSBfcmVmLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmJHN0b3JlS2V5ID09PSB1bmRlZmluZWQgPyAnc3RvcmUnIDogX3JlZiRzdG9yZUtleSxcbiAgICAgIF9yZWYkd2l0aFJlZiA9IF9yZWYud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydnZXREaXNwbGF5TmFtZScsICdtZXRob2ROYW1lJywgJ3JlbmRlckNvdW50UHJvcCcsICdzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMnLCAnc3RvcmVLZXknLCAnd2l0aFJlZiddKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG5cbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaW52YXJpYW50KHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09ICdmdW5jdGlvbicsICdZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSAnICsgKG1ldGhvZE5hbWUgKyAnLiBJbnN0ZWFkIHJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShXcmFwcGVkQ29tcG9uZW50KSkpO1xuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzKENvbm5lY3QsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBDb25uZWN0KHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfdGhpcyk7XG5cbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCInICsgc3RvcmVLZXkgKyAnXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yIHByb3BzIG9mICcgKyAoJ1wiJyArIGRpc3BsYXlOYW1lICsgJ1wiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCAnKSArICgnb3IgZXhwbGljaXRseSBwYXNzIFwiJyArIHN0b3JlS2V5ICsgJ1wiIGFzIGEgcHJvcCB0byBcIicgKyBkaXNwbGF5TmFtZSArICdcIi4nKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfcmVmMjtcblxuICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCByZWNlaXZlZCBzdG9yZSBmcm9tIHByb3BzLCBpdHMgc3Vic2NyaXB0aW9uIHNob3VsZCBiZSB0cmFuc3BhcmVudFxuICAgICAgICAvLyB0byBhbnkgZGVzY2VuZGFudHMgcmVjZWl2aW5nIHN0b3JlK3N1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQ7IGl0IHBhc3NlcyBhbG9uZ1xuICAgICAgICAvLyBzdWJzY3JpcHRpb24gcGFzc2VkIHRvIGl0LiBPdGhlcndpc2UsIGl0IHNoYWRvd3MgdGhlIHBhcmVudCBzdWJzY3JpcHRpb24sIHdoaWNoIGFsbG93c1xuICAgICAgICAvLyBDb25uZWN0IHRvIGNvbnRyb2wgb3JkZXJpbmcgb2Ygbm90aWZpY2F0aW9ucyB0byBmbG93IHRvcC1kb3duLlxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5wcm9wc01vZGUgPyBudWxsIDogdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBfcmVmMiA9IHt9LCBfcmVmMltzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uIHx8IHRoaXMuY29udGV4dFtzdWJzY3JpcHRpb25LZXldLCBfcmVmMjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47XG5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgKCd7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgJyArIG1ldGhvZE5hbWUgKyAnKCkgY2FsbC4nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIHNldFdyYXBwZWRJbnN0YW5jZShyZWYpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkSW5zdGFuY2UgPSByZWY7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBwYXJlbnRTdWIncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyAgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAvLyBgY29tcG9uZW50RGlkVXBkYXRlYCBpcyBjb25kaXRpb25hbGx5IGltcGxlbWVudGVkIHdoZW4gYG9uU3RhdGVDaGFuZ2VgIGRldGVybWluZXMgaXRcbiAgICAgICAgLy8gbmVlZHMgdG8gbm90aWZ5IG5lc3RlZCBzdWJzLiBPbmNlIGNhbGxlZCwgaXQgdW5pbXBsZW1lbnRzIGl0c2VsZiB1bnRpbCBmdXJ0aGVyIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZXMgb2NjdXIuIERvaW5nIGl0IHRoaXMgd2F5IHZzIGhhdmluZyBhIHBlcm1hbmVudCBgY29tcG9uZW50RGlkVXBkYXRlYCB0aGF0IGRvZXNcbiAgICAgICAgLy8gYSBib29sZWFuIGNoZWNrIGV2ZXJ5IHRpbWUgYXZvaWRzIGFuIGV4dHJhIG1ldGhvZCBjYWxsIG1vc3Qgb2YgdGhlIHRpbWUsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBzb21lIHBlcmYgYm9vc3QuXG4gICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wcztcbiAgICAgICAgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgICAgICAgaWYgKHdpdGhSZWYpIHdpdGhFeHRyYXMucmVmID0gdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2U7XG4gICAgICAgIGlmIChyZW5kZXJDb3VudFByb3ApIHdpdGhFeHRyYXNbcmVuZGVyQ291bnRQcm9wXSA9IHRoaXMucmVuZGVyQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSB3aXRoRXh0cmFzW3N1YnNjcmlwdGlvbktleV0gPSB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIHdpdGhFeHRyYXM7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICBDb25uZWN0LmNoaWxkQ29udGV4dFR5cGVzID0gY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSBjb250ZXh0VHlwZXM7XG4gICAgQ29ubmVjdC5wcm9wVHlwZXMgPSBjb250ZXh0VHlwZXM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIC8vIFdlIGFyZSBob3QgcmVsb2FkaW5nIVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICB0aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgICAgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn1cblxuLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vLyBcbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59XG5cbi8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07XG5cbiAgICAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuXG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4geyBkaXNwYXRjaDogZGlzcGF0Y2ggfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuXG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuXG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGUgPSB2b2lkIDA7XG4gIHZhciBvd25Qcm9wcyA9IHZvaWQgMDtcbiAgdmFyIHN0YXRlUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBkaXNwYXRjaFByb3BzID0gdm9pZCAwO1xuICB2YXIgbWVyZ2VkUHJvcHMgPSB2b2lkIDA7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG5cbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuXG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG5cbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufVxuXG4vLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ2luaXRNYXBTdGF0ZVRvUHJvcHMnLCAnaW5pdE1hcERpc3BhdGNoVG9Qcm9wcycsICdpbml0TWVyZ2VQcm9wcyddKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuXG4vKlxuICBjb25uZWN0IGlzIGEgZmFjYWRlIG92ZXIgY29ubmVjdEFkdmFuY2VkLiBJdCB0dXJucyBpdHMgYXJncyBpbnRvIGEgY29tcGF0aWJsZVxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxuXG4gICAgKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpID0+IG5leHRGaW5hbFByb3BzXG4gIFxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xuICBzZWxlY3RvckZhY3RvcnkgZWFjaCB0aW1lIGEgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2UgaXMgaW5zdGFudGlhdGVkIG9yIGhvdCByZWxvYWRlZC5cblxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgbWVyZ2VQcm9wcyxcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cblxuICBUaGUgcmVzdWx0aW5nIGZpbmFsIHByb3BzIHNlbGVjdG9yIGlzIGNhbGxlZCBieSB0aGUgQ29ubmVjdCBjb21wb25lbnQgaW5zdGFuY2Ugd2hlbmV2ZXJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgb2YgdHlwZSAnICsgdHlwZW9mIGFyZyArICcgZm9yICcgKyBuYW1lICsgJyBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50ICcgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgJy4nKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdCgpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdW5kZWZpbmVkID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxuICAgICAgICBfcmVmMiRwdXJlID0gX3JlZjIucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYyJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfcmVmMiRwdXJlLFxuICAgICAgICBfcmVmMiRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYyJGFyZVN0YXRlc0VxdWFsID09PSB1bmRlZmluZWQgPyBzdHJpY3RFcXVhbCA6IF9yZWYyJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjIkYXJlT3duUHJvcHNFcXVhID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYyLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVQcm9wc0VxID09PSB1bmRlZmluZWQgPyBzaGFsbG93RXF1YWwgOiBfcmVmMiRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYyLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMiRhcmVNZXJnZWRQcm9wc0UgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbJ3B1cmUnLCAnYXJlU3RhdGVzRXF1YWwnLCAnYXJlT3duUHJvcHNFcXVhbCcsICdhcmVTdGF0ZVByb3BzRXF1YWwnLCAnYXJlTWVyZ2VkUHJvcHNFcXVhbCddKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcblxuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gJ0Nvbm5lY3QoJyArIG5hbWUgKyAnKSc7XG4gICAgICB9LFxuXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcblxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG5cbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29ubmVjdCgpOyIsImV4cG9ydCBjb25zdCBBQ0NPVU5UX0FVVEggPSAnQUNDT1VOVF9BVVRIJztcbmV4cG9ydCBjb25zdCBBVVRIX0NIRUNLRUQgPSAnQVVUSF9DSEVDS0VEJztcbmV4cG9ydCBjb25zdCBMT0dPVVQgPSAnTE9HT1VUJztcblxuZXhwb3J0IGNvbnN0IGdldEFjY291bnQgPSBzdGF0ZSA9PiBzdGF0ZS5hY2NvdW50O1xuZXhwb3J0IGNvbnN0IGdldENoZWNrZWRBdXRoID0gc3RhdGUgPT4gc3RhdGUuY2hlY2tlZEF1dGg7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2NvdW50KHN0YXRlID0gbnVsbCwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIEFDQ09VTlRfQVVUSDpcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIGNhc2UgTE9HT1VUOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tlZEF1dGgoc3RhdGUgPSBmYWxzZSwgeyB0eXBlIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIEFVVEhfQ0hFQ0tFRDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgXCJBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnRcIik7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAocGF0dGVybiwga2V5cywgb3B0aW9ucyk7XG4gIHZhciBjb21waWxlZFBhdHRlcm4gPSB7IHJlOiByZSwga2V5czoga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRQYXR0ZXJuO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFBhdHRlcm47XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aCBwYXR0ZXJuLlxuICovXG52YXIgbWF0Y2hQYXRoID0gZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50c1syXTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuXG5cbiAgaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuIHBhcmVudDtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1Byb21wdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9SZWRpcmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgICBleGFjdCA9IF9lbGVtZW50JHByb3BzLmV4YWN0LFxuICAgICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgICAgZnJvbSA9IF9lbGVtZW50JHByb3BzLmZyb207XG5cbiAgICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgZXhhY3Q6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSwgcm91dGUubWF0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N3aXRjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSBcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywge1xuICAgICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgd2l0aFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJleHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIGAke3N0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3N0cmluZy5zbGljZSgxKX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRhYmFzZURhdGUpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGFiYXNlRGF0ZSk7XG4gIHJldHVybiBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxpemVEYXRlKGRhdGVQaWNrZXJEYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBkYXRlUGlja2VyRGF0ZS5zdWJzdHIoMCwgNCk7XG4gIGNvbnN0IG1vbnRoID0gZGF0ZVBpY2tlckRhdGUuc3Vic3RyKDUsIDIpIC0gMTtcbiAgY29uc3QgZGF5ID0gZGF0ZVBpY2tlckRhdGUuc3Vic3RyKDgsIDIpO1xuICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSk7XG59IiwiaW1wb3J0IHsgZ2V0VXNlclByb2ZpbGUsIHB1dFByb2ZpbGUsIHBvc3RTaGFyZWFibGUsIHB1dFNoYXJlYWJsZSwgZGVsZXRlU2hhcmVhYmxlLCBnZXRGcmllbmRQcm9maWxlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBpJztcblxuaW1wb3J0IHtcbiAgUFJPRklMRV9MT0FELFxuICBQUk9GSUxFX1VQREFURSxcbiAgR0lWSU5HX0FERCxcbiAgUkVRVUVTVElOR19BREQsXG4gIEdJVklOR19VUERBVEUsXG4gIFJFUVVFU1RJTkdfVVBEQVRFLFxuICBHSVZJTkdfUkVNT1ZFLFxuICBSRVFVRVNUSU5HX1JFTU9WRVxufSBmcm9tICcuL3JlZHVjZXJzJztcblxuZnVuY3Rpb24gc2hhcGVQcm9maWxlKHJlc3BvbnNlKSB7XG4gIGNvbnN0IHsgX2lkLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBwaWN0dXJlVXJsLCBjb250YWN0LCBhdmFpbGFiaWxpdHksIHNoYXJlYWJsZXMgfSA9IHJlc3BvbnNlO1xuICAgICAgXG4gIGNvbnN0IHNoYXJlYWJsZXNNYXBzID0gc2hhcmVhYmxlcy5yZWR1Y2UoKG1hcHMsIGl0ZW0pID0+IHtcbiAgICBpZihpdGVtLnR5cGUgPT09ICdnaXZpbmcnKSBtYXBzLmdpdmluZ1tpdGVtLl9pZF0gPSBpdGVtO1xuICAgIGlmKGl0ZW0udHlwZSA9PT0gJ3JlcXVlc3RpbmcnKSBtYXBzLnJlcXVlc3RpbmdbaXRlbS5faWRdID0gaXRlbTtcbiAgICByZXR1cm4gbWFwcztcbiAgfSwgeyBnaXZpbmc6IHt9LCByZXF1ZXN0aW5nOiB7fSB9KTtcblxuICBjb25zdCB7IGdpdmluZywgcmVxdWVzdGluZyB9ID0gc2hhcmVhYmxlc01hcHM7XG4gIHJldHVybiB7XG4gICAgcHJvZmlsZToge1xuICAgICAgX2lkLFxuICAgICAgZmlyc3ROYW1lLFxuICAgICAgbGFzdE5hbWUsXG4gICAgICBwaWN0dXJlVXJsLFxuICAgICAgY29udGFjdCxcbiAgICAgIGF2YWlsYWJpbGl0eVxuICAgIH0sXG4gICAgZ2l2aW5nLFxuICAgIHJlcXVlc3RpbmdcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRQcm9maWxlKGZyaWVuZElkKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogUFJPRklMRV9MT0FELFxuICAgIHBheWxvYWQ6IChmcmllbmRJZCA/IGdldEZyaWVuZFByb2ZpbGUoZnJpZW5kSWQpIDogZ2V0VXNlclByb2ZpbGUoKSkudGhlbihzaGFwZVByb2ZpbGUpXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQcm9maWxlKGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBQUk9GSUxFX1VQREFURSxcbiAgICBwYXlsb2FkOiBwdXRQcm9maWxlKGRhdGEpLnRoZW4oKCkgPT4gZGF0YSlcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUHJvZmlsZSgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBQUk9GSUxFX0xPQUQsXG4gICAgcGF5bG9hZDogeyBwcm9maWxlOiBudWxsLCBnaXZpbmc6IFtdLCByZXF1ZXN0aW5nOiBbXSB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTaGFyZWFibGUoc2hhcmVhYmxlSWQsIHNoYXJlYWJsZSkge1xuICBjb25zdCB7IHR5cGU6IHNoYXJlYWJsZVR5cGUgfSA9IHNoYXJlYWJsZTtcblxuICBsZXQgYWN0aW9uVHlwZTtcbiAgaWYoc2hhcmVhYmxlVHlwZSA9PT0gJ2dpdmluZycpIGFjdGlvblR5cGUgPSBHSVZJTkdfVVBEQVRFO1xuICBpZihzaGFyZWFibGVUeXBlID09PSAncmVxdWVzdGluZycpIGFjdGlvblR5cGUgPSBSRVFVRVNUSU5HX1VQREFURTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGUsXG4gICAgcGF5bG9hZDogcHV0U2hhcmVhYmxlKHNoYXJlYWJsZUlkLCBzaGFyZWFibGUpXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRTaGFyZWFibGUoc2hhcmVhYmxlKSB7XG4gIGNvbnN0IHsgdHlwZTogc2hhcmVhYmxlVHlwZSB9ID0gc2hhcmVhYmxlO1xuXG4gIGxldCBhY3Rpb25UeXBlO1xuICBpZihzaGFyZWFibGVUeXBlID09PSAnZ2l2aW5nJykgYWN0aW9uVHlwZSA9IEdJVklOR19BREQ7XG4gIGlmKHNoYXJlYWJsZVR5cGUgPT09ICdyZXF1ZXN0aW5nJykgYWN0aW9uVHlwZSA9IFJFUVVFU1RJTkdfQUREO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogYWN0aW9uVHlwZSxcbiAgICBwYXlsb2FkOiBwb3N0U2hhcmVhYmxlKHNoYXJlYWJsZSlcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVNoYXJlYWJsZShzaGFyZWFibGVJZCwgc2hhcmVhYmxlVHlwZSkge1xuICBsZXQgYWN0aW9uVHlwZTtcbiAgaWYoc2hhcmVhYmxlVHlwZSA9PT0gJ2dpdmluZycpIGFjdGlvblR5cGUgPSBHSVZJTkdfUkVNT1ZFO1xuICBpZihzaGFyZWFibGVUeXBlID09PSAncmVxdWVzdGluZycpIGFjdGlvblR5cGUgPSBSRVFVRVNUSU5HX1JFTU9WRTtcblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGUsXG4gICAgcGF5bG9hZDogZGVsZXRlU2hhcmVhYmxlKHNoYXJlYWJsZUlkKS50aGVuKCgpID0+ICh7IF9pZDogc2hhcmVhYmxlSWQgfSkpXG4gIH07XG59IiwiZXhwb3J0IGNvbnN0IExPQURfU1RBUlQgPSAnTE9BRF9TVEFSVCc7XG5leHBvcnQgY29uc3QgTE9BRF9FTkQgPSAnTE9BRF9FTkQnO1xuZXhwb3J0IGNvbnN0IEVSUk9SID0gJ0VSUk9SJztcbmV4cG9ydCBjb25zdCBFUlJPUl9DTEVBUiA9ICdFUlJPUl9DTEVBUic7XG5cbmV4cG9ydCBjb25zdCBnZXRMb2FkaW5nID0gc3RhdGUgPT4gc3RhdGUubG9hZGluZztcbmV4cG9ydCBjb25zdCBnZXRFcnJvciA9IHN0YXRlID0+IHN0YXRlLmVycm9yO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZGluZyhzdGF0ZSA9IGZhbHNlLCB7IHR5cGUgfSkge1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgTE9BRF9TVEFSVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgTE9BRF9FTkQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3Ioc3RhdGUgPSBudWxsLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRVJST1I6XG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICBjYXNlIEVSUk9SX0NMRUFSOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufSIsImltcG9ydCB7IGdldCwgcG9zdCwgcHV0LCBkZWwgfSBmcm9tICcuL3JlcXVlc3QnO1xuXG5jb25zdCBVUkwgPSAnL2FwaSc7XG5jb25zdCBQUk9GSUxFX1VSTCA9IGAke1VSTH0vcHJvZmlsZWA7XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyUHJvZmlsZSA9ICgpID0+IGdldChQUk9GSUxFX1VSTCk7XG5leHBvcnQgY29uc3QgcHV0UHJvZmlsZSA9IGRhdGEgPT4gcHV0KFBST0ZJTEVfVVJMLCBkYXRhKTtcblxuZXhwb3J0IGNvbnN0IGdldEZyaWVuZHMgPSAoKSA9PiBnZXQoYCR7UFJPRklMRV9VUkx9L2ZyaWVuZHNgKTtcbmV4cG9ydCBjb25zdCBwdXRGcmllbmRzID0gZW1haWwgPT4gcHV0KGAke1BST0ZJTEVfVVJMfS9mcmllbmRzL2AsIGVtYWlsKTtcbmV4cG9ydCBjb25zdCBwdXRGcmllbmRzQWNjZXB0ID0gaWQgPT4gcHV0KGAke1BST0ZJTEVfVVJMfS9mcmllbmRzL2NvbmZpcm0vJHtpZH1gKTtcbmV4cG9ydCBjb25zdCBnZXRGcmllbmRQcm9maWxlID0gZnJpZW5kSWQgPT4gZ2V0KGAke1BST0ZJTEVfVVJMfS9mcmllbmRzLyR7ZnJpZW5kSWR9YCk7XG5leHBvcnQgY29uc3QgZGVsZXRlRnJpZW5kID0gaWQgPT4gZGVsKGAke1BST0ZJTEVfVVJMfS9mcmllbmRzLyR7aWR9YCk7XG5cbmV4cG9ydCBjb25zdCBwb3N0U2hhcmVhYmxlID0gc2hhcmVhYmxlID0+IHBvc3QoYCR7UFJPRklMRV9VUkx9L3NoYXJlYWJsZXNgLCBzaGFyZWFibGUpO1xuZXhwb3J0IGNvbnN0IHB1dFNoYXJlYWJsZSA9IChzaGFyZWFibGVJZCwgZGF0YSkgPT4gcHV0KGAke1BST0ZJTEVfVVJMfS9zaGFyZWFibGVzLyR7c2hhcmVhYmxlSWR9YCwgZGF0YSk7XG5leHBvcnQgY29uc3QgZGVsZXRlU2hhcmVhYmxlID0gKHNoYXJlYWJsZUlkKSA9PiBkZWwoYCR7UFJPRklMRV9VUkx9L3NoYXJlYWJsZXMvJHtzaGFyZWFibGVJZH1gKTtcblxuZXhwb3J0IGNvbnN0IGdldEZlZWQgPSAoKSA9PiBnZXQoYCR7UFJPRklMRV9VUkx9L2ZlZWRgKTtcblxuZXhwb3J0IGNvbnN0IHBvc3RTaWduaW4gPSBjcmVkZW50aWFscyA9PiBwb3N0KGAke1VSTH0vc2lnbmluYCwgY3JlZGVudGlhbHMpO1xuZXhwb3J0IGNvbnN0IHBvc3RTaWdudXAgPSBjcmVkZW50aWFscyA9PiBwb3N0KGAke1VSTH0vc2lnbnVwYCwgY3JlZGVudGlhbHMpO1xuZXhwb3J0IGNvbnN0IGdldEFjY291bnRWZXJpZmllZCA9IHRva2VuID0+IGdldChgJHtVUkx9L3ZlcmlmeWAsIHtcbiAgaGVhZGVyczoge1xuICAgIEF1dGhvcml6YXRpb246IHRva2VuXG4gIH1cbn0pOyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoT2JqZWN0KTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsImltcG9ydCB7IExPR09VVCB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuXG5leHBvcnQgY29uc3QgRkVFRF9MT0FEID0gJ0ZFRURfTE9BRCc7XG5cbmV4cG9ydCBjb25zdCBnZXRGZWVkID0gc3RhdGUgPT4gc3RhdGUuZmVlZDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZlZWQoc3RhdGUgPSBbXSwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIEZFRURfTE9BRDpcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIGNhc2UgTE9HT1VUOlxuICAgICAgcmV0dXJuIFtdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbiIsImltcG9ydCB7IExPR09VVCB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuXG5leHBvcnQgY29uc3QgRlJJRU5EU19MT0FEID0gJ0ZSSUVORFNfTE9BRCc7XG5leHBvcnQgY29uc3QgRlJJRU5EX1JFUVVFU1QgPSAnRlJJRU5EX1JFUVVFU1QnO1xuZXhwb3J0IGNvbnN0IFBFTkRJTkdfRlJJRU5EX1JFUVVFU1QgPSAnUEVORElOR19GUklFTkRfUkVRVUVTVCc7XG5leHBvcnQgY29uc3QgREVMRVRFX0ZSSUVORCA9ICdERUxFVEVfRlJJRU5EJztcblxuZXhwb3J0IGNvbnN0IGdldEZyaWVuZHMgPSBzdGF0ZSA9PiBzdGF0ZS5mcmllbmRzO1xuZXhwb3J0IGNvbnN0IGdldEZyaWVuZFJlcXVlc3QgPSBzdGF0ZSA9PiBzdGF0ZS5mcmllbmRSZXF1ZXN0O1xuXG5leHBvcnQgZnVuY3Rpb24gZnJpZW5kcyhzdGF0ZSA9IFtdLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgRlJJRU5EU19MT0FEOlxuICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgY2FzZSBMT0dPVVQ6XG4gICAgICByZXR1cm4gW107XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJpZW5kUmVxdWVzdChzdGF0ZSA9IG51bGwsIHsgdHlwZSwgcGF5bG9hZCB9KSB7XG4gIHN3aXRjaCh0eXBlKSB7XG4gICAgY2FzZSBGUklFTkRfUkVRVUVTVDpcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlbmRpbmdGcmllbmRSZXF1ZXN0KHN0YXRlID0gbnVsbCwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIFBFTkRJTkdfRlJJRU5EX1JFUVVFU1Q6XG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGcmllbmQoc3RhdGUgPSBudWxsLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgREVMRVRFX0ZSSUVORDpcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn0iLCJleHBvcnQgY29uc3QgUFJPRklMRV9MT0FEID0gJ1BST0ZJTEVfTE9BRCc7XG5leHBvcnQgY29uc3QgUFJPRklMRV9VUERBVEUgPSAnUFJPRklMRV9VUERBVEUnO1xuZXhwb3J0IGNvbnN0IEdJVklOR19BREQgPSAnR0lWSU5HX0FERCc7XG5leHBvcnQgY29uc3QgUkVRVUVTVElOR19BREQgPSAnUkVRVUVTVElOR19BREQnO1xuZXhwb3J0IGNvbnN0IEdJVklOR19VUERBVEUgPSAnR0lWSU5HX1VQREFURSc7XG5leHBvcnQgY29uc3QgUkVRVUVTVElOR19VUERBVEUgPSAnUkVRVUVTVElOR19VUERBVEUnO1xuZXhwb3J0IGNvbnN0IEdJVklOR19SRU1PVkUgPSAnR0lWSU5HX1JFTU9WRSc7XG5leHBvcnQgY29uc3QgUkVRVUVTVElOR19SRU1PVkUgPSAnUkVRVUVTVElOR19SRU1PVkUnO1xuXG5pbXBvcnQgeyBMT0dPVVQgfSBmcm9tICcuLi9hdXRoL3JlZHVjZXJzJztcblxuZXhwb3J0IGNvbnN0IGdldFByb2ZpbGUgPSBzdGF0ZSA9PiBzdGF0ZS5wcm9maWxlO1xuZXhwb3J0IGNvbnN0IGdldEdpdmluZyA9IHN0YXRlID0+IHN0YXRlLmdpdmluZztcbmV4cG9ydCBjb25zdCBnZXRHaXZpbmdBcnJheSA9IHN0YXRlID0+IE9iamVjdC52YWx1ZXMoZ2V0R2l2aW5nKHN0YXRlKSk7XG5leHBvcnQgY29uc3QgZ2V0UmVxdWVzdGluZyA9IHN0YXRlID0+IHN0YXRlLnJlcXVlc3Rpbmc7XG5leHBvcnQgY29uc3QgZ2V0UmVxdWVzdGluZ0FycmF5ID0gc3RhdGUgPT4gT2JqZWN0LnZhbHVlcyhnZXRSZXF1ZXN0aW5nKHN0YXRlKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9maWxlKHN0YXRlID0gbnVsbCwgeyB0eXBlLCBwYXlsb2FkIH0pIHtcbiAgc3dpdGNoKHR5cGUpIHtcbiAgICBjYXNlIFBST0ZJTEVfTE9BRDpcbiAgICAgIHJldHVybiBwYXlsb2FkLnByb2ZpbGU7XG4gICAgY2FzZSBQUk9GSUxFX1VQREFURTpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCAuLi5wYXlsb2FkIH07XG4gICAgY2FzZSBMT0dPVVQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VTaGFyZWFibGVSZWR1Y2VyKHNoYXJlYWJsZVR5cGUsIGFkZEFjdGlvblR5cGUsIHVwZGF0ZUFjdGlvblR5cGUsIHJlbW92ZUFjdGlvblR5cGUpIHtcbiAgcmV0dXJuIChzdGF0ZSA9IHt9LCB7IHR5cGUsIHBheWxvYWQgfSkgPT4ge1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICBjYXNlIFBST0ZJTEVfTE9BRDpcbiAgICAgICAgcmV0dXJuIHBheWxvYWRbc2hhcmVhYmxlVHlwZV07XG4gICAgICBjYXNlIGFkZEFjdGlvblR5cGU6XG4gICAgICBjYXNlIHVwZGF0ZUFjdGlvblR5cGU6XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBbcGF5bG9hZC5faWRdOiBwYXlsb2FkIH07XG4gICAgICBjYXNlIHJlbW92ZUFjdGlvblR5cGU6IHtcbiAgICAgICAgY29uc3QgY29weSA9IHsgLi4uc3RhdGUgfTtcbiAgICAgICAgZGVsZXRlIGNvcHlbcGF5bG9hZC5faWRdO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICAgIH1cbiAgICAgIGNhc2UgTE9HT1VUOlxuICAgICAgICByZXR1cm4ge307XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgY29uc3QgZ2l2aW5nID0gbWFrZVNoYXJlYWJsZVJlZHVjZXIoJ2dpdmluZycsIEdJVklOR19BREQsIEdJVklOR19VUERBVEUsIEdJVklOR19SRU1PVkUpO1xuZXhwb3J0IGNvbnN0IHJlcXVlc3RpbmcgPSBtYWtlU2hhcmVhYmxlUmVkdWNlcigncmVxdWVzdGluZycsIFJFUVVFU1RJTkdfQURELCBSRVFVRVNUSU5HX1VQREFURSwgUkVRVUVTVElOR19SRU1PVkUpOyIsImltcG9ydCB7IEFDQ09VTlRfQVVUSCwgTE9HT1VULCBBVVRIX0NIRUNLRUQgfSBmcm9tICcuL3JlZHVjZXJzJztcblxuaW1wb3J0IHsgcG9zdFNpZ251cCwgcG9zdFNpZ25pbiwgZ2V0QWNjb3VudFZlcmlmaWVkIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBpJztcbmltcG9ydCB7IGdldFN0b3JlZEFjY291bnQsIGNsZWFyU3RvcmVkQWNjb3VudCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcXVlc3QnO1xuXG5jb25zdCBtYWtlQXV0aCA9IGFwaSA9PiB7XG4gIHJldHVybiBjcmVkZW50aWFscyA9PiAoe1xuICAgIHR5cGU6IEFDQ09VTlRfQVVUSCxcbiAgICBwYXlsb2FkOiBhcGkoY3JlZGVudGlhbHMpXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHNpZ251cCA9IG1ha2VBdXRoKHBvc3RTaWdudXApO1xuZXhwb3J0IGNvbnN0IHNpZ25pbiA9IG1ha2VBdXRoKHBvc3RTaWduaW4pO1xuXG5leHBvcnQgY29uc3QgbG9nb3V0ID0gKCkgPT4ge1xuICBjbGVhclN0b3JlZEFjY291bnQoKTtcbiAgcmV0dXJuIHsgdHlwZTogTE9HT1VUIH07XG59O1xuXG5jb25zdCBhdXRoQ2hlY2tlZCA9ICgpID0+ICh7IHR5cGU6IEFVVEhfQ0hFQ0tFRCB9KTtcblxuZXhwb3J0IGNvbnN0IGF0dGVtcHRBY2NvdW50TG9hZCA9ICgpID0+IHtcbiAgcmV0dXJuIGRpc3BhdGNoID0+IHtcbiAgICBjb25zdCBhY2NvdW50ID0gZ2V0U3RvcmVkQWNjb3VudCgpO1xuICAgIGlmKCFhY2NvdW50IHx8ICFhY2NvdW50LnRva2VuKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goYXV0aENoZWNrZWQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldEFjY291bnRWZXJpZmllZChhY2NvdW50LnRva2VuKVxuICAgICAgLnRoZW4oKCkgPT4gZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBBQ0NPVU5UX0FVVEgsXG4gICAgICAgIHBheWxvYWQ6IGFjY291bnRcbiAgICAgIH0pKVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgY2xlYXJTdG9yZWRBY2NvdW50KCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChhdXRoQ2hlY2tlZCgpKTtcbiAgICAgIH0pO1xuICB9O1xufTsiLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogJ0BAcmVkdXgvSU5JVCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKSxcbiAgUkVQTEFDRTogJ0BAcmVkdXgvUkVQTEFDRScgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKVxufTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0UgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICgodHlwZW9mIG9ic2VydmVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYnNlcnZlcikpICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH1cblxuICAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cbiAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiAnYWN0aW9uIFwiJyArIFN0cmluZyhhY3Rpb25UeXBlKSArICdcIicgfHwgJ2FuIGFjdGlvbic7XG5cbiAgcmV0dXJuICdHaXZlbiAnICsgYWN0aW9uRGVzY3JpcHRpb24gKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiAnICsgJ0lmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLic7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG5cbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcblxuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiAnICsgJ0lmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCAnICsgJ2V4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgJyArICdub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uXFwndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsICcgKyAneW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6IHR5cGUgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuICcgKyAoJ0RvblxcJ3QgdHJ5IHRvIGhhbmRsZSAnICsgQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZygnTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlID0gdm9pZCAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oKSB7XG4gICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhY3Rpb25DcmVhdG9ycykpICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkICcgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKFwiWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSAncHJvZHVjdGlvbicuIFwiICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB0aHVuayBmcm9tICdyZWR1eC10aHVuayc7XG5pbXBvcnQgcHJvbWlzZU1pZGRsZXdhcmUgZnJvbSAnLi9wcm9taXNlLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgbG9hZGluZywgZXJyb3IgfSBmcm9tICcuLi9jb21wb25lbnRzL2FwcC9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBhY2NvdW50LCBjaGVja2VkQXV0aCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYXV0aC9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBwcm9maWxlLCBnaXZpbmcsIHJlcXVlc3RpbmcgfSBmcm9tICcuLi9jb21wb25lbnRzL3Byb2ZpbGUvcmVkdWNlcnMnO1xuaW1wb3J0IHsgZnJpZW5kcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZnJpZW5kcy9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBmZWVkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mZWVkL3JlZHVjZXJzJztcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBsb2FkaW5nLFxuICBlcnJvcixcbiAgYWNjb3VudCxcbiAgcHJvZmlsZSxcbiAgZ2l2aW5nLFxuICByZXF1ZXN0aW5nLFxuICBmcmllbmRzLFxuICBjaGVja2VkQXV0aCxcbiAgZmVlZFxufSk7XG5cbmNvbnN0IGNvbXBvc2VFbmhhbmNlcnMgPSB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIHx8IGNvbXBvc2U7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gIHJvb3RSZWR1Y2VyLFxuICBjb21wb3NlRW5oYW5jZXJzKFxuICAgIGFwcGx5TWlkZGxld2FyZShcbiAgICAgIHRodW5rLFxuICAgICAgcHJvbWlzZU1pZGRsZXdhcmVcbiAgICApXG4gIClcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlOyIsImltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7XG5pbXBvcnQgeyBnZXRBY2NvdW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9hdXRoL3JlZHVjZXJzJztcblxubGV0IHRva2VuID0gJyc7XG5cbmNvbnN0IGtleSA9ICdhY2NvdW50JztcbmNvbnN0IHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuXG5zdG9yZS5zdWJzY3JpYmUoKCkgPT4ge1xuICBjb25zdCBhY2NvdW50ID0gZ2V0QWNjb3VudChzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgY29uc3QgbGF0ZXN0VG9rZW4gPSBhY2NvdW50ID8gKGFjY291bnQudG9rZW4gfHwgJycpIDogJyc7XG4gIGlmKGxhdGVzdFRva2VuID09PSB0b2tlbikgcmV0dXJuO1xuXG4gIHRva2VuID0gbGF0ZXN0VG9rZW47XG4gIHRva2VuID8gc3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoYWNjb3VudCkpIDogY2xlYXJTdG9yZWRBY2NvdW50KCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyU3RvcmVkQWNjb3VudCA9ICgpID0+IHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXG5leHBvcnQgY29uc3QgZ2V0U3RvcmVkQWNjb3VudCA9ICgpID0+IHtcbiAgY29uc3QganNvbiA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICB9XG4gIGNhdGNoKGVycikge1xuICAgIGNsZWFyU3RvcmVkQWNjb3VudCgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZXF1ZXN0KHVybCwgb3B0aW9ucyA9IHt9LCBkYXRhKSB7XG4gIGlmKGRhdGEpIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXG4gIGlmKHRva2VuKSB7XG4gICAgaWYoIW9wdGlvbnMuaGVhZGVycykgb3B0aW9ucy5oZWFkZXJzID0ge307XG4gICAgb3B0aW9ucy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSB0b2tlbjtcbiAgfVxuXG4gIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gW3Jlc3BvbnNlLm9rLCByZXNwb25zZS5qc29uKCldKVxuICAgIC50aGVuKChbb2ssIGpzb25dKSA9PiB7XG4gICAgICBpZihvaykgcmV0dXJuIGpzb247XG4gICAgICB0aHJvdyBqc29uLm1lc3NhZ2UgfHwganNvbi5lcnJvciB8fCBqc29uLmVycm9ycyB8fCBqc29uO1xuICAgIH0pO1xuXG59XG5cbmNvbnN0IGhlYWRlcnMgPSB7XG4gICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbn07XG5cbmV4cG9ydCBjb25zdCBnZXQgPSAodXJsLCBvcHRpb25zID0ge30pID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ0dFVCcsIC4uLm9wdGlvbnMgfSk7XG5leHBvcnQgY29uc3QgcG9zdCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BPU1QnLCBoZWFkZXJzIH0sIGRhdGEpO1xuZXhwb3J0IGNvbnN0IHB1dCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BVVCcsIGhlYWRlcnMgfSwgZGF0YSk7XG5leHBvcnQgY29uc3QgZGVsID0gKHVybCwgZGF0YSkgPT4gcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAnREVMRVRFJyB9LCBkYXRhKTtcblxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiOnJvb3Qge1xcbiAgLS1zb2Z0LWJsYWNrOiAjMTQxNDE0O1xcbiAgLS1kYXJrLWdyYXk6ICMzYTNhM2E7XFxuICAtLW1pZC1ncmF5OiAjOWU5ZTllO1xcbiAgLS1wYWxlLWdyYXk6ICNlYmViZWI7XFxuICAtLW1hZ2VudGE6ICNjNDFlNWE7XFxuICAtLXNhZmZyb246ICNmYzk4MTU7XFxuICAtLWRhcmstc2FmZnJvbjogI2VlODgwMjtcXG59XFxuXFxuKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuaHRtbCwgYm9keSwgI3Jvb3Qge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogIzE0MTQxNDtcXG4gIGNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG59XFxuXFxuYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcblxcblxcblxcblxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS92aWN0b3IvcHJvamVjdHMvZnJpZW5kc2hpcC1hcHAvZnJvbnRlbmQvc3JjL21haW4uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usc0JBQXNCO0VBQ3RCLHFCQUFxQjtFQUNyQixvQkFBb0I7RUFDcEIscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixtQkFBbUI7RUFDbkIsd0JBQXdCO0NBQ3pCOztBQUVEO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCx1QkFBdUI7Q0FDeEI7O0FBRUQ7RUFDRSxZQUFZO0VBQ1osYUFBYTtDQUNkOztBQUVEO0VBQ0Usb0NBQW9DO0VBQ3BDLGVBQXlCO0VBQXpCLHlCQUF5QjtDQUMxQjs7QUFFRDtFQUNFLHNCQUFzQjtDQUN2Qjs7QUFFRDtFQUNFLGlCQUFpQjtDQUNsQlwiLFwiZmlsZVwiOlwibWFpbi5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1zb2Z0LWJsYWNrOiAjMTQxNDE0O1xcbiAgLS1kYXJrLWdyYXk6ICMzYTNhM2E7XFxuICAtLW1pZC1ncmF5OiAjOWU5ZTllO1xcbiAgLS1wYWxlLWdyYXk6ICNlYmViZWI7XFxuICAtLW1hZ2VudGE6ICNjNDFlNWE7XFxuICAtLXNhZmZyb246ICNmYzk4MTU7XFxuICAtLWRhcmstc2FmZnJvbjogI2VlODgwMjtcXG59XFxuXFxuKiB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuaHRtbCwgYm9keSwgI3Jvb3Qge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IE1vbnRzZXJyYXQsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxufVxcblxcbmEge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG5cXG5cXG5cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL21haW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vbWFpbi5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9tYWluLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldEFjY291bnQgfSBmcm9tICcuLi9hdXRoL3JlZHVjZXJzJztcbmltcG9ydCB7IFJvdXRlLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jb25zdCBQcml2YXRlUm91dGUgPSAoeyBhY2NvdW50LCBjb21wb25lbnQ6IENvbXBvbmVudCwgcmVuZGVyLCAuLi5yZXN0IH0pID0+IHtcbiAgcmV0dXJuIDxSb3V0ZSB7Li4ucmVzdH0gcmVuZGVyPXtwcm9wcyA9PiB7XG4gICAgaWYoIWFjY291bnQpIHJldHVybiA8UmVkaXJlY3RcbiAgICAgIHRvPXt7XG4gICAgICAgIHBhdGhuYW1lOiAnL2F1dGgvc2lnbmluJyxcbiAgICAgICAgc3RhdGU6IHsgZnJvbTogcHJvcHMubG9jYXRpb24ucGF0aG5hbWUgfVxuICAgICAgfX1cbiAgICAvPjtcblxuICAgIGlmKENvbXBvbmVudCkgcmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfS8+O1xuICAgIGlmKHJlbmRlcikgcmV0dXJuIHJlbmRlcihwcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG5cbiAgfX0vPjtcbn07XG5cblByaXZhdGVSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGFjY291bnQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoeyBhY2NvdW50OiBnZXRBY2NvdW50KHN0YXRlKSB9KSxcbiAgbnVsbFxuKShQcml2YXRlUm91dGUpOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuRjBnUE9mUkVQUHBMQkpFaWNQQjVKIHtcXG4gIHdpZHRoOiA3NSU7XFxuICBtYXJnaW46IDIuNXJlbSBhdXRvO1xcbn1cXG4gIC5GMGdQT2ZSRVBQcExCSkVpY1BCNUogOmZpcnN0LWNoaWxkIHtcXG4gICAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICBjb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIG1hcmdpbi10b3A6IDA7XFxuICB9XFxuICAuRjBnUE9mUkVQUHBMQkpFaWNQQjVKIHAge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjRyZW07XFxuICB9XFxuQG1lZGlhIChtaW4td2lkdGg6IDczMHB4KSB7XFxuICAuRjBnUE9mUkVQUHBMQkpFaWNQQjVKIHtcXG4gICAgd2lkdGg6IDU1MHB4O1xcbiAgfVxcbn1cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvdmljdG9yL3Byb2plY3RzL2ZyaWVuZHNoaXAtYXBwL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2Fib3V0L0Fib3V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7RUFDWCxvQkFBb0I7Q0FhckI7RUFaQztJQUNFLHNCQUFzQjtJQUF0QixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLGNBQWM7R0FDZjtFQUNEO0lBQ0UsbUJBQW1CO0lBQ25CLG9CQUFvQjtHQUNyQjtBQUNEO0VBWkY7SUFhSSxhQUFhO0dBRWhCO0NBREVcIixcImZpbGVcIjpcIkFib3V0LmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmFib3V0KSB7XFxuICB3aWR0aDogNzUlO1xcbiAgbWFyZ2luOiAyLjVyZW0gYXV0bztcXG4gIDpmaXJzdC1jaGlsZCB7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gIH1cXG4gIHAge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjRyZW07XFxuICB9XFxuICBAbWVkaWEgKG1pbi13aWR0aDogNzMwcHgpIHtcXG4gICAgd2lkdGg6IDU1MHB4O1xcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiYWJvdXRcIjogXCJGMGdQT2ZSRVBQcExCSkVpY1BCNUpcIlxufTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQWJvdXQuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQWJvdXQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQWJvdXQuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQWJvdXQuY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmFib3V0fT5cbiAgICAgICAgPHA+V2UgYnVpbHQgU2hhcmVhYmxlIG91dCBvZiBhIGRlc2lyZSBmb3IgdHJ1ZSBwZXJzb25hbCBjb25uZWN0aW9uLjwvcD5cbiAgICAgICAgPHA+SXRzIHB1cnBvc2UgaXMgdG8gaGVscCBmcmllbmRzIGludGVyYWN0IGluIHdheXMgdGhhdCBhbGxvdyB1cyB0byBpbmNyZWFzZSBmZWVsaW5ncyBvZiBjb21tdW5pdHkgYW5kIGJlbG9uZ2luZy48L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEluIG91ciB3b3JsZCB0b2RheSwgcGVvcGxlIGFyZSBsaW5rZWQgbW9yZSB0aGFuIGF0IGFueSBvdGhlciBwb2ludCBpbiBoaXN0b3J5LiBXZSBoYXZlIGZyaWVuZHMgZnJvbSBhbGwgYXJvdW5kIHRoZSBnbG9iZSwgeWV0IGRlcHJlc3Npb24gYW5kIGxvbmVsaW5lc3MgYXJlIG9uIHRoZSByaXNlLiBNb3JlIGluZGl2aWR1YWxzIGZlZWwgaXNvbGF0ZWQgYW5kIGRpc2Nvbm5lY3RlZCB0aGFuIGV2ZXIgYmVmb3JlLlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEEgSGFydmFyZCBoZWFsdGggc3R1ZHksIHNwYW5uaW5nIG1vcmUgdGhhbiA3NSB5ZWFycywgcmV2ZWFscyB0aGF0IGNsb3NlIHJlbGF0aW9uc2hpcHMgYXJlIHdoYXQga2VlcCB1cyBoYXBweSB0aHJvdWdob3V0IG91ciBsaXZlcy4gVGhlc2UgdGllcyBwcm90ZWN0IHVzIGZyb20gbGlmZeKAmXMgZGlzY29udGVudHMsIGhlbHAgZGVsYXkgbWVudGFsIGFuZCBwaHlzaWNhbCBkZWNsaW5lLCBhbmQgYXJlIGJldHRlciBwcmVkaWN0b3JzIG9mIGxvbmcgYW5kIGhhcHB5IGxpdmVzIHRoYW4gc29jaWFsIGNsYXNzLCBJUSwgb3IgZXZlbiBnZW5lcy5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBEZWNhZGVzIG9mIHJlc2VhcmNoIGFsc28gc2hvdyB0aGF0IGdpdmluZyB0byBvdGhlcnMgaW5jcmVhc2VzIG91ciBvd24gam95LiBNZWFzdXJpbmcgaG9ybW9uZXMgYW5kIGFjdGl2aXR5IGluIG91ciBib2RpZXMgYW5kIGJyYWlucyB3aGVuIGJlaW5nIGhlbHBmdWwgb3IgY29vcGVyYXRpdmUgbGlnaHRzIHVwIG91ciBwbGVhc3VyZSBjZW50ZXJzLiBXZSBhcmUsIHF1aXRlIGxpdGVyYWxseSwgaGFyZC13aXJlZCB0byBiZSBnZW5lcm91cyB3aXRoIG90aGVycy5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICBUaGVyZSBhcmUgd29uZGVyZnVsIHJlc291cmNlcyBhdmFpbGFibGUgdG8gaGVscCBlbmhhbmNlIHBlcnNvbmFsIGhhcHBpbmVzcy4gIFRoZXJlIGFyZSBhbHNvIGluY3JlZGlibGUgc29jaWFsIHBsYXRmb3JtcyB0aGF0IGhlbHAgdXMgY29tbXVuaWNhdGUgd2l0aCBvbmUgYW5vdGhlci4gIFdlIGZlZWwgU2hhcmVhYmxlIGJyaW5ncyBhbiBvcHBvcnR1bml0eSBmb3IgdGhlc2UgdG8gb3ZlcmxhcC4gU3BlbmRpbmcgdGltZSB3aXRoIHNvbWVvbmUgd2hvIG1hdHRlcnMgdG8geW91LCBrbm93aW5nIHlvdSBhcmUgdGhlcmUgZm9yIHRoZW0gd2hlbiB0aGV5IG5lZWQgc3VwcG9ydCwgYW5kIHRoYXQgdGhleSBhcmUgdGhlcmUgZm9yIHlvdSBpcyB0aGUgY3J1Y2lhbCBpbmdyZWRpZW50IGluIHRoZSByZWNpcGUgZm9yIGhhcHBpbmVzcy4gU2hhcmVhYmxlIGlzIG5vdCBvbmx5IGFib3V0IHdoYXQgd2UgbmVlZCBmb3Igb3VyIG93biBoYXBwaW5lc3MsIGJ1dCB3aGF0IHdlIGVhY2ggaGF2ZSB0byBnaXZlIHRvIGVhY2ggb3RoZXIuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgSm9pbiBTaGFyZWFibGUgYW5kIHNlZSB3aGF0IHlvdSBoYXZlIHRvIGdhaW4gYnkgc2hhcmluZyB3aGF0IHlvdSBoYXZlIHRvIGdpdmUuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHA+IFxuICAgICAgICAgIFlvdSBjYW4gZmluZCB0aGUgcGVvcGxlIGJlaGluZCBTaGFyZWFibGUgYXQgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9laWdodGhub3RlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9naXRodWIuY29tL2VpZ2h0aG5vdGU8L2E+LlxuICAgICAgICA8L3A+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbiIsImltcG9ydCB7IGdldEZyaWVuZHMsXG4gIHB1dEZyaWVuZHMsXG4gIHB1dEZyaWVuZHNBY2NlcHQsXG4gIGRlbGV0ZUZyaWVuZFxufSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcGknO1xuXG5pbXBvcnQge1xuICBGUklFTkRTX0xPQUQsXG4gIEZSSUVORF9SRVFVRVNULFxuICBQRU5ESU5HX0ZSSUVORF9SRVFVRVNULFxuICBERUxFVEVfRlJJRU5EXG59IGZyb20gJy4vcmVkdWNlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEZyaWVuZHMoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRlJJRU5EU19MT0FELFxuICAgIHBheWxvYWQ6IGdldEZyaWVuZHMoKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZEZyaWVuZFJlcXVlc3QoZW1haWwpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGUklFTkRfUkVRVUVTVCxcbiAgICBwYXlsb2FkOiBwdXRGcmllbmRzKGVtYWlsKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNjZXB0RnJpZW5kUmVxdWVzdChpZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFBFTkRJTkdfRlJJRU5EX1JFUVVFU1QsXG4gICAgcGF5bG9hZDogcHV0RnJpZW5kc0FjY2VwdChpZClcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZyaWVuZChpZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IERFTEVURV9GUklFTkQsXG4gICAgcGF5bG9hZDogZGVsZXRlRnJpZW5kKGlkKVxuICB9O1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzNRMl9jN3FVazhkTWNxNFlLQTJNVTEge1xcbiAgcGFkZGluZzogMnJlbSAxcmVtO1xcbiAgd2lkdGg6IDc1JTtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSBoMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG4gIH1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSAuZnJpZW5kLWFkZC1mb3JtIHtcXG4gICAgYm9yZGVyOiAxcmVtIHNvbGlkIHZhcigtLWRhcmstc2FmZnJvbik7XFxuICAgIGJvcmRlcjogMXJlbSBzb2xpZCB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgfVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIC5mcmllbmQtYWRkLWZvcm0gaW5wdXQge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1taWQtZ3JheSk7XFxuICAgICAgZm9udC1zaXplOiAxZW07XFxuICAgICAgcGFkZGluZzogMC4ycmVtO1xcbiAgICAgIG1hcmdpbi10b3A6IDAuMnJlbTtcXG4gICAgfVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIC5mcmllbmQtYWRkLWZvcm0gbGFiZWwge1xcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XFxuICAgICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgfVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIGJ1dHRvbiB7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIG1hcmdpbi10b3A6IDFyZW07XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMC41cmVtXFxuICB9XFxuICAuXzNRMl9jN3FVazhkTWNxNFlLQTJNVTEgYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxufVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIC5mcmllbmQtbGlzdCBoMyB7XFxuICAgICAgbWFyZ2luLXRvcDogMnJlbTtcXG4gICAgfVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIC5mcmllbmQtbGlzdCBhIHtcXG4gICAgICBjb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICAgICAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIH1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSAuZnJpZW5kLWxpc3QgYnV0dG9uIHtcXG4gICAgICBtYXJnaW46IDAgMCAwIDAuNXJlbTtcXG4gICAgfVxcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIC5mcmllbmQtbGlzdCBsaSB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMC44cmVtO1xcbiAgICB9XFxuICAuXzNRMl9jN3FVazhkTWNxNFlLQTJNVTEgLmZyaWVuZC1saXN0IC5yZW1vdmUtZnJpZW5kIHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgICAgIHRvcDogMC4xcmVtO1xcbiAgICAgIGZvbnQtc2l6ZTogMi41ZW07XFxuICAgICAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG4gICAgICBtYXJnaW46IDAgMC41cmVtIDAgMDtcXG4gICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgY29sb3I6IHZhcigtLW1pZC1ncmF5KTtcXG4gICAgICBjb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50XFxuICAgIH1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSAuZnJpZW5kLWxpc3QgLnJlbW92ZS1mcmllbmQ6aG92ZXIge1xcbiAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbn1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSBpbWcge1xcbiAgICB3aWR0aDogNTBweDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gIH1cXG4gIC5fM1EyX2M3cVVrOGRNY3E0WUtBMk1VMSAuZXhpc3RpbmctZnJpZW5kcyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB9XFxuICAuXzNRMl9jN3FVazhkTWNxNFlLQTJNVTEgLmZyaWVuZC1saXN0LWl0ZW0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgfVxcbkBtZWRpYSAobWluLXdpZHRoOiA0NzBweCkge1xcbiAgLl8zUTJfYzdxVWs4ZE1jcTRZS0EyTVUxIHtcXG4gICAgd2lkdGg6IDM1MHB4O1xcbiAgfVxcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvdmljdG9yL3Byb2plY3RzL2ZyaWVuZHNoaXAtYXBwL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2ZyaWVuZHMvRnJpZW5kcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxtQkFBbUI7RUFDbkIsV0FBVztFQUNYLGVBQWU7Q0FnRmhCO0VBL0VDO0lBQ0Usc0JBQXNCO0dBQ3ZCO0VBQ0Q7SUFDRSx1Q0FBdUM7SUFBdkMsdUNBQXVDO0lBQ3ZDLGNBQWM7SUFDZCxjQUFjO0lBQ2QsdUJBQXVCO0dBYXhCO0VBWkM7TUFDRSxlQUFlO01BQ2YsWUFBWTtNQUNaLGtDQUFrQztNQUFsQyxrQ0FBa0M7TUFDbEMsZUFBZTtNQUNmLGdCQUFnQjtNQUNoQixtQkFBbUI7S0FDcEI7RUFDRDtNQUNFLHVCQUF1QjtNQUN2QixpQkFBaUI7S0FDbEI7RUFFSDtJQUNFLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLGtDQUFrQztJQUFsQyxrQ0FBa0M7SUFDbEMsYUFBYTtJQUNiLGVBQWdCO0dBSWpCO0VBSEM7RUFDRSxvQ0FBb0M7RUFBcEMsb0NBQW9DO0NBQ3JDO0VBR0Q7TUFDRSxpQkFBaUI7S0FDbEI7RUFDRDtNQUNFLHNCQUFzQjtNQUF0QixzQkFBc0I7TUFDdEIsaUJBQWlCO0tBQ2xCO0VBQ0Q7TUFDRSxxQkFBcUI7S0FDdEI7RUFDRDtNQUNFLHNCQUFzQjtLQUN2QjtFQUNEO01BQ0UsbUJBQW1CO01BQ25CLGdCQUFnQjtNQUNoQixZQUFZO01BQ1osaUJBQWlCO01BQ2pCLG9CQUFvQjtNQUNwQixxQkFBcUI7TUFDckIsYUFBYTtNQUNiLHVCQUF1QjtNQUF2Qix1QkFBdUI7TUFDdkIsNkJBQThCO0tBSS9CO0VBSEM7RUFDRSxzQkFBc0I7RUFBdEIsc0JBQXNCO0NBQ3ZCO0VBR0w7SUFDRSxZQUFZO0lBQ1osYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixtQkFBbUI7R0FDcEI7RUFDRDtJQUNFLGNBQWM7SUFDZCx3QkFBd0I7SUFDeEIsbUJBQW1CO0dBQ3BCO0VBQ0Q7SUFDRSxjQUFjO0lBQ2Qsb0JBQW9CO0dBQ3JCO0FBQ0Q7RUFoRkY7SUFpRkksYUFBYTtHQUVoQjtDQURFXCIsXCJmaWxlXCI6XCJGcmllbmRzLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmZyaWVuZHMpIHtcXG4gIHBhZGRpbmc6IDJyZW0gMXJlbTtcXG4gIHdpZHRoOiA3NSU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIGgzIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbiAgfVxcbiAgLmZyaWVuZC1hZGQtZm9ybSB7XFxuICAgIGJvcmRlcjogMXJlbSBzb2xpZCB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBpbnB1dCB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICAgIHBhZGRpbmc6IDAuMnJlbTtcXG4gICAgICBtYXJnaW4tdG9wOiAwLjJyZW07XFxuICAgIH1cXG4gICAgbGFiZWwge1xcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XFxuICAgICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgfVxcbiAgfVxcbiAgYnV0dG9uIHtcXG4gICAgZm9udC1zaXplOiAwLjhlbTtcXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgcGFkZGluZzogMC41cmVtO1xcbiAgICAmOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgfVxcbiAgfVxcbiAgLmZyaWVuZC1saXN0IHtcXG4gICAgaDMge1xcbiAgICAgIG1hcmdpbi10b3A6IDJyZW07XFxuICAgIH1cXG4gICAgYSB7XFxuICAgICAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIH1cXG4gICAgYnV0dG9uIHtcXG4gICAgICBtYXJnaW46IDAgMCAwIDAuNXJlbTtcXG4gICAgfVxcbiAgICBsaSB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMC44cmVtO1xcbiAgICB9XFxuICAgIC5yZW1vdmUtZnJpZW5kIHtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgICAgIHRvcDogMC4xcmVtO1xcbiAgICAgIGZvbnQtc2l6ZTogMi41ZW07XFxuICAgICAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG4gICAgICBtYXJnaW46IDAgMC41cmVtIDAgMDtcXG4gICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgY29sb3I6IHZhcigtLW1pZC1ncmF5KTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICAmOmhvdmVyIHtcXG4gICAgICAgIGNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG4gIGltZyB7XFxuICAgIHdpZHRoOiA1MHB4O1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbiAgfVxcbiAgLmV4aXN0aW5nLWZyaWVuZHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgfVxcbiAgLmZyaWVuZC1saXN0LWl0ZW0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgfVxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDQ3MHB4KSB7XFxuICAgIHdpZHRoOiAzNTBweDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImZyaWVuZHNcIjogXCJfM1EyX2M3cVVrOGRNY3E0WUtBMk1VMVwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9GcmllbmRzLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0ZyaWVuZHMuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vRnJpZW5kcy5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJpZW5kIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBmaXJzdE5hbWU6IFByb3BUeXBlcy5hbnksXG4gICAgbGFzdE5hbWU6IFByb3BUeXBlcy5hbnksXG4gICAgaW1hZ2VVcmw6IFByb3BUeXBlcy5hbnlcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lLCBpbWFnZVVybCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8bGkgY2xhc3NOYW1lPVwiZnJpZW5kLWxpc3QtaXRlbVwiPlxuICAgICAgICA8aW1nIHNyYz17aW1hZ2VVcmwgPyBpbWFnZVVybCA6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8zNTI3MzA0My80MjEwNTQ4Ni01NTFjNzFkMi03Yjg1LTExZTgtOGFhNC1lZTM5ZWJlMDE1ZDcucG5nJ30gYWx0PXtgcHJvZmlsZSBwaWN0dXJlIGZvciAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX1gfS8+XG4gICAgICAgIDxwPntmaXJzdE5hbWV9IHtsYXN0TmFtZX08L3A+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBGcmllbmQgZnJvbSAnLi9GcmllbmQnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0ZyaWVuZHMuY3NzJztcblxuaW1wb3J0IHsgbG9hZEZyaWVuZHMsXG4gIHNlbmRGcmllbmRSZXF1ZXN0LFxuICBhY2NlcHRGcmllbmRSZXF1ZXN0LFxuICByZW1vdmVGcmllbmRcbn0gZnJvbSAnLi9hY3Rpb25zJztcblxuaW1wb3J0IHsgZ2V0RnJpZW5kcyB9IGZyb20gJy4vcmVkdWNlcnMnO1xuXG5jbGFzcyBGcmllbmRzIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZnJpZW5kczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHNlbmRGcmllbmRSZXF1ZXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGFjY2VwdEZyaWVuZFJlcXVlc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbG9hZEZyaWVuZHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVtb3ZlRnJpZW5kOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgYWRkRnJpZW5kRm9ybTogJycsXG4gICAgZnJpZW5kTWVzc2FnZTogbnVsbFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMubG9hZEZyaWVuZHMoKTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFkZEZyaWVuZEZvcm06IHRhcmdldC52YWx1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLnNlbmRGcmllbmRSZXF1ZXN0KHsgZW1haWw6IGAke3RoaXMuc3RhdGUuYWRkRnJpZW5kRm9ybX1gIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGZyaWVuZE1lc3NhZ2U6IHJlcy5wYXlsb2FkIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBhZGRGcmllbmRGb3JtOiAnJyB9KTtcbiAgfTtcblxuICBoYW5kbGVBY2NlcHRGcmllbmQgPSBldmVudCA9PiB7XG4gICAgdGhpcy5wcm9wcy5hY2NlcHRGcmllbmRSZXF1ZXN0KGV2ZW50LnRhcmdldC5pZCk7XG4gICAgdGhpcy5wcm9wcy5sb2FkRnJpZW5kcygpO1xuICB9O1xuXG4gIGhhbmRsZVJlbW92ZUZyaWVuZCA9IGV2ZW50ID0+IHtcbiAgICBpZihjb25maXJtKCdUaGlzIHdpbGwgcmVtb3ZlIHlvdXIgZnJpZW5kLCBhbmQgcmVtb3ZlIHlvdSBmcm9tIHRoZWlyIGZyaWVuZHMgbGlzdC4gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRvIHRoaXM/JykpIHtcbiAgICAgIHRoaXMucHJvcHMucmVtb3ZlRnJpZW5kKGV2ZW50LnRhcmdldC5pZCk7XG4gICAgICB0aGlzLnByb3BzLmxvYWRGcmllbmRzKCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGZyaWVuZHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBhZGRGcmllbmRGb3JtLCBmcmllbmRNZXNzYWdlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZnJpZW5kc30+XG4gICAgICAgIDxoMz5BZGQgYSBGcmllbmQ8L2gzPlxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJmcmllbmQtYWRkLWZvcm1cIiBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJhZGQtZnJpZW5kXCI+RW50ZXIgeW91ciBmcmllbmQmYXBvcztzIGVtYWlsOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSBpZD1cImFkZC1mcmllbmRcIiBuYW1lPVwiYWRkRnJpZW5kRm9ybVwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQgdmFsdWU9e2FkZEZyaWVuZEZvcm19Lz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5TRU5EIFJFUVVFU1Q8L2J1dHRvbj5cbiAgICAgICAgICB7ZnJpZW5kTWVzc2FnZSAmJiA8cD57ZnJpZW5kTWVzc2FnZX08L3A+fVxuICAgICAgICA8L2Zvcm0+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcmllbmQtbGlzdFwiPlxuICAgICAgICAgIHtmcmllbmRzWzFdICYmICEhZnJpZW5kc1sxXS5sZW5ndGggJiYgPGgzPlBlbmRpbmcgRnJpZW5kIFJlcXVlc3RzPC9oMz59XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAge2ZyaWVuZHNbMV0gJiYgZnJpZW5kc1sxXS5tYXAoZnJpZW5kID0+IChcbiAgICAgICAgICAgICAgPGxpIGtleT17ZnJpZW5kLl9pZH0+XG4gICAgICAgICAgICAgICAge2ZyaWVuZC5maXJzdE5hbWV9PGJ1dHRvbiBpZD17ZnJpZW5kLl9pZH0gb25DbGljaz17dGhpcy5oYW5kbGVBY2NlcHRGcmllbmR9PkFDQ0VQVDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmcmllbmQtbGlzdFwiPiAgICAgICAgXG4gICAgICAgICAgPGgzPkZyaWVuZHM8L2gzPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIHtmcmllbmRzWzBdICYmIGZyaWVuZHNbMF0ubWFwKChmcmllbmQsIGkpID0+IChcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZXhpc3RpbmctZnJpZW5kc1wiIGtleT17aX0+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD17ZnJpZW5kLl9pZH0gY2xhc3NOYW1lPVwicmVtb3ZlLWZyaWVuZFwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVtb3ZlRnJpZW5kfT4mdGltZXM7PC9idXR0b24+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89e2AvZnJpZW5kcy8ke2ZyaWVuZC5faWR9YH0+XG4gICAgICAgICAgICAgICAgICA8RnJpZW5kXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZT17ZnJpZW5kLmZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2ZyaWVuZC5sYXN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw9e2ZyaWVuZC5pbWFnZVVybH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHtcbiAgICBmcmllbmRzOiBnZXRGcmllbmRzKHN0YXRlKVxuICB9KSxcbiAgeyBsb2FkRnJpZW5kcyxcbiAgICBzZW5kRnJpZW5kUmVxdWVzdCxcbiAgICBhY2NlcHRGcmllbmRSZXF1ZXN0LFxuICAgIHJlbW92ZUZyaWVuZFxuICB9XG4pKEZyaWVuZHMpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5fMW9ZcmdiS2RCbVFPaktiV05RQjA5TyB7XFxuICBwYWRkaW5nOiAycmVtIDFyZW07XFxufVxcbiAgLl8xb1lyZ2JLZEJtUU9qS2JXTlFCMDlPIGxpIHtcXG4gICAgYm9yZGVyOiAxcmVtIHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgYm9yZGVyOiAxcmVtIHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG4gIH1cXG4gIC5fMW9ZcmdiS2RCbVFPaktiV05RQjA5TyBsaSAub3duZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgICBjb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgIGNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgfVxcbiAgLl8xb1lyZ2JLZEJtUU9qS2JXTlFCMDlPIGxpIC5vd25lciBhIHtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgfVxcbiAgLl8xb1lyZ2JLZEJtUU9qS2JXTlFCMDlPIGxpIC5jb250ZW50IHtcXG4gICAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICB9XFxuICAuXzFvWXJnYktkQm1RT2pLYldOUUIwOU8gbGkgLmZlZWQtZGF0ZSB7XFxuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XFxuICAgIH1cXG4gIC5fMW9ZcmdiS2RCbVFPaktiV05RQjA5TyAuZ2l2aW5nIHtcXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gIH1cXG4gIC5fMW9ZcmdiS2RCbVFPaktiV05RQjA5TyAucmVxdWVzdGluZyB7XFxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgfVxcbkBtZWRpYSAobWluLXdpZHRoOiA3MzBweCkge1xcbiAgLl8xb1lyZ2JLZEJtUU9qS2JXTlFCMDlPIHtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIHdpZHRoOiA1NTBweDtcXG4gIH1cXG59XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL3ZpY3Rvci9wcm9qZWN0cy9mcmllbmRzaGlwLWFwcC9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9mZWVkL0ZlZWQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsbUJBQW1CO0NBZ0NwQjtFQS9CQztJQUNFLG1DQUFtQztJQUFuQyxtQ0FBbUM7SUFDbkMsb0JBQW9CO0dBa0JyQjtFQWpCQztNQUNFLG9DQUFvQztNQUFwQyxvQ0FBb0M7TUFDcEMsZ0JBQWdCO01BQ2hCLHVCQUF1QjtNQUF2Qix1QkFBdUI7TUFDdkIsaUJBQWlCO0tBS2xCO0VBSkM7UUFDRSxhQUFhO1FBQ2IsaUJBQWlCO09BQ2xCO0VBRUg7TUFDRSxjQUFjO0tBQ2Y7RUFDRDtNQUNFLGlCQUFpQjtNQUNqQixtQkFBbUI7S0FDcEI7RUFFSDtJQUNFLDZCQUE2QjtJQUE3Qiw2QkFBNkI7R0FDOUI7RUFDRDtJQUNFLGtDQUFrQztJQUFsQyxrQ0FBa0M7R0FDbkM7QUFDRDtFQTdCRjtJQThCSSxlQUFlO0lBQ2YsYUFBYTtHQUVoQjtDQURFXCIsXCJmaWxlXCI6XCJGZWVkLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmZlZWQpIHtcXG4gIHBhZGRpbmc6IDJyZW0gMXJlbTtcXG4gIGxpIHtcXG4gICAgYm9yZGVyOiAxcmVtIHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG4gICAgLm93bmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgICBwYWRkaW5nOiAwLjVyZW07XFxuICAgICAgY29sb3I6IHZhcigtLW1pZC1ncmF5KTtcXG4gICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICAgIGEge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLmNvbnRlbnQge1xcbiAgICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIH1cXG4gICAgLmZlZWQtZGF0ZSB7XFxuICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gICAgICBtYXJnaW4tdG9wOiAwLjVyZW07XFxuICAgIH1cXG4gIH1cXG4gIC5naXZpbmcge1xcbiAgICBib3JkZXItY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgfVxcbiAgLnJlcXVlc3Rpbmcge1xcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxuICB9XFxuICBAbWVkaWEgKG1pbi13aWR0aDogNzMwcHgpIHtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIHdpZHRoOiA1NTBweDtcXG4gIH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImZlZWRcIjogXCJfMW9ZcmdiS2RCbVFPaktiV05RQjA5T1wiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9GZWVkLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0ZlZWQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vRmVlZC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgeyBnZXRGZWVkIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBpJztcblxuaW1wb3J0IHsgRkVFRF9MT0FEIH0gZnJvbSAnLi9yZWR1Y2Vycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRmVlZCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRUVEX0xPQUQsXG4gICAgcGF5bG9hZDogZ2V0RmVlZCgpXG4gIH07XG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlZWRTaGFyZWFibGUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgZGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvd25lcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIG93bmVySWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG5hbWUsIGRhdGUsIHR5cGUsIG93bmVyLCBvd25lcklkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBjbGFzc05hbWU9e3R5cGV9PlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwib3duZXJcIj48TGluayB0bz17YC9mcmllbmRzLyR7b3duZXJJZH1gfT57b3duZXJ9PC9MaW5rPiBpcyB7dHlwZX06PC9oMz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XG4gICAgICAgICAgPGgzPntuYW1lfTwvaDM+XG4gICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZlZWQtZGF0ZVwiPmJ5IHtmb3JtYXREYXRlKGRhdGUpfTwvaDM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBGZWVkU2hhcmVhYmxlIGZyb20gJy4vRmVlZFNoYXJlYWJsZSc7XG5pbXBvcnQgeyBsb2FkRmVlZCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBnZXRGZWVkIH0gZnJvbSAnLi9yZWR1Y2Vycyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vRmVlZC5jc3MnO1xuXG5jbGFzcyBGZWVkIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZmVlZDogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgbG9hZEZlZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmxvYWRGZWVkKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmZWVkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYoIWZlZWQpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuZmVlZH0+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7ZmVlZCAmJiBmZWVkLm1hcCgoc2hhcmVhYmxlLCBpKSA9PiAoXG4gICAgICAgICAgICA8RmVlZFNoYXJlYWJsZVxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHsuLi5zaGFyZWFibGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGZlZWQ6IGdldEZlZWQoc3RhdGUpXG4gIH0pLFxuICB7IGxvYWRGZWVkLCBnZXRGZWVkIH1cbikoRmVlZCk7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSB7XFxuICBtYXJnaW46IDlyZW0gYXV0bztcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgzMzBkZWcsdmFyKC0tc2FmZnJvbiksIHZhcigtLW1hZ2VudGEpKTtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgzMzBkZWcsdmFyKC0tc2FmZnJvbiksIHZhcigtLW1hZ2VudGEpKTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC53cmFwcGVyIHtcXG4gICAgcGFkZGluZzogNHJlbSA3JSAycmVtIDclO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSBoNCB7XFxuICAgIGZvbnQtc2l6ZTogMS41ZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLmNvbnRhY3QtaW5mbyB7XFxuICAgIG1hcmdpbjogMCAwIDFyZW0gM3JlbTtcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAubmFtZS1hbmQtcGljdHVyZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAtMTEwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLm5hbWUtYW5kLXBpY3R1cmUgLnBpY3R1cmUtYnV0dG9uIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgcmlnaHQ6IDA7XFxuICAgICAgYm90dG9tOiAwO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICB3aWR0aDogMnJlbTtcXG4gICAgICBoZWlnaHQ6IDJyZW07XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIGZvbnQtc2l6ZTogMS41ZW07XFxuICAgICAgYWxpZ24tc2VsZjogZmxleC1lbmRcXG4gICAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5uYW1lLWFuZC1waWN0dXJlIC5waWN0dXJlLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG59XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLm5hbWUtYW5kLXBpY3R1cmUgLmVkaXRpbmcge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5wcm9maWxlLXBpY3R1cmUge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGhlaWdodDogMTUwcHg7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXFxcImh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzM1MjczMDQzLzQyMDc1NzkyLTY3MDAzNGJlLTdiMjctMTFlOC05OTUwLTFmODhlZmM0OTAyYS5wbmdcXFwiKSA1MCUgNTAlIG5vLXJlcGVhdDtcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAubmFtZSB7XFxuICAgIG1hcmdpbjogMS4zcmVtIDAgMCAwLjZyZW07XFxuICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5zYXZlLWJ1dHRvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1pZC1ncmF5KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGhlaWdodDogMS41cmVtO1xcbiAgICBwYWRkaW5nOiAwIDAuM3JlbVxcbiAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5zYXZlLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbn1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAuYnV0dG9uLWFuZC1oZWFkaW5nIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAuYnV0dG9uLWFuZC1oZWFkaW5nIGJ1dHRvbiB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgIHdpZHRoOiAycmVtO1xcbiAgICAgIGhlaWdodDogMnJlbTtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZm9udC1zaXplOiAxLjVlbTtcXG4gICAgICBtYXJnaW46IDAgMC41cmVtIDFyZW0gMFxcbiAgICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLmJ1dHRvbi1hbmQtaGVhZGluZyBidXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxufVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5idXR0b24tYW5kLWhlYWRpbmcgLmFkZC1idXR0b24ge1xcbiAgICAgIGZvbnQtc2l6ZTogMS44cmVtO1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjhyZW07XFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5idXR0b24tYW5kLWhlYWRpbmcgLmVkaXRpbmcge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IGZvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IGlucHV0IHtcXG4gICAgd2lkdGg6IDEycmVtO1xcbiAgICBoZWlnaHQ6IDEuNXJlbTtcXG4gICAgcGFkZGluZzogMCAwLjJyZW07XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbWlkLWdyYXkpO1xcbiAgICBmb250LXNpemU6IDFlbTtcXG4gICAgbWFyZ2luOiAwIDAuNXJlbTtcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAuYXZhaWxhYmlsaXR5LWZvcm0ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAuYXZhaWxhYmlsaXR5LWZvcm0gaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICAgICAgd2lkdGg6IC13ZWJraXQtZml0LWNvbnRlbnQ7XFxuICAgICAgd2lkdGg6IC1tb3otZml0LWNvbnRlbnQ7XFxuICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIG1hcmdpbjogMCAwLjVyZW0gMCAwO1xcbiAgICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLmF2YWlsYWJpbGl0eS1mb3JtIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICAgICAgd2lkdGg6IDYwJTtcXG4gICAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5hdmFpbGFiaWxpdHktZm9ybSAuY2hlY2tib3gge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICAgIH1cXG4gIC5fMjVZdkNPWDNUUm4wa1VNWHltMXBROSAuYXZhaWxhYmlsaXR5LWZvcm0gYnV0dG9uIHtcXG4gICAgICBtYXJnaW46IDAuNXJlbSAwO1xcbiAgICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLmF2YWlsYWJpbGl0eS1pbmZvIHtcXG4gICAgbWFyZ2luOiAwIDAgMXJlbSAzcmVtO1xcbiAgfVxcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IC5hdmFpbGFiaWxpdHktaW5mbyBwIHtcXG4gICAgICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgICB9XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkgLm5vdGVzLWhlYWRpbmcge1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICBmb250LXNpemU6IDEuMmVtO1xcbiAgfVxcbkBtZWRpYSAobWluLXdpZHRoOiA3MzBweCkge1xcbiAgLl8yNVl2Q09YM1RSbjBrVU1YeW0xcFE5IHtcXG4gICAgd2lkdGg6IDc1JTtcXG4gIH1cXG59XFxuQG1lZGlhIChtaW4td2lkdGg6IDkwMHB4KSB7XFxuICAuXzI1WXZDT1gzVFJuMGtVTVh5bTFwUTkge1xcbiAgICB3aWR0aDogNjc1cHg7XFxuICB9XFxufVwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS92aWN0b3IvcHJvamVjdHMvZnJpZW5kc2hpcC1hcHAvZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9Qcm9maWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixtRUFBbUU7RUFBbkUsbUVBQW1FO0VBQ25FLG1CQUFtQjtFQUNuQixjQUFjO0NBaUlmO0VBaElDO0lBQ0UseUJBQXlCO0lBQ3pCLHdCQUF3QjtHQUN6QjtFQUNEO0lBQ0UsaUJBQWlCO0lBQ2pCLG9CQUFvQjtHQUNyQjtFQUNEO0lBQ0Usc0JBQXNCO0dBQ3ZCO0VBQ0Q7SUFDRSxtQkFBbUI7SUFDbkIsWUFBWTtJQUNaLGNBQWM7SUFDZCxvQkFBb0I7R0FtQnJCO0VBbEJDO01BQ0Usb0NBQW9DO01BQXBDLG9DQUFvQztNQUNwQyxtQkFBbUI7TUFDbkIsU0FBUztNQUNULFVBQVU7TUFDVixhQUFhO01BQ2IsWUFBWTtNQUNaLGFBQWE7TUFDYixhQUFhO01BQ2IsaUJBQWlCO01BQ2pCLG9CQUFxQjtLQUl0QjtFQUhDO0VBQ0Usc0NBQXNDO0VBQXRDLHNDQUFzQztDQUN2QztFQUVIO01BQ0Usc0NBQXNDO01BQXRDLHNDQUFzQztLQUN2QztFQUVIO0lBQ0UsbUJBQW1CO0lBQ25CLGNBQWM7SUFDZCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLDBJQUEwSTtHQUMzSTtFQUNEO0lBQ0UsMEJBQTBCO0lBQzFCLGVBQWU7R0FDaEI7RUFDRDtJQUNFLGtDQUFrQztJQUFsQyxrQ0FBa0M7SUFDbEMsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixlQUFlO0lBQ2YsaUJBQWtCO0dBSW5CO0VBSEM7RUFDRSxvQ0FBb0M7RUFBcEMsb0NBQW9DO0NBQ3JDO0VBRUg7SUFDRSxjQUFjO0lBQ2Qsb0JBQW9CO0dBcUJyQjtFQXBCQztNQUNFLG9DQUFvQztNQUFwQyxvQ0FBb0M7TUFDcEMsYUFBYTtNQUNiLFlBQVk7TUFDWixhQUFhO01BQ2IsYUFBYTtNQUNiLGlCQUFpQjtNQUNqQix1QkFBd0I7S0FJekI7RUFIQztFQUNFLHNDQUFzQztFQUF0QyxzQ0FBc0M7Q0FDdkM7RUFFSDtNQUNFLGtCQUFrQjtNQUNsQixvQkFBb0I7TUFDcEIsaUJBQWlCO0tBQ2xCO0VBQ0Q7TUFDRSxzQ0FBc0M7TUFBdEMsc0NBQXNDO0tBQ3ZDO0VBRUg7SUFDRSxjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLG9CQUFvQjtHQUNyQjtFQUNEO0lBQ0UsYUFBYTtJQUNiLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0NBQWtDO0lBQWxDLGtDQUFrQztJQUNsQyxlQUFlO0lBQ2YsaUJBQWlCO0dBQ2xCO0VBQ0Q7SUFDRSxlQUFlO0dBaUJoQjtFQWhCQztNQUNFLDJCQUFtQjtNQUFuQix3QkFBbUI7TUFBbkIsbUJBQW1CO01BQ25CLGVBQWU7TUFDZixxQkFBcUI7S0FDdEI7RUFDRDtNQUNFLFdBQVc7S0FDWjtFQUNEO01BQ0UsY0FBYztNQUNkLG9CQUFvQjtNQUNwQixzQkFBc0I7S0FDdkI7RUFDRDtNQUNFLGlCQUFpQjtLQUNsQjtFQUVIO0lBQ0Usc0JBQXNCO0dBSXZCO0VBSEM7TUFDRSxpQkFBaUI7S0FDbEI7RUFFSDtJQUNFLGlCQUFpQjtJQUNqQixpQkFBaUI7R0FDbEI7QUFDRDtFQS9IRjtJQWdJSSxXQUFXO0dBS2Q7Q0FKRTtBQUNEO0VBbElGO0lBbUlJLGFBQWE7R0FFaEI7Q0FERVwiLFwiZmlsZVwiOlwiUHJvZmlsZS5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5wcm9maWxlKSB7XFxuICBtYXJnaW46IDlyZW0gYXV0bztcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgzMzBkZWcsdmFyKC0tc2FmZnJvbiksIHZhcigtLW1hZ2VudGEpKTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICAud3JhcHBlciB7XFxuICAgIHBhZGRpbmc6IDRyZW0gNyUgMnJlbSA3JTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICB9XFxuICBoNCB7XFxuICAgIGZvbnQtc2l6ZTogMS41ZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICB9XFxuICAuY29udGFjdC1pbmZvIHtcXG4gICAgbWFyZ2luOiAwIDAgMXJlbSAzcmVtO1xcbiAgfVxcbiAgLm5hbWUtYW5kLXBpY3R1cmUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogLTExMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAucGljdHVyZS1idXR0b24ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICByaWdodDogMDtcXG4gICAgICBib3R0b206IDA7XFxuICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgIHdpZHRoOiAycmVtO1xcbiAgICAgIGhlaWdodDogMnJlbTtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZm9udC1zaXplOiAxLjVlbTtcXG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG4gICAgICAmOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC5lZGl0aW5nIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICB9XFxuICB9XFxuICAucHJvZmlsZS1waWN0dXJlIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBoZWlnaHQ6IDE1MHB4O1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgYmFja2dyb3VuZDogdXJsKFxcXCJodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8zNTI3MzA0My80MjA3NTc5Mi02NzAwMzRiZS03YjI3LTExZTgtOTk1MC0xZjg4ZWZjNDkwMmEucG5nXFxcIikgNTAlIDUwJSBuby1yZXBlYXQ7XFxuICB9XFxuICAubmFtZSB7XFxuICAgIG1hcmdpbjogMS4zcmVtIDAgMCAwLjZyZW07XFxuICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgfVxcbiAgLnNhdmUtYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGhlaWdodDogMS41cmVtO1xcbiAgICBwYWRkaW5nOiAwIDAuM3JlbTtcXG4gICAgJjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgIH1cXG4gIH1cXG4gIC5idXR0b24tYW5kLWhlYWRpbmcge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBidXR0b24ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICB3aWR0aDogMnJlbTtcXG4gICAgICBoZWlnaHQ6IDJyZW07XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIGZvbnQtc2l6ZTogMS41ZW07XFxuICAgICAgbWFyZ2luOiAwIDAuNXJlbSAxcmVtIDA7XFxuICAgICAgJjpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAuYWRkLWJ1dHRvbiB7XFxuICAgICAgZm9udC1zaXplOiAxLjhyZW07XFxuICAgICAgbGluZS1oZWlnaHQ6IDEuOHJlbTtcXG4gICAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICB9XFxuICAgIC5lZGl0aW5nIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICB9XFxuICB9XFxuICBmb3JtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIH1cXG4gIGlucHV0IHtcXG4gICAgd2lkdGg6IDEycmVtO1xcbiAgICBoZWlnaHQ6IDEuNXJlbTtcXG4gICAgcGFkZGluZzogMCAwLjJyZW07XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgZm9udC1zaXplOiAxZW07XFxuICAgIG1hcmdpbjogMCAwLjVyZW07XFxuICB9XFxuICAuYXZhaWxhYmlsaXR5LWZvcm0ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIG1hcmdpbjogMCAwLjVyZW0gMCAwO1xcbiAgICB9XFxuICAgIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICAgICAgd2lkdGg6IDYwJTtcXG4gICAgfVxcbiAgICAuY2hlY2tib3gge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICAgIH1cXG4gICAgYnV0dG9uIHtcXG4gICAgICBtYXJnaW46IDAuNXJlbSAwO1xcbiAgICB9XFxuICB9XFxuICAuYXZhaWxhYmlsaXR5LWluZm8ge1xcbiAgICBtYXJnaW46IDAgMCAxcmVtIDNyZW07XFxuICAgIHAge1xcbiAgICAgIG1hcmdpbi10b3A6IDFyZW07XFxuICAgIH1cXG4gIH1cXG4gIC5ub3Rlcy1oZWFkaW5nIHtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgZm9udC1zaXplOiAxLjJlbTtcXG4gIH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA3MzBweCkge1xcbiAgICB3aWR0aDogNzUlO1xcbiAgfVxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDkwMHB4KSB7XFxuICAgIHdpZHRoOiA2NzVweDtcXG4gIH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcInByb2ZpbGVcIjogXCJfMjVZdkNPWDNUUm4wa1VNWHltMXBROVwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9Qcm9maWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL1Byb2ZpbGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vUHJvZmlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gaDQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gdWwge1xcbiAgICBtYXJnaW46IDAgMCAycmVtIDNyZW07XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gbGkge1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbiAgICBtYXJnaW4tdG9wOiAwLjhyZW07XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gLnJlbW92ZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBmb250LXNpemU6IDJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG4gICAgbWFyZ2luOiAwIDAuNXJlbTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudFxcbiAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5yZW1vdmU6aG92ZXIge1xcbiAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbn1cXG4gIC5fMVZaMVZnWFBLZThGOVN4SUdGMmdoTSAuc2hhcmVhYmxlLWluZm8ge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gLmhpZ2gtcHJpb3JpdHkge1xcbiAgICBjb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWdlbnRhKVxcbiAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5oaWdoLXByaW9yaXR5OjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFwyNzZGICAgXFxcXDI3NkYgICBcXFxcMjc2RlxcXCI7XFxuICBjb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICBjb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxufVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5hY2Nlc3NpYmxlLXByaW9yaXR5IHtcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgIGxlZnQ6LTEwMDAwcHg7XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gLnNoYXJlYWJsZS1mb3JtIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogM2ZyIDJmcjtcXG4gICAgZ3JpZC1nYXA6IDFyZW07XFxuICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJkZXNjcmlwdGlvbiBkZXNjcmlwdGlvblxcXCIgXFxcImRhdGUgcHJpb3JpdHlcXFwiXFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gLmRlc2NyaXB0aW9uIHtcXG4gICAgZ3JpZC1hcmVhOiBkZXNjcmlwdGlvbjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIH1cXG4gIC5fMVZaMVZnWFBLZThGOVN4SUdGMmdoTSAuZGVzY3JpcHRpb24gaW5wdXQge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcXG4gICAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5kYXRlIHtcXG4gICAgZ3JpZC1hcmVhOiBkYXRlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5kYXRlIGlucHV0IHtcXG4gICAgICB3aWR0aDogYXV0bztcXG4gICAgICB3aWR0aDogaW5pdGlhbDtcXG4gICAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIC5wcmlvcml0eSB7XFxuICAgIGdyaWQtYXJlYTogcHJpb3JpdHk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XFxuICB9XFxuICAuXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE0gLnByaW9yaXR5IGlucHV0IHtcXG4gICAgICB3aWR0aDogYXV0bztcXG4gICAgICB3aWR0aDogaW5pdGlhbDtcXG4gICAgfVxcbiAgLl8xVloxVmdYUEtlOEY5U3hJR0YyZ2hNIGJ1dHRvbiB7XFxuICAgIGdyaWQtYXJlYTogcHJpb3JpdHk7XFxuICAgIGp1c3RpZnktc2VsZjogZmxleC1lbmQ7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICB3aWR0aDogLW1vei1maXQtY29udGVudDtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgfVwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS92aWN0b3IvcHJvamVjdHMvZnJpZW5kc2hpcC1hcHAvZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvcHJvZmlsZS9TaGFyZWFibGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsbUJBQW1CO0NBNkVwQjtFQTVFQztJQUNFLHNCQUFzQjtHQUN2QjtFQUNEO0lBQ0Usc0JBQXNCO0dBQ3ZCO0VBQ0Q7SUFDRSxpQkFBaUI7SUFDakIsbUJBQW1CO0dBQ3BCO0VBQ0Q7SUFDRSxtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYiw2QkFBOEI7R0FJL0I7RUFIQztFQUNFLHNCQUFzQjtFQUF0QixzQkFBc0I7Q0FDdkI7RUFFSDtJQUNFLG1CQUFtQjtHQUNwQjtFQUNEO0lBQ0Usc0JBQXNCO0lBQXRCLHFCQUFzQjtHQU12QjtFQUxDO0VBQ0UsaUNBQTZCO0VBQzdCLHNCQUFzQjtFQUF0QixzQkFBc0I7RUFDdEIsc0JBQXNCO0NBQ3ZCO0VBRUg7SUFDRSxrQkFBa0I7SUFDbEIsY0FBYztHQUNmO0VBQ0Q7SUFDRSxzQkFBc0I7SUFDdEIsY0FBYztJQUNkLDRCQUE0QjtJQUM1QiwrQkFBK0I7SUFDL0IsZUFBZTtJQUNmLDhEQUE4RDtHQUMvRDtFQUNEO0lBQ0UsdUJBQXVCO0lBQ3ZCLGNBQWM7SUFDZCxvQkFBb0I7R0FLckI7RUFKQztNQUNFLFlBQVk7TUFDWixnQkFBZ0I7S0FDakI7RUFFSDtJQUNFLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2Qsb0JBQW9CO0dBSXJCO0VBSEM7TUFDRSxZQUFlO01BQWYsZUFBZTtLQUNoQjtFQUVIO0lBQ0Usb0JBQW9CO0lBQ3BCLGNBQWM7SUFDZCxvQkFBb0I7SUFDcEIsdUJBQXVCO0dBSXhCO0VBSEM7TUFDRSxZQUFlO01BQWYsZUFBZTtLQUNoQjtFQUVIO0lBQ0Usb0JBQW9CO0lBQ3BCLHVCQUF1QjtJQUN2QiwyQkFBbUI7SUFBbkIsd0JBQW1CO0lBQW5CLG1CQUFtQjtHQUNwQlwiLFwiZmlsZVwiOlwiU2hhcmVhYmxlLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLnNoYXJlYWJsZSkge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaDQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICB9XFxuICB1bCB7XFxuICAgIG1hcmdpbjogMCAwIDJyZW0gM3JlbTtcXG4gIH1cXG4gIGxpIHtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgbWFyZ2luLXRvcDogMC44cmVtO1xcbiAgfVxcbiAgLnJlbW92ZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBmb250LXNpemU6IDJlbTtcXG4gICAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcXG4gICAgbWFyZ2luOiAwIDAuNXJlbTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgJjpob3ZlciB7XFxuICAgICAgY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICB9XFxuICB9XFxuICAuc2hhcmVhYmxlLWluZm8ge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB9XFxuICAuaGlnaC1wcmlvcml0eSB7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgJjo6YmVmb3JlIHtcXG4gICAgICBjb250ZW50OiBcXFwiXFxcXDI3NmYgXFxcXDI3NmYgXFxcXDI3NmZcXFwiO1xcbiAgICAgIGNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICAgIH1cXG4gIH1cXG4gIC5hY2Nlc3NpYmxlLXByaW9yaXR5IHtcXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XFxuICAgIGxlZnQ6LTEwMDAwcHg7XFxuICB9XFxuICAuc2hhcmVhYmxlLWZvcm0ge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzZnIgMmZyO1xcbiAgICBncmlkLWdhcDogMXJlbTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXFxcImRlc2NyaXB0aW9uIGRlc2NyaXB0aW9uXFxcIiBcXFwiZGF0ZSBwcmlvcml0eVxcXCJcXG4gIH1cXG4gIC5kZXNjcmlwdGlvbiB7XFxuICAgIGdyaWQtYXJlYTogZGVzY3JpcHRpb247XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGlucHV0IHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XFxuICAgIH1cXG4gIH1cXG4gIC5kYXRlIHtcXG4gICAgZ3JpZC1hcmVhOiBkYXRlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBpbnB1dCB7XFxuICAgICAgd2lkdGg6IGluaXRpYWw7XFxuICAgIH1cXG4gIH1cXG4gIC5wcmlvcml0eSB7XFxuICAgIGdyaWQtYXJlYTogcHJpb3JpdHk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQ7XFxuICAgIGlucHV0IHtcXG4gICAgICB3aWR0aDogaW5pdGlhbDtcXG4gICAgfVxcbiAgfVxcbiAgYnV0dG9uIHtcXG4gICAgZ3JpZC1hcmVhOiBwcmlvcml0eTtcXG4gICAganVzdGlmeS1zZWxmOiBmbGV4LWVuZDtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwic2hhcmVhYmxlXCI6IFwiXzFWWjFWZ1hQS2U4RjlTeElHRjJnaE1cIlxufTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vU2hhcmVhYmxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL1NoYXJlYWJsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9TaGFyZWFibGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbG9jYWxpemVEYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXJlYWJsZUZvcm0gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzaGFyZWFibGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb25Db21wbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIG5hbWU6ICcnLFxuICAgIGRhdGU6ICcnLFxuICAgIHByaW9yaXR5OiBmYWxzZVxuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IFt0YXJnZXQubmFtZV06IHRhcmdldC52YWx1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IHNoYXJlYWJsZVR5cGUsIG9uQ29tcGxldGUgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHsgbmFtZSwgZGF0ZSwgcHJpb3JpdHkgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYocHJpb3JpdHkpIHtcbiAgICAgIHByaW9yaXR5ID0gMjtcbiAgICB9XG4gICAgaWYoZGF0ZSkge1xuICAgICAgZGF0ZSA9IGxvY2FsaXplRGF0ZShkYXRlKTtcbiAgICB9XG4gICAgY29uc3Qgc3VibWlzc2lvbiA9IHsgbmFtZSwgZGF0ZSwgcHJpb3JpdHksIHR5cGU6IHNoYXJlYWJsZVR5cGUgfTtcbiAgICBvbkNvbXBsZXRlKHN1Ym1pc3Npb24pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbmFtZTogJycsXG4gICAgICBkYXRlOiAnJyxcbiAgICAgIHByaW9yaXR5OiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFjdGlvbiwgc2hhcmVhYmxlVHlwZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG5hbWUsIGRhdGUsIHByaW9yaXR5IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInNoYXJlYWJsZS1mb3JtXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXNjcmlwdGlvblwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtgJHtzaGFyZWFibGVUeXBlfS1uYW1lYH0+RGVzY3JpcHRpb246PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgaWQ9e2Ake3NoYXJlYWJsZVR5cGV9LW5hbWVgfSB0eXBlPVwidGV4dFwiIG5hbWU9XCJuYW1lXCIgdmFsdWU9e25hbWV9IHJlcXVpcmVkIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhdGVcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17YCR7c2hhcmVhYmxlVHlwZX0tZGF0ZWB9PkJ5IChvcHRpb25hbCk6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgaWQ9e2Ake3NoYXJlYWJsZVR5cGV9LWRhdGVgfSB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJkYXRlXCIgdmFsdWU9e2RhdGV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8L2Rpdj5cbiAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcmlvcml0eVwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtgJHtzaGFyZWFibGVUeXBlfS1wcmlvcml0eWB9PlVyZ2VudD88L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCBpZD17YCR7c2hhcmVhYmxlVHlwZX0tcHJpb3JpdHlgfSB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicHJpb3JpdHlcIiBjaGVja2VkPXtwcmlvcml0eX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwic2F2ZS1idXR0b25cIiB0eXBlPVwic3VibWl0XCI+e2FjdGlvbn08L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGFkZFNoYXJlYWJsZSwgcmVtb3ZlU2hhcmVhYmxlIH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCBTaGFyZWFibGVGb3JtIGZyb20gJy4vU2hhcmVhYmxlRm9ybSc7XG5pbXBvcnQgeyBmb3JtYXREYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0dGVycyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vU2hhcmVhYmxlLmNzcyc7XG5cbmNsYXNzIFNoYXJlYWJsZSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGhlYWRpbmc6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzaGFyZWFibGVUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2hhcmVhYmxlOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBhZGRTaGFyZWFibGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVtb3ZlU2hhcmVhYmxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGlzVXNlcjogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBlZGl0aW5nOiBmYWxzZVxuICB9O1xuXG4gIGhhbmRsZUZvcm1Ub2dnbGUgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4gKHsgZWRpdGluZzogIXByZXZTdGF0ZS5lZGl0aW5nIH0pKTtcbiAgfTtcblxuICBoYW5kbGVDbGljayA9IChpZCwgc2hhcmVhYmxlVHlwZSkgPT4ge1xuICAgIGlmKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3VcXCdkIGxpa2UgdG8gZGVsZXRlIHRoaXMgc2hhcmVhYmxlPycpKSB0aGlzLnByb3BzLnJlbW92ZVNoYXJlYWJsZShpZCwgc2hhcmVhYmxlVHlwZSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGVhZGluZywgc2hhcmVhYmxlVHlwZSwgc2hhcmVhYmxlLCBhZGRTaGFyZWFibGUsIGlzVXNlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGVkaXRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuc2hhcmVhYmxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b24tYW5kLWhlYWRpbmdcIj5cbiAgICAgICAgICB7aXNVc2VyICYmIDxidXR0b24gY2xhc3NOYW1lPXtlZGl0aW5nID8gJ2VkaXRpbmcgYWRkLWJ1dHRvbicgOiAnYWRkLWJ1dHRvbid9IG9uQ2xpY2s9e3RoaXMuaGFuZGxlRm9ybVRvZ2dsZX0+JiM2NTI5MTs8L2J1dHRvbj59ICAgICBcbiAgICAgICAgICA8aDQ+e2hlYWRpbmd9OjwvaDQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aXNVc2VyICYmIGVkaXRpbmcgJiYgPFNoYXJlYWJsZUZvcm0gc2hhcmVhYmxlVHlwZT17c2hhcmVhYmxlVHlwZX0gYWN0aW9uPVwiQUREXCIgb25Db21wbGV0ZT17YWRkU2hhcmVhYmxlfS8+fVxuICAgICAgICA8dWw+XG4gICAgICAgICAge3NoYXJlYWJsZS5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICA8bGkga2V5PXtpdGVtLl9pZH0+XG4gICAgICAgICAgICAgIHshIWl0ZW0ucHJpb3JpdHkgJiYgPHNwYW4gY2xhc3NOYW1lPVwiYWNjZXNzaWJsZS1wcmlvcml0eVwiPnVyZ2VudDwvc3Bhbj59XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17aXRlbS5wcmlvcml0eSA/ICdoaWdoLXByaW9yaXR5IHNoYXJlYWJsZS1pbmZvJyA6ICdzaGFyZWFibGUtaW5mbyd9PlxuICAgICAgICAgICAgICAgIHtpdGVtLm5hbWV9XG4gICAgICAgICAgICAgICAge2l0ZW0uZGF0ZSAmJiBgIChieSAke2Zvcm1hdERhdGUoaXRlbS5kYXRlKX0pYH1cbiAgICAgICAgICAgICAgICB7aXNVc2VyICYmIDxidXR0b24gY2xhc3NOYW1lPVwicmVtb3ZlXCIgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGljayhpdGVtLl9pZCwgc2hhcmVhYmxlVHlwZSl9PiZ0aW1lczs8L2J1dHRvbj59XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBudWxsLFxuICB7IGFkZFNoYXJlYWJsZSwgcmVtb3ZlU2hhcmVhYmxlIH1cbikoU2hhcmVhYmxlKTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICcuLi8uLi91dGlscy9mb3JtYXR0ZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF5UGlja2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBoYW5kbGVDaGVja2JveENoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkYXlzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoYW5kbGVDaGVja2JveENoYW5nZSwgZGF5cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGRheU5hbWVzID0gT2JqZWN0LmtleXMoZGF5cyk7XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxGcmFnbWVudD5cbiAgICAgICAge2RheU5hbWVzLm1hcChkYXkgPT4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hlY2tib3hcIiBrZXk9e2RheX0+XG4gICAgICAgICAgICA8aW5wdXQgb25DaGFuZ2U9e2V2ZW50ID0+IGhhbmRsZUNoZWNrYm94Q2hhbmdlKGV2ZW50KX0gaWQ9e2RheX0gdHlwZT0nY2hlY2tib3gnIG5hbWU9e2RheX0gY2hlY2tlZD17ZGF5c1tkYXldfS8+XG4gICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17ZGF5fT57Y2FwaXRhbGl6ZShkYXkpfTwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVwZGF0ZVByb2ZpbGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IERheVBpY2tlciBmcm9tICcuL0RheVBpY2tlcic7XG5cbmNsYXNzIEF2YWlsYWJpbGl0eUZvcm0gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB1cGRhdGVQcm9maWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRG9uZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGRheXM6IHsgXG4gICAgICBzdW5kYXk6IGZhbHNlLFxuICAgICAgbW9uZGF5OiBmYWxzZSxcbiAgICAgIHR1ZXNkYXk6IGZhbHNlLFxuICAgICAgd2VkbmVzZGF5OiBmYWxzZSxcbiAgICAgIHRodXJzZGF5OiBmYWxzZSxcbiAgICAgIGZyaWRheTogZmFsc2UsXG4gICAgICBzYXR1cmRheTogZmFsc2UsXG4gICAgfSxcbiAgICBub3RlczogJydcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIGNvbnN0IHsgdHlwZSwgbmFtZSwgY2hlY2tlZCwgdmFsdWUgfSA9IHRhcmdldDtcbiAgICB0eXBlID09PSAnY2hlY2tib3gnID9cbiAgICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7IGRheXM6IHsgLi4ucHJldlN0YXRlLmRheXMsIFtuYW1lXTogY2hlY2tlZCB9IH0pKVxuICAgICAgOiB0aGlzLnNldFN0YXRlKHsgW25hbWVdOiB2YWx1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGRheXMsIG5vdGVzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGRheUFycmF5ID0gT2JqZWN0LmtleXMoZGF5cyk7XG4gICAgY29uc3QgY2hlY2tlZERheXMgPSBkYXlBcnJheS5maWx0ZXIoZGF5ID0+IGRheXNbZGF5XSk7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVQcm9maWxlKHtcbiAgICAgIGF2YWlsYWJpbGl0eToge1xuICAgICAgICBkYXlzOiBjaGVja2VkRGF5cyxcbiAgICAgICAgbm90ZXNcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnByb3BzLm9uRG9uZSgnZWRpdGluZ0F2YWlsYWJpbGl0eScpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG5vdGVzLCBkYXlzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cImF2YWlsYWJpbGl0eS1mb3JtXCIgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgPERheVBpY2tlciBoYW5kbGVDaGVja2JveENoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IGRheXM9e2RheXN9Lz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJub3Rlc1wiPk5vdGVzOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IGlkPVwibm90ZXNcIiBuYW1lPVwibm90ZXNcIiB0eXBlPVwidGV4dFwiIHZhbHVlPXtub3Rlc30vPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInNhdmUtYnV0dG9uXCIgdHlwZT1cInN1Ym1pdFwiPlNBVkU8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG51bGwsXG4gIHsgdXBkYXRlUHJvZmlsZSB9XG4pKEF2YWlsYWJpbGl0eUZvcm0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVwZGF0ZVByb2ZpbGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuXG5jbGFzcyBDb250YWN0Rm9ybSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHVwZGF0ZVByb2ZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25Eb25lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgY29udGFjdDogJydcbiAgfTtcbiBcbiAgaGFuZGxlQ2hhbmdlID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgY29udGFjdDogdGFyZ2V0LnZhbHVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9IGV2ZW50ID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMudXBkYXRlUHJvZmlsZSh0aGlzLnN0YXRlKTtcbiAgICB0aGlzLnByb3BzLm9uRG9uZSgnZWRpdGluZ0NvbnRhY3QnKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb250YWN0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY29udGFjdFwiPkhvdyBzaG91bGQgZnJpZW5kcyBjb250YWN0IHlvdT88L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjb250YWN0XCIgdHlwZT1cInRleHRcIiB2YWx1ZT17Y29udGFjdH0gcmVxdWlyZWQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwic2F2ZS1idXR0b25cIiB0eXBlPVwic3VibWl0XCI+U0FWRTwvYnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbnVsbCxcbiAgeyB1cGRhdGVQcm9maWxlIH1cbikoQ29udGFjdEZvcm0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVwZGF0ZVByb2ZpbGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuXG5jbGFzcyBQaWN0dXJlRm9ybSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHVwZGF0ZVByb2ZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25Eb25lOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgcGljdHVyZVVybDogJydcbiAgfTtcbiBcbiAgaGFuZGxlQ2hhbmdlID0gKHsgdGFyZ2V0IH0pID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgcGljdHVyZVVybDogdGFyZ2V0LnZhbHVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9IGV2ZW50ID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMudXBkYXRlUHJvZmlsZSh0aGlzLnN0YXRlKTtcbiAgICB0aGlzLnByb3BzLm9uRG9uZSgnZWRpdGluZ1BpY3R1cmUnKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwaWN0dXJlVXJsIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGljdHVyZVwiPkVudGVyIGFuIEltYWdlIFVSTDo8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9XCJwaWN0dXJlXCIgdHlwZT1cInRleHRcIiByZXF1aXJlZCB2YWx1ZT17cGljdHVyZVVybH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwic2F2ZS1idXR0b25cIiB0eXBlPVwic3VibWl0XCI+U0FWRTwvYnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbnVsbCxcbiAgeyB1cGRhdGVQcm9maWxlIH1cbikoUGljdHVyZUZvcm0pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldFByb2ZpbGUsIGdldEdpdmluZ0FycmF5LCBnZXRSZXF1ZXN0aW5nQXJyYXkgfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGxvYWRQcm9maWxlLCBjbGVhclByb2ZpbGUgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IFBpY3R1cmVGb3JtIGZyb20gJy4vUGljdHVyZUZvcm0nO1xuaW1wb3J0IENvbnRhY3RGb3JtIGZyb20gJy4vQ29udGFjdEZvcm0nO1xuaW1wb3J0IEF2YWlsYWJpbGl0eUZvcm0gZnJvbSAnLi9BdmFpbGFiaWxpdHlGb3JtJztcbmltcG9ydCBTaGFyZWFibGUgZnJvbSAnLi9TaGFyZWFibGUnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL1Byb2ZpbGUuY3NzJztcblxuY2xhc3MgUHJvZmlsZSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgaXNVc2VyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2FkUHJvZmlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGVhclByb2ZpbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcHJvZmlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBnaXZpbmc6IFByb3BUeXBlcy5hcnJheSxcbiAgICByZXF1ZXN0aW5nOiBQcm9wVHlwZXMuYXJyYXlcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBlZGl0aW5nUGljdHVyZTogZmFsc2UsXG4gICAgZWRpdGluZ0NvbnRhY3Q6IGZhbHNlLFxuICAgIGVkaXRpbmdBdmFpbGFiaWxpdHk6IGZhbHNlXG4gIH07XG5cbiAgaGFuZGxlUHJvZmlsZUxvYWQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBtYXRjaCwgaXNVc2VyLCBsb2FkUHJvZmlsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpc1VzZXIgPyBsb2FkUHJvZmlsZSgpIDogbG9hZFByb2ZpbGUobWF0Y2gucGFyYW1zLmlkKTtcbiAgfTtcbiBcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5oYW5kbGVQcm9maWxlTG9hZCgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHsgbG9jYXRpb24gfSkge1xuICAgIGNvbnN0IGxvY2F0aW9uUHJlVXBkYXRlID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgY29uc3QgbG9jYXRpb25Qb3N0VXBkYXRlID0gdGhpcy5wcm9wcy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICBpZihsb2NhdGlvblByZVVwZGF0ZSA9PT0gbG9jYXRpb25Qb3N0VXBkYXRlKSByZXR1cm47XG4gICAgdGhpcy5wcm9wcy5jbGVhclByb2ZpbGUoKTtcbiAgICB0aGlzLmhhbmRsZVByb2ZpbGVMb2FkKCk7XG4gIH1cblxuICBoYW5kbGVGb3JtVG9nZ2xlID0ga2V5ID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoeyBba2V5XTogIXByZXZTdGF0ZVtrZXldIH0pKTtcbiAgfTtcblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmNsZWFyUHJvZmlsZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvZmlsZSwgZ2l2aW5nLCByZXF1ZXN0aW5nLCBpc1VzZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBlZGl0aW5nUGljdHVyZSwgZWRpdGluZ0NvbnRhY3QsIGVkaXRpbmdBdmFpbGFiaWxpdHkgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZighcHJvZmlsZSkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIHBpY3R1cmVVcmwsIGF2YWlsYWJpbGl0eSwgY29udGFjdCB9ID0gcHJvZmlsZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9e3N0eWxlcy5wcm9maWxlfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYW1lLWFuZC1waWN0dXJlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGUtcGljdHVyZVwiIHN0eWxlPXtwaWN0dXJlVXJsICYmIHsgYmFja2dyb3VuZDogYHVybCgke3BpY3R1cmVVcmx9KSA1MCUgNTAlIG5vLXJlcGVhdGAgfX0+XG4gICAgICAgICAgICAgIHtpc1VzZXIgJiYgPGJ1dHRvbiBjbGFzc05hbWU9e2VkaXRpbmdQaWN0dXJlID8gJ2VkaXRpbmcgcGljdHVyZS1idXR0b24nIDogJ3BpY3R1cmUtYnV0dG9uJ30gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVGb3JtVG9nZ2xlKCdlZGl0aW5nUGljdHVyZScpfT7inI48L2J1dHRvbj59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJuYW1lXCI+e2ZpcnN0TmFtZX0ge2xhc3ROYW1lfTwvaDI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge2lzVXNlciAmJiBlZGl0aW5nUGljdHVyZSAmJiA8UGljdHVyZUZvcm0gb25Eb25lPXt0aGlzLmhhbmRsZUZvcm1Ub2dnbGV9Lz59XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbi1hbmQtaGVhZGluZ1wiPlxuICAgICAgICAgICAge2lzVXNlciAmJiA8YnV0dG9uIGNsYXNzTmFtZT17ZWRpdGluZ0NvbnRhY3QgPyAnZWRpdGluZycgOiB1bmRlZmluZWR9IG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlRm9ybVRvZ2dsZSgnZWRpdGluZ0NvbnRhY3QnKX0+4pyOPC9idXR0b24+fVxuICAgICAgICAgICAgPGg0PlJlYWNoYWJsZSBhdDo8L2g0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHtpc1VzZXIgJiYgZWRpdGluZ0NvbnRhY3QgJiYgPENvbnRhY3RGb3JtIG9uRG9uZT17dGhpcy5oYW5kbGVGb3JtVG9nZ2xlfS8+fVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNvbnRhY3QtaW5mb1wiPntjb250YWN0fTwvcD5cbiAgICAgICAgXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b24tYW5kLWhlYWRpbmdcIj5cbiAgICAgICAgICAgIHtpc1VzZXIgJiYgPGJ1dHRvbiBjbGFzc05hbWU9e2VkaXRpbmdBdmFpbGFiaWxpdHkgPyAnZWRpdGluZycgOiB1bmRlZmluZWR9IG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlRm9ybVRvZ2dsZSgnZWRpdGluZ0F2YWlsYWJpbGl0eScpfT7inI48L2J1dHRvbj59XG4gICAgICAgICAgICA8aDQ+TW9zdCBMaWtlbHkgdG8gQmUgQXZhaWxhYmxlOjwvaDQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAge2lzVXNlciAmJiBlZGl0aW5nQXZhaWxhYmlsaXR5ICYmIDxBdmFpbGFiaWxpdHlGb3JtIG9uRG9uZT17dGhpcy5oYW5kbGVGb3JtVG9nZ2xlfS8+fVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXZhaWxhYmlsaXR5LWluZm9cIj5cbiAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAge2F2YWlsYWJpbGl0eSAmJiBhdmFpbGFiaWxpdHkuZGF5cyAmJiBhdmFpbGFiaWxpdHkuZGF5cy5tYXAoKGl0ZW0sIGkpID0+IDxsaSBrZXk9e2l9PntjYXBpdGFsaXplKGl0ZW0pfTwvbGk+KX1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICB7YXZhaWxhYmlsaXR5ICYmIGF2YWlsYWJpbGl0eS5ub3RlcyAmJiA8cD48c3BhbiBjbGFzc05hbWU9XCJub3Rlcy1oZWFkaW5nXCI+Tm90ZXM6IDwvc3Bhbj57YXZhaWxhYmlsaXR5Lm5vdGVzfTwvcD59XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8U2hhcmVhYmxlIGlzVXNlcj17aXNVc2VyfSBoZWFkaW5nPVwiR2l2aW5nXCIgc2hhcmVhYmxlVHlwZT1cImdpdmluZ1wiIHNoYXJlYWJsZT17Z2l2aW5nfS8+XG4gICAgICAgICAgPFNoYXJlYWJsZSBpc1VzZXI9e2lzVXNlcn0gaGVhZGluZz1cIlJlcXVlc3RpbmdcIiBzaGFyZWFibGVUeXBlPVwicmVxdWVzdGluZ1wiIHNoYXJlYWJsZT17cmVxdWVzdGluZ30vPlxuICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGdpdmluZzogZ2V0R2l2aW5nQXJyYXkoc3RhdGUpLFxuICAgIHJlcXVlc3Rpbmc6IGdldFJlcXVlc3RpbmdBcnJheShzdGF0ZSksXG4gICAgcHJvZmlsZTogZ2V0UHJvZmlsZShzdGF0ZSlcbiAgfSksXG4gIHsgbG9hZFByb2ZpbGUsIGNsZWFyUHJvZmlsZSB9XG4pKFByb2ZpbGUpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyB7XFxuICB3aWR0aDogNzUlO1xcbiAgbWFyZ2luOiAycmVtIGF1dG8gMCBhdXRvO1xcbn1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1uYXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcXG4gIH1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1uYXYgbGkge1xcbiAgICAgIHdpZHRoOiA1MCU7XFxuICAgIH1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1uYXYgYSB7XFxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgIGZvbnQtc2l6ZTogMS4yZW07XFxuICAgICAgcGFkZGluZzogMC41cmVtIDJyZW07XFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgIH1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1saW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSlcXG4gIH1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1saW5rOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxufVxcbiAgLl8yLUE4R2RuLTJMbDNBeksxdHluM1lXIC5zaWduaW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pXFxuICB9XFxuICAuXzItQThHZG4tMkxsM0F6SzF0eW4zWVcgLnNpZ25pbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG59XFxuICAuXzItQThHZG4tMkxsM0F6SzF0eW4zWVcgYS5zaWduaW4ge1xcbiAgcGFkZGluZy10b3A6IDFyZW07XFxufVxcbiAgLl8yLUE4R2RuLTJMbDNBeksxdHluM1lXIGEuc2lnbnVwIHtcXG4gIHBhZGRpbmctdG9wOiAxcmVtO1xcbn1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuc2lnbnVwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWFnZW50YSk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1hZ2VudGEpXFxuICB9XFxuICAuXzItQThHZG4tMkxsM0F6SzF0eW4zWVcgLnNpZ251cDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbn1cXG4gIC5fMi1BOEdkbi0yTGwzQXpLMXR5bjNZVyAuYXV0aC1mb3JtIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDFyZW07XFxuICB9XFxuICAuXzItQThHZG4tMkxsM0F6SzF0eW4zWVcgLmF1dGgtZm9ybSBmb3JtIHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgLl8yLUE4R2RuLTJMbDNBeksxdHluM1lXIC5hdXRoLWVycm9yIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbiAgfVxcbkBtZWRpYSAobWluLXdpZHRoOiA0NzBweCkge1xcbiAgLl8yLUE4R2RuLTJMbDNBeksxdHluM1lXIHtcXG4gICAgd2lkdGg6IDM1MHB4O1xcbiAgfVxcbn1cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvdmljdG9yL3Byb2plY3RzL2ZyaWVuZHNoaXAtYXBwL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2F1dGgvQXV0aC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gseUJBQXlCO0NBMkQxQjtFQTFEQztJQUNFLGNBQWM7SUFDZCwrQkFBK0I7SUFDL0Isc0JBQXNCO0dBWXZCO0VBWEM7TUFDRSxXQUFXO0tBQ1o7RUFDRDtNQUNFLG1CQUFtQjtNQUNuQixpQkFBaUI7TUFDakIscUJBQXFCO01BQ3JCLGlCQUFpQjtNQUNqQixhQUFhO01BQ2IsZUFBZTtLQUNoQjtFQUVIO0lBQ0Usa0NBQWtDO0lBQWxDLGlDQUFrQztHQUluQztFQUhDO0VBQ0Usb0NBQW9DO0VBQXBDLG9DQUFvQztDQUNyQztFQUVIO0lBQ0Usc0NBQXNDO0lBQXRDLHFDQUFzQztHQUl2QztFQUhDO0VBQ0Usc0NBQXNDO0VBQXRDLHNDQUFzQztDQUN2QztFQUdEO0VBQ0Usa0JBQWtCO0NBQ25CO0VBQ0Q7RUFDRSxrQkFBa0I7Q0FDbkI7RUFFSDtJQUNFLGlDQUFpQztJQUFqQyxnQ0FBaUM7R0FJbEM7RUFIQztFQUNFLGlDQUFpQztFQUFqQyxpQ0FBaUM7Q0FDbEM7RUFFSDtJQUNFLFlBQVk7SUFDWixjQUFjO0dBS2Y7RUFKQztNQUNFLFlBQVk7TUFDWix3QkFBd0I7S0FDekI7RUFFSDtJQUNFLG1CQUFtQjtJQUNuQixpQkFBaUI7SUFDakIsaUJBQWlCO0dBQ2xCO0FBQ0Q7RUExREY7SUEyREksYUFBYTtHQUVoQjtDQURFXCIsXCJmaWxlXCI6XCJBdXRoLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6bG9jYWwoLmF1dGgpIHtcXG4gIHdpZHRoOiA3NSU7XFxuICBtYXJnaW46IDJyZW0gYXV0byAwIGF1dG87XFxuICAuYXV0aC1uYXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcXG4gICAgbGkge1xcbiAgICAgIHdpZHRoOiA1MCU7XFxuICAgIH1cXG4gICAgYSB7XFxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgIGZvbnQtc2l6ZTogMS4yZW07XFxuICAgICAgcGFkZGluZzogMC41cmVtIDJyZW07XFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgIH1cXG4gIH1cXG4gIC5hdXRoLWxpbmsge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgICY6aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICB9XFxuICB9XFxuICAuc2lnbmluIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgJjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgfVxcbiAgfVxcbiAgYSB7XFxuICAgICYuc2lnbmluIHtcXG4gICAgICBwYWRkaW5nLXRvcDogMXJlbTtcXG4gICAgfSBcXG4gICAgJi5zaWdudXAge1xcbiAgICAgIHBhZGRpbmctdG9wOiAxcmVtO1xcbiAgICB9IFxcbiAgfVxcbiAgLnNpZ251cCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICAmOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG4gICAgfVxcbiAgfVxcbiAgLmF1dGgtZm9ybSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICBmb3JtIHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgfVxcbiAgLmF1dGgtZXJyb3Ige1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IDFyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICB9XFxuICBAbWVkaWEgKG1pbi13aWR0aDogNDcwcHgpIHtcXG4gICAgd2lkdGg6IDM1MHB4O1xcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiYXV0aFwiOiBcIl8yLUE4R2RuLTJMbDNBeksxdHluM1lXXCJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0F1dGguY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQXV0aC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9BdXRoLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzNwLVYtSENpd3ljZDdFa2U0RmxKUGIgLmlucHV0LXdyYXBwZXIge1xcbiAgICB3aWR0aDogLXdlYmtpdC1maXQtY29udGVudDtcXG4gICAgd2lkdGg6IC1tb3otZml0LWNvbnRlbnQ7XFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuICAgIC5fM3AtVi1IQ2l3eWNkN0VrZTRGbEpQYiAuaW5wdXQtd3JhcHBlciBsYWJlbCB7XFxuICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcXG4gICAgICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDAuMnJlbTtcXG4gICAgfVxcbiAgICAuXzNwLVYtSENpd3ljZDdFa2U0RmxKUGIgLmlucHV0LXdyYXBwZXIgaW5wdXQge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIHdpZHRoOiAxMnJlbTtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1taWQtZ3JheSk7XFxuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICAgIHBhZGRpbmc6IDAuMnJlbTtcXG4gICAgfVxcbiAgICAuXzNwLVYtSENpd3ljZDdFa2U0RmxKUGIgLmlucHV0LXdyYXBwZXIgYnV0dG9uIHtcXG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG4gICAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICAgIG1hcmdpbjogMXJlbSAwO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICBwYWRkaW5nOiAwLjVyZW1cXG4gICAgfVxcbiAgICAuXzNwLVYtSENpd3ljZDdFa2U0RmxKUGIgLmlucHV0LXdyYXBwZXIgYnV0dG9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbn1cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvdmljdG9yL3Byb2plY3RzL2ZyaWVuZHNoaXAtYXBwL2Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2F1dGgvQ3JlZGVudGlhbHMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNFO0lBQ0UsMkJBQW1CO0lBQW5CLHdCQUFtQjtJQUFuQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIsb0JBQW9CO0dBeUJyQjtJQXhCQztNQUNFLHVCQUF1QjtNQUN2QixpQkFBaUI7TUFDakIsc0JBQXNCO0tBQ3ZCO0lBQ0Q7TUFDRSxlQUFlO01BQ2YsYUFBYTtNQUNiLGtDQUFrQztNQUFsQyxrQ0FBa0M7TUFDbEMsZUFBZTtNQUNmLGdCQUFnQjtLQUNqQjtJQUNEO01BQ0UscUJBQXFCO01BQ3JCLGlCQUFpQjtNQUNqQixlQUFlO01BQ2YsYUFBYTtNQUNiLGtDQUFrQztNQUFsQyxrQ0FBa0M7TUFDbEMsYUFBYTtNQUNiLGVBQWdCO0tBSWpCO0lBSEM7SUFDRSxvQ0FBb0M7SUFBcEMsb0NBQW9DO0NBQ3JDXCIsXCJmaWxlXCI6XCJDcmVkZW50aWFscy5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5jcmVkZW50aWFscykge1xcbiAgLmlucHV0LXdyYXBwZXIge1xcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBsYWJlbCB7XFxuICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcXG4gICAgICBtYXJnaW4tdG9wOiAxcmVtO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDAuMnJlbTtcXG4gICAgfVxcbiAgICBpbnB1dCB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgd2lkdGg6IDEycmVtO1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1pZC1ncmF5KTtcXG4gICAgICBmb250LXNpemU6IDFlbTtcXG4gICAgICBwYWRkaW5nOiAwLjJyZW07XFxuICAgIH1cXG4gICAgYnV0dG9uIHtcXG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG4gICAgICBmb250LXNpemU6IDAuOGVtO1xcbiAgICAgIG1hcmdpbjogMXJlbSAwO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1taWQtZ3JheSk7XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgICAmOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiY3JlZGVudGlhbHNcIjogXCJfM3AtVi1IQ2l3eWNkN0VrZTRGbEpQYlwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9DcmVkZW50aWFscy5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9DcmVkZW50aWFscy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9DcmVkZW50aWFscy5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0NyZWRlbnRpYWxzLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWRlbnRpYWxzIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc3VibWl0Q3JlZGVudGlhbHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgYWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaW5jbHVkZU5hbWU6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgZmlyc3ROYW1lOiAnJyxcbiAgICBsYXN0TmFtZTogJycsXG4gICAgZW1haWw6ICcnLFxuICAgIHBhc3N3b3JkOiAnJ1xuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IFt0YXJnZXQuaWRdOiB0YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlU3VibWl0ID0gZXZlbnQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5zdWJtaXRDcmVkZW50aWFscyh0aGlzLnN0YXRlKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIGluY2x1ZGVOYW1lID0gZmFsc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lLCBlbWFpbCwgcGFzc3dvcmQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fSBjbGFzc05hbWU9e3N0eWxlcy5jcmVkZW50aWFsc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtd3JhcHBlclwiPlxuICAgICAgICAgIHtpbmNsdWRlTmFtZSAmJlxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJmaXJzdE5hbWVcIj5GaXJzdCBOYW1lOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJmaXJzdE5hbWVcIiB2YWx1ZT17Zmlyc3ROYW1lfSByZXF1aXJlZCBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9Lz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImxhc3ROYW1lXCI+TGFzdCBOYW1lOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsYXN0TmFtZVwiIHZhbHVlPXtsYXN0TmFtZX0gcmVxdWlyZWQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvRnJhZ21lbnQ+fVxuXG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJlbWFpbFwiPkVtYWlsOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJlbWFpbFwiIHZhbHVlPXtlbWFpbH0gcmVxdWlyZWQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkXCI+UGFzc3dvcmQ6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJwYXNzd29yZFwiIHZhbHVlPXtwYXNzd29yZH0gcmVxdWlyZWQgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj57YWN0aW9ufTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IHsgRVJST1JfQ0xFQVIgfSBmcm9tICcuL3JlZHVjZXJzJztcblxuZXhwb3J0IGNvbnN0IGNsZWFyRXJyb3IgPSAoKSA9PiAoeyB0eXBlOiBFUlJPUl9DTEVBUiB9KTsiLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU3dpdGNoLCBSb3V0ZSwgTmF2TGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRFcnJvciB9IGZyb20gJy4uL2FwcC9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBjbGVhckVycm9yIH0gZnJvbSAnLi4vYXBwL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0QWNjb3VudCB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuaW1wb3J0IHsgc2lnbmluLCBzaWdudXAgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gJy4vQ3JlZGVudGlhbHMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0F1dGguY3NzJztcblxuY2xhc3MgQXV0aCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFjY291bnQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2lnbmluOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNpZ251cDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmFueSxcbiAgICBjbGVhckVycm9yOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5jbGVhckVycm9yKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBhY2NvdW50LCBzaWduaW4sIHNpZ251cCwgbG9jYXRpb24sIGVycm9yIH0gPSB0aGlzLnByb3BzO1xuICAgIFxuICAgIGNvbnN0IHJlZGlyZWN0ID0gbG9jYXRpb24uc3RhdGUgPyBsb2NhdGlvbi5zdGF0ZS5mcm9tIDogJy8nO1xuXG4gICAgaWYoYWNjb3VudCkgcmV0dXJuIDxSZWRpcmVjdCB0bz17cmVkaXJlY3R9Lz47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPXtzdHlsZXMuYXV0aH0+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJhdXRoLW5hdlwiPlxuICAgICAgICAgIDxsaT48TmF2TGluayBhY3RpdmVDbGFzc05hbWU9XCJzaWduaW5cIiBjbGFzc05hbWU9XCJhdXRoLWxpbmtcIiB0bz1cIi9hdXRoL3NpZ25pblwiPlNpZ24gSW48L05hdkxpbms+PC9saT5cbiAgICAgICAgICA8bGk+PE5hdkxpbmsgYWN0aXZlQ2xhc3NOYW1lPVwic2lnbnVwXCIgY2xhc3NOYW1lPVwiYXV0aC1saW5rXCIgdG89XCIvYXV0aC9zaWdudXBcIj5TaWduIFVwPC9OYXZMaW5rPjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9Jy9hdXRoL3NpZ25pbicgcmVuZGVyPXsoKSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGgtZm9ybSBzaWduaW5cIj5cbiAgICAgICAgICAgICAgPENyZWRlbnRpYWxzIGFjdGlvbj1cIlNJR04gSU5cIiBzdWJtaXRDcmVkZW50aWFscz17c2lnbmlufS8+XG4gICAgICAgICAgICAgIHshIWVycm9yICYmIDxwPntlcnJvci5lcnJvcn08L3A+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX0vPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2F1dGgvc2lnbnVwXCIgcmVuZGVyPXsoKSA9PiAoXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aC1mb3JtIHNpZ251cFwiPlxuICAgICAgICAgICAgICAgIDxDcmVkZW50aWFscyBhY3Rpb249XCJTSUdOIFVQXCIgc3VibWl0Q3JlZGVudGlhbHM9e3NpZ251cH0gaW5jbHVkZU5hbWU9e3RydWV9Lz5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGgtZXJyb3JcIj57ISFlcnJvciAmJiA8c3Bhbj57ZXJyb3IuZXJyb3J9PC9zcGFuPn08L2Rpdj5cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgKX0vPlxuICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9hdXRoL3NpZ25pblwiLz5cbiAgICAgICAgPC9Td2l0Y2g+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGFjY291bnQ6IGdldEFjY291bnQoc3RhdGUpLFxuICAgIGVycm9yOiBnZXRFcnJvcihzdGF0ZSlcbiAgfSksXG4gIHsgc2lnbmluLCBzaWdudXAsIGNsZWFyRXJyb3IgfVxuKShBdXRoKTsiLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogLmxvZ28ge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtZmFtaWx5OiBMb2JzdGVyLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDRlbTtcXG4gICAgcGFkZGluZy10b3A6IDAuNXJlbTtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICB3aWR0aDogLW1vei1maXQtY29udGVudDtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE1MGRlZyx2YXIoLS1zYWZmcm9uKSwgdmFyKC0tbWFnZW50YSkpO1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTUwZGVnLHZhcigtLXNhZmZyb24pLCB2YXIoLS1tYWdlbnRhKSk7XFxuICAgIGJhY2tncm91bmQtY2xpcDogdGV4dDtcXG4gICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIH1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICBwYWRkaW5nOiAwIDAuNXJlbTtcXG4gIH1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwge1xcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBwYWRkaW5nOiAwLjVyZW0gMCAwLjVyZW0gMDtcXG4gICAgfVxcbiAgLl8zQUdsdC1HZzNjSndqRWxiTmhIdnhaIG5hdiB1bCAubmF2aWdhdGlvbiB7XFxuICAgICAgICBmb250LXNpemU6IDAuOWVtO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZVxcbiAgICAgIH1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwgLm5hdmlnYXRpb246OmFmdGVyIHtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBib3JkZXItYm90dG9tOiAwLjJyZW0gc29saWQgdmFyKC0tc29mdC1ibGFjayk7XFxuICAgIGJvcmRlci1ib3R0b206IDAuMnJlbSBzb2xpZCB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICByaWdodDogNTAlO1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlO1xcbn1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwgLm5hdmlnYXRpb246aG92ZXI6OmFmdGVyIHtcXG4gICAgYm9yZGVyLWJvdHRvbTogMC4ycmVtIHNvbGlkIHdoaXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcXG59XFxuICAuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogbmF2IHVsIC5uYXZpZ2F0aW9uLmN1cnJlbnQge1xcbiAgICBjb2xvcjogdmFyKC0tZGFyay1zYWZmcm9uKTtcXG4gICAgY29sb3I6IHZhcigtLWRhcmstc2FmZnJvbik7XFxufVxcbiAgLl8zQUdsdC1HZzNjSndqRWxiTmhIdnhaIG5hdiB1bCAubmF2aWdhdGlvbi5jdXJyZW50OjphZnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMC4ycmVtIHNvbGlkIHZhcigtLWRhcmstc2FmZnJvbik7XFxuICAgIGJvcmRlci1ib3R0b206IDAuMnJlbSBzb2xpZCB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbn1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwgLmxvZ291dCB7XFxuICAgICAgICBwYWRkaW5nOiAwLjE1cmVtO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgICAgZm9udC1zaXplOiAwLjdlbTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgfVxcbiAgLl8zQUdsdC1HZzNjSndqRWxiTmhIdnhaIG5hdiB1bCAubG9nb3V0IGEge1xcbiAgICAgICAgICBjb2xvcjogdmFyKC0tc29mdC1ibGFjayk7XFxuICAgICAgICAgIGNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgICAgIH1cXG4gIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwgLmxvZ291dDpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tYWdlbnRhKTtcXG59XFxuQG1lZGlhIChtaW4td2lkdGg6IDQwMHB4KSB7XFxuICAgICAgICAuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogbmF2IHVsIC5uYXZpZ2F0aW9uIHtcXG4gICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcXG4gICAgICAgIH1cXG4gICAgICAgIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwgLmxvZ291dCB7XFxuICAgICAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICAgICAgICBwYWRkaW5nOiAwLjJyZW07XFxuICAgICAgICB9XFxufVxcbkBtZWRpYSAobWluLXdpZHRoOiA3MDBweCkge1xcbiAgICAgIC5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBuYXYgdWwge1xcbiAgICAgICAgd2lkdGg6IDcwMHB4O1xcbiAgICAgIH1cXG59XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9ob21lL3ZpY3Rvci9wcm9qZWN0cy9mcmllbmRzaGlwLWFwcC9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9hcHAvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDRTtJQUNFLG1CQUFtQjtJQUNuQixpQ0FBaUM7SUFDakMsZUFBZTtJQUNmLG9CQUFvQjtJQUNwQix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLDJCQUFtQjtJQUFuQix3QkFBbUI7SUFBbkIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixtRUFBbUU7SUFBbkUsbUVBQW1FO0lBQ25FLHNCQUFzQjtJQUN0Qiw4QkFBOEI7SUFDOUIsbUJBQW1CO0dBQ3BCO0VBQ0Q7SUFDRSxZQUFZO0lBQ1osb0NBQW9DO0lBQXBDLG9DQUFvQztJQUNwQyxrQkFBa0I7R0FvRG5CO0VBbkRDO01BQ0UsZUFBZTtNQUNmLGNBQWM7TUFDZCw4QkFBOEI7TUFDOUIsb0JBQW9CO01BQ3BCLDJCQUEyQjtLQTZDNUI7RUE1Q0M7UUFDRSxpQkFBaUI7UUFDakIsaUJBQWlCO1FBQ2pCLGFBQWE7UUFDYixnQkFBZ0I7UUFDaEIsa0JBQW1CO09BMEJwQjtFQXpCRDtJQUNFLFlBQVk7SUFDWixtQkFBbUI7SUFDbkIsVUFBVTtJQUNWLDhDQUE4QztJQUE5Qyw4Q0FBOEM7SUFDOUMsVUFBVTtJQUNWLFdBQVc7SUFDWCwwQkFBMEI7Q0FDM0I7RUFDRDtJQUNFLGtDQUFrQztJQUNsQyxRQUFRO0lBQ1IsU0FBUztJQUNULDBCQUEwQjtDQUMzQjtFQUNEO0lBQ0UsMkJBQTJCO0lBQTNCLDJCQUEyQjtDQUM1QjtFQUNEO0lBQ0UsbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULGdEQUFnRDtJQUFoRCxnREFBZ0Q7Q0FDakQ7RUFFRDtRQUNFLGlCQUFpQjtRQUNqQixrQ0FBa0M7UUFBbEMsa0NBQWtDO1FBQ2xDLGlCQUFpQjtRQUNqQixpQkFBaUI7T0FPbEI7RUFOQztVQUNFLHlCQUF5QjtVQUF6Qix5QkFBeUI7U0FDMUI7RUFDRDtJQUNFLGlDQUFpQztJQUFqQyxpQ0FBaUM7Q0FDbEM7QUFJUDtRQUdNO1VBQ0UsaUJBQWlCO1NBQ2xCO1FBQ0Q7VUFDRSxlQUFlO1VBQ2YsZ0JBQWdCO1NBQ2pCO0NBR047QUFDRDtNQUVJO1FBQ0UsYUFBYTtPQUNkO0NBRUpcIixcImZpbGVcIjpcIkhlYWRlci5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5oZWFkZXIpIHtcXG4gIC5sb2dvIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LWZhbWlseTogTG9ic3Rlciwgc2Fucy1zZXJpZjtcXG4gICAgZm9udC1zaXplOiA0ZW07XFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW07XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW07XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTUwZGVnLHZhcigtLXNhZmZyb24pLCB2YXIoLS1tYWdlbnRhKSk7XFxuICAgIGJhY2tncm91bmQtY2xpcDogdGV4dDtcXG4gICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7XFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIH1cXG4gIG5hdiB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zb2Z0LWJsYWNrKTtcXG4gICAgcGFkZGluZzogMCAwLjVyZW07XFxuICAgIHVsIHtcXG4gICAgICBtYXJnaW46IDAgYXV0bztcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgcGFkZGluZzogMC41cmVtIDAgMC41cmVtIDA7XFxuICAgICAgLm5hdmlnYXRpb24ge1xcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBwYWRkaW5nOiAwLjVyZW07XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3R0b206IDA7XFxuICAgICAgICBib3JkZXItYm90dG9tOiAwLjJyZW0gc29saWQgdmFyKC0tc29mdC1ibGFjayk7XFxuICAgICAgICBsZWZ0OiA1MCU7XFxuICAgICAgICByaWdodDogNTAlO1xcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcXG4gICAgICB9XFxuICAgICAgJjpob3Zlcjo6YWZ0ZXIge1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMC4ycmVtIHNvbGlkIHdoaXRlO1xcbiAgICAgICAgbGVmdDogMDtcXG4gICAgICAgIHJpZ2h0OiAwO1xcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTtcXG4gICAgICB9XFxuICAgICAgJi5jdXJyZW50IHtcXG4gICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICAgIH1cXG4gICAgICAmLmN1cnJlbnQ6OmFmdGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJvdHRvbTogMDtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDAuMnJlbSBzb2xpZCB2YXIoLS1kYXJrLXNhZmZyb24pO1xcbiAgICAgIH1cXG4gICAgICB9XFxuICAgICAgLmxvZ291dCB7XFxuICAgICAgICBwYWRkaW5nOiAwLjE1cmVtO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWlkLWdyYXkpO1xcbiAgICAgICAgZm9udC1zaXplOiAwLjdlbTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgICAgICBhIHtcXG4gICAgICAgICAgY29sb3I6IHZhcigtLXNvZnQtYmxhY2spO1xcbiAgICAgICAgfVxcbiAgICAgICAgJjpob3ZlciB7XFxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1hZ2VudGEpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDQwMHB4KSB7XFxuICAgIG5hdiB7XFxuICAgICAgdWwge1xcbiAgICAgICAgLm5hdmlnYXRpb24ge1xcbiAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xcbiAgICAgICAgfVxcbiAgICAgICAgLmxvZ291dCB7XFxuICAgICAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICAgICAgICBwYWRkaW5nOiAwLjJyZW07XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuICBAbWVkaWEgKG1pbi13aWR0aDogNzAwcHgpIHtcXG4gICAgbmF2IHtcXG4gICAgICB1bCB7XFxuICAgICAgICB3aWR0aDogNzAwcHg7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJoZWFkZXJcIjogXCJfM0FHbHQtR2czY0p3akVsYk5oSHZ4WlwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9IZWFkZXIuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vSGVhZGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0hlYWRlci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgeyBMT0FEX1NUQVJULCBMT0FEX0VORCwgRVJST1IgfSBmcm9tICcuLi9jb21wb25lbnRzL2FwcC9yZWR1Y2Vycyc7XG5cbmNvbnN0IGlzUHJvbWlzZSA9IHZhbCA9PiB2YWwgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCAoeyBkaXNwYXRjaCB9KSA9PiBuZXh0ID0+IGFjdGlvbiA9PiB7XG5cbiAgY29uc3QgeyB0eXBlLCBwYXlsb2FkIH0gPSBhY3Rpb247XG4gIGlmKCFpc1Byb21pc2UocGF5bG9hZCkpIHJldHVybiBuZXh0KGFjdGlvbik7XG5cbiAgZGlzcGF0Y2goeyB0eXBlOiBMT0FEX1NUQVJUIH0pO1xuXG4gIHJldHVybiBwYXlsb2FkXG4gICAgLnRoZW4oXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IExPQURfRU5EIH0pO1xuXG4gICAgICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBwYXlsb2FkOiByZXN1bHRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZXJyID0+IHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBMT0FEX0VORCB9KTtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBFUlJPUiwgcGF5bG9hZDogZXJyIH0pO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgKTtcbn07IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE5hdkxpbmssIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QWNjb3VudCB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuaW1wb3J0IHsgbG9nb3V0IH0gZnJvbSAnLi4vYXV0aC9hY3Rpb25zJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9IZWFkZXIuY3NzJztcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhY2NvdW50OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvZ291dDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFjY291bnQsIGxvZ291dCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8aGVhZGVyIGNsYXNzTmFtZT17c3R5bGVzLmhlYWRlcn0+XG4gICAgICAgIDxMaW5rIHRvPVwiL3Byb2ZpbGVcIiBjbGFzc05hbWU9XCJsb2dvXCI+U2hhcmVhYmxlPC9MaW5rPlxuICAgICAgICA8bmF2PlxuICAgICAgICAgIFxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT48TmF2TGluayBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uXCIgYWN0aXZlQ2xhc3NOYW1lPVwiY3VycmVudFwiIHRvPVwiL2Fib3V0XCI+QWJvdXQ8L05hdkxpbms+PC9saT5cbiAgICAgICAgICAgIHthY2NvdW50ICYmXG4gICAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICAgIDxsaT48TmF2TGluayBjbGFzc05hbWU9XCJuYXZpZ2F0aW9uXCIgYWN0aXZlQ2xhc3NOYW1lPVwiY3VycmVudFwiIHRvPVwiL3Byb2ZpbGVcIj57YWNjb3VudC5uYW1lfTwvTmF2TGluaz48L2xpPlxuICAgICAgICAgICAgICA8bGk+PE5hdkxpbmsgY2xhc3NOYW1lPVwibmF2aWdhdGlvblwiIGFjdGl2ZUNsYXNzTmFtZT1cImN1cnJlbnRcIiB0bz1cIi9mZWVkXCI+RmVlZDwvTmF2TGluaz48L2xpPlxuICAgICAgICAgICAgICA8bGk+PE5hdkxpbmsgY2xhc3NOYW1lPVwibmF2aWdhdGlvblwiIGFjdGl2ZUNsYXNzTmFtZT1cImN1cnJlbnRcIiB0bz1cIi9mcmllbmRzXCI+RnJpZW5kczwvTmF2TGluaz48L2xpPlxuICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibG9nb3V0XCI+PExpbmsgdG89XCIvYXV0aFwiIG9uQ2xpY2s9e2xvZ291dH0+TG9nIE91dDwvTGluaz48L2xpPlxuICAgICAgICAgICAgPC9GcmFnbWVudD59XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9uYXY+XG4gICAgICA8L2hlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7XG4gICAgYWNjb3VudDogZ2V0QWNjb3VudChzdGF0ZSlcbiAgfSksXG4gIHsgbG9nb3V0IH1cbikoSGVhZGVyKTsiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgU3dpdGNoLCBSb3V0ZSwgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vSGVhZGVyJztcbmltcG9ydCBBdXRoIGZyb20gJy4uL2F1dGgvQXV0aCc7XG5pbXBvcnQgUHJvZmlsZSBmcm9tICcuLi9wcm9maWxlL1Byb2ZpbGUnO1xuaW1wb3J0IEZlZWQgZnJvbSAnLi4vZmVlZC9GZWVkJztcbmltcG9ydCBGcmllbmRzIGZyb20gJy4uL2ZyaWVuZHMvRnJpZW5kcyc7XG5pbXBvcnQgQWJvdXQgZnJvbSAnLi4vYWJvdXQvQWJvdXQnO1xuaW1wb3J0IFByaXZhdGVSb3V0ZSBmcm9tICcuL1ByaXZhdGVSb3V0ZSc7XG5pbXBvcnQgeyBnZXRDaGVja2VkQXV0aCB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuaW1wb3J0IHsgYXR0ZW1wdEFjY291bnRMb2FkIH0gZnJvbSAnLi4vYXV0aC9hY3Rpb25zJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYXR0ZW1wdEFjY291bnRMb2FkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNoZWNrZWRBdXRoOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuYXR0ZW1wdEFjY291bnRMb2FkKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGVja2VkQXV0aCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxSb3V0ZSBjb21wb25lbnQ9e0hlYWRlcn0vPlxuICAgICAgICAgIDxtYWluPlxuICAgICAgICAgICAge2NoZWNrZWRBdXRoICYmXG4gICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hdXRoXCIgY29tcG9uZW50PXtBdXRofS8+XG4gICAgICAgICAgICAgIDxQcml2YXRlUm91dGUgcGF0aD1cIi9wcm9maWxlXCIgcmVuZGVyPXsoeyBsb2NhdGlvbiB9KSA9PiA8UHJvZmlsZSBsb2NhdGlvbj17bG9jYXRpb259IGlzVXNlcj17dHJ1ZX0vPn0vPlxuICAgICAgICAgICAgICA8UHJpdmF0ZVJvdXRlIHBhdGg9XCIvZmVlZFwiIGNvbXBvbmVudD17RmVlZH0vPlxuICAgICAgICAgICAgICA8UHJpdmF0ZVJvdXRlIGV4YWN0IHBhdGg9XCIvZnJpZW5kc1wiICBjb21wb25lbnQ9e0ZyaWVuZHN9Lz5cbiAgICAgICAgICAgICAgPFByaXZhdGVSb3V0ZSBwYXRoPVwiL2ZyaWVuZHMvOmlkXCIgY29tcG9uZW50PXtQcm9maWxlfS8+XG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Fib3V0XCIgY29tcG9uZW50PXtBYm91dH0vPlxuICAgICAgICAgICAgICA8UmVkaXJlY3QgdG89XCIvcHJvZmlsZVwiLz5cbiAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1JvdXRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7XG4gICAgY2hlY2tlZEF1dGg6IGdldENoZWNrZWRBdXRoKHN0YXRlKSxcbiAgfSksXG4gIHsgYXR0ZW1wdEFjY291bnRMb2FkIH1cbikoQXBwKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaz1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsdD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdz1yP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHk9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksej1yP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLEE9cj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxCPVxucj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTI7ciYmU3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik7dmFyIEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKyllKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtuKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9XG52YXIgRT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gRihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0QoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBHKCl7fVxuRy5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxFfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtrKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXR9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTz0vXFwvKy9nLFA9W107ZnVuY3Rpb24gUShhLGIsZSxjKXtpZihQLmxlbmd0aCl7dmFyIGQ9UC5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgdDpjYXNlIHU6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitUKGQsaCk7Zys9UyhkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUMmJmFbQ118fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1QoZCxoKyspLGcrPVMoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBWKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1coYSxjLGUscS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTihhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZCk7bnVsbD09YXx8UyhhLFwiXCIsVixiKTtSKGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixlKTtudWxsPT1hfHxTKGEsXCJcIixVLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VyhhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkQoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkYsUHVyZUNvbXBvbmVudDpILGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp6LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF9jaGFuZ2VkQml0czowLF9jaGFuZ2VkQml0czI6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnksX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTpBLHVuc3RhYmxlX1Byb2ZpbGVyOngsY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7bnVsbD09PWF8fHZvaWQgMD09PWE/RChcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZD1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09XG5iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YylkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuNC4xXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkosXG5hc3NpZ246a319LFk9e2RlZmF1bHQ6WH0sWj1ZJiZYfHxZO21vZHVsZS5leHBvcnRzPVouZGVmYXVsdD9aLmRlZmF1bHQ6WjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIikscD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSx2PXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGRhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksZmE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1iYT92b2lkIDA6QShcIjIyN1wiKTtcbmZ1bmN0aW9uIGlhKGEsYixjLGQsZSxmLGcsaCxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLG4pfWNhdGNoKHIpe3RoaXMuX2NhdWdodEVycm9yPXIsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEI9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2lhLmFwcGx5KEIsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtCLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoQi5oYXNDYXVnaHRFcnJvcigpKXt2YXIgbj1CLmNsZWFyQ2F1Z2h0RXJyb3IoKTtCLl9oYXNSZXRocm93RXJyb3J8fChCLl9oYXNSZXRocm93RXJyb3I9ITAsQi5fcmV0aHJvd0Vycm9yPW4pfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGthLmFwcGx5KEIsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gQi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihCLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5CLl9jYXVnaHRFcnJvcjtCLl9jYXVnaHRFcnJvcj1udWxsO0IuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUEoXCIxOThcIil9fTtmdW5jdGlvbiBrYSgpe2lmKEIuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Qi5fcmV0aHJvd0Vycm9yO0IuX3JldGhyb3dFcnJvcj1udWxsO0IuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkEoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpBKFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP0EoXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZxYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpBKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP0EoXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fTtmdW5jdGlvbiB0YShhKXtsYT9BKFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfWZ1bmN0aW9uIHVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT9BKFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX1cbnZhciB2YT17cGx1Z2luczpvYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cGEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6cmEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczpzYSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9LHdhPW51bGwseGE9bnVsbCx5YT1udWxsO2Z1bmN0aW9uIHphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9eWEoZCk7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEFhKGEsYil7bnVsbD09Yj9BKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBCYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQ2E9bnVsbDtcbmZ1bmN0aW9uIERhKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKXphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmemEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gRWEoYSl7cmV0dXJuIERhKGEsITApfWZ1bmN0aW9uIEZhKGEpe3JldHVybiBEYShhLCExKX12YXIgR2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfTtcbmZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9d2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIElhKGEsYil7bnVsbCE9PWEmJihDYT1BYShDYSxhKSk7YT1DYTtDYT1udWxsO2EmJihiP0JhKGEsRWEpOkJhKGEsRmEpLENhP0EoXCI5NVwiKTp2b2lkIDAsQi5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gSmEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8b2EubGVuZ3RoO2YrKyl7dmFyIGc9b2FbZl07ZyYmKGc9Zy5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9QWEoZSxnKSl9SWEoZSwhMSl9dmFyIEthPXtpbmplY3Rpb246R2EsZ2V0TGlzdGVuZXI6SGEscnVuRXZlbnRzSW5CYXRjaDpJYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOkphfSxMYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxDPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGEsTWE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMYTtcbmZ1bmN0aW9uIE5hKGEpe2lmKGFbQ10pcmV0dXJuIGFbQ107Zm9yKDshYVtDXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0NdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gT2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0EoXCIzM1wiKX1mdW5jdGlvbiBQYShhKXtyZXR1cm4gYVtNYV18fG51bGx9dmFyIFFhPXtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbQ109YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6TmEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbQ107cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpPYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlBhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW01hXT1ifX07XG5mdW5jdGlvbiBGKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUmEoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1GKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIFNhKGEsYixjKXtpZihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmUmEoYS5fdGFyZ2V0SW5zdCxTYSxhKX1cbmZ1bmN0aW9uIFVhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0YoYik6bnVsbDtSYShiLFNhLGEpfX1mdW5jdGlvbiBWYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFhhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFlhKGEpe0JhKGEsVGEpfVxuZnVuY3Rpb24gWmEoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPUYoaCkpZysrO2g9MDtmb3IodmFyIGs9ZjtrO2s9RihrKSloKys7Zm9yKDswPGctaDspZT1GKGUpLGctLTtmb3IoOzA8aC1nOylmPUYoZiksaC0tO2Zvcig7Zy0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9RihlKTtmPUYoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPUYoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztjLnB1c2goZCk7ZD1GKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspVmEoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspVmEoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgJGE9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6WWEsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7QmEoYSxVYSl9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpaYSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtCYShhLFhhKX19O2Z1bmN0aW9uIGFiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmI9e2FuaW1hdGlvbmVuZDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2I9e30sZGI9e307bS5jYW5Vc2VET00mJihkYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWIoYSl7aWYoY2JbYV0pcmV0dXJuIGNiW2FdO2lmKCFiYlthXSlyZXR1cm4gYTt2YXIgYj1iYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkYilyZXR1cm4gY2JbYV09YltjXTtyZXR1cm4gYX12YXIgZmI9ZWIoXCJhbmltYXRpb25lbmRcIiksZ2I9ZWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksaGI9ZWIoXCJhbmltYXRpb25zdGFydFwiKSxpYj1lYihcInRyYW5zaXRpb25lbmRcIiksamI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGtiPW51bGw7XG5mdW5jdGlvbiBsYigpeyFrYiYmbS5jYW5Vc2VET00mJihrYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBrYn12YXIgRz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtmdW5jdGlvbiBtYigpe2lmKEcuX2ZhbGxiYWNrVGV4dClyZXR1cm4gRy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Ry5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtHLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gRy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gRy5fcm9vdD9HLl9yb290LnZhbHVlOkcuX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6di50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIEgoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP3YudGhhdFJldHVybnNUcnVlOnYudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbnAoSC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD12LnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OnYudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7SC5JbnRlcmZhY2U9cGI7SC5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7cChlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9cCh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoSCk7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6QShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxDYj0hMTtcbmZ1bmN0aW9uIERiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBFYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBGYj0hMTtmdW5jdGlvbiBHYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gRWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0NiPSEwO3JldHVybiBBYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmQ2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gSGIoYSxiKXtpZihGYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhd2ImJkRiKGEsYik/KGE9bWIoKSxHLl9yb290PW51bGwsRy5fc3RhcnRUZXh0PW51bGwsRy5fZmFsbGJhY2tUZXh0PW51bGwsRmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEliPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgRmI/RGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKEZifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJkZiJiYoZj1tYigpKTooRy5fcm9vdD1kLEcuX3N0YXJ0VGV4dD1uYigpLEZiPSEwKSksZT10Yi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9XG5mOihmPUViKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxZYShlKSxmPWUpOmY9bnVsbDsoYT15Yj9HYihhLGMpOkhiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sSmI9bnVsbCxLYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtKYj1hfX0sTGI9bnVsbCxNYj1udWxsO2Z1bmN0aW9uIE5iKGEpe2lmKGE9eGEoYSkpe0piJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6QShcIjE5NFwiKTt2YXIgYj13YShhLnN0YXRlTm9kZSk7SmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIE9iKGEpe0xiP01iP01iLnB1c2goYSk6TWI9W2FdOkxiPWF9XG5mdW5jdGlvbiBQYigpe3JldHVybiBudWxsIT09TGJ8fG51bGwhPT1NYn1mdW5jdGlvbiBRYigpe2lmKExiKXt2YXIgYT1MYixiPU1iO01iPUxiPW51bGw7TmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKU5iKGJbYV0pfX12YXIgUmI9e2luamVjdGlvbjpLYixlbnF1ZXVlU3RhdGVSZXN0b3JlOk9iLG5lZWRzU3RhdGVSZXN0b3JlOlBiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlFifTtmdW5jdGlvbiBTYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIFRiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIFViKCl7fXZhciBWYj0hMTtmdW5jdGlvbiBXYihhLGIpe2lmKFZiKXJldHVybiBhKGIpO1ZiPSEwO3RyeXtyZXR1cm4gU2IoYSxiKX1maW5hbGx5e1ZiPSExLFBiKCkmJihVYigpLFFiKCkpfX1cbnZhciBYYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBZYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVhiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBaYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1iYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixmYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGdjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGhjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaWM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGpjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxrYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbGM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LG1jPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHBjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHFjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixyYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTpcbjYwMTEzLHNjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB0YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9c2MmJmFbc2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiB1YyhhKXt2YXIgYj1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGI7c3dpdGNoKGIpe2Nhc2UgcGM6cmV0dXJuXCJBc3luY01vZGVcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgaWM6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSBoYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBrYzpyZXR1cm5cIlByb2ZpbGVyKFwiK2EucGVuZGluZ1Byb3BzLmlkK1wiKVwiO2Nhc2UgbGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBqYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIHJjOnJldHVyblwiVGltZW91dFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpc3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgcWM6cmV0dXJuIGE9Yi5yZW5kZXIuZGlzcGxheU5hbWV8fGIucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK1xuYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2YyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXVjKGEpO3ZhciBmPW51bGw7YyYmKGY9dWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHdjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyx4Yz17fSx6Yz17fTtmdW5jdGlvbiBBYyhhKXtpZih6Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZih4Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZih3Yy50ZXN0KGEpKXJldHVybiB6Y1thXT0hMDt4Y1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEJjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIENjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEJjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBJKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgSj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtKW2JdPW5ldyBJKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIERjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gRWMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsXG5FYyk7SltiXT1uZXcgSShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtKLnRhYkluZGV4PW5ldyBJKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIEZjKGEsYixjLGQpe3ZhciBlPUouaGFzT3duUHJvcGVydHkoYik/SltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KENjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9BYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gR2MoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIEhjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUljKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gSmMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZGYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gS2MoYSxiKXtKYyhhLGIpO3ZhciBjPUljKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/TGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmTGMoYSxiLnR5cGUsSWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBNYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTt2YXIgZD1hLnZhbHVlO2N8fGI9PT1kfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1mdW5jdGlvbiBMYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBJYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE5jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE9jKGEsYixjKXthPUguZ2V0UG9vbGVkKE5jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIFBjPW51bGwsUWM9bnVsbDtmdW5jdGlvbiBSYyhhKXtJYShhLCExKX1mdW5jdGlvbiBTYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFVjPSExO20uY2FuVXNlRE9NJiYoVWM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVmMoKXtQYyYmKFBjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSxRYz1QYz1udWxsKX1mdW5jdGlvbiBXYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmU2MoUWMpJiYoYT1PYyhRYyxhLFpiKGEpKSxXYihSYyxhKSl9ZnVuY3Rpb24gWGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFZjKCksUGM9YixRYz1jLFBjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSk6XCJibHVyXCI9PT1hJiZWYygpfWZ1bmN0aW9uIFljKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFNjKFFjKX1cbmZ1bmN0aW9uIFpjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gU2MoYil9ZnVuY3Rpb24gJGMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gU2MoYil9XG52YXIgYWQ9e2V2ZW50VHlwZXM6TmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpVYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVRjOlliKGUpP1VjP2Y9JGM6KGY9WWMsZz1YYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE9jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmTGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sYmQ9SC5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGNkPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGRkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9Y2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBlZCgpe3JldHVybiBkZH1cbnZhciBmZD1iZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksZ2Q9ZmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxoZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxcbm1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0saWQ9e2V2ZW50VHlwZXM6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxcbmUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9OYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLG49dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9ZmQsaD1oZC5tb3VzZUxlYXZlLGs9aGQubW91c2VFbnRlcixuPVwibW91c2VcIjtlbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWdkLGg9aGQucG9pbnRlckxlYXZlLGs9aGQucG9pbnRlckVudGVyLG49XCJwb2ludGVyXCI7YT1udWxsPT1mP2U6T2EoZik7ZT1udWxsPT1iP2U6T2EoYik7aD1nLmdldFBvb2xlZChoLGYsYyxkKTtoLnR5cGU9bitcImxlYXZlXCI7aC50YXJnZXQ9YTtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1uK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1hO1phKGgsXG5jLGYsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiBqZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBrZChhKXsyIT09amQoYSk/QShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1qZChhKSwzPT09Yj9BKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBrZChlKSxhO2lmKGc9PT1kKXJldHVybiBrZChlKSxiO2c9Zy5zaWJsaW5nfUEoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpBKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/QShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0EoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbWQoYSl7YT1sZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG5kKGEpe2E9bGQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgb2Q9SC5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPUguZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9YmQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIHJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx0ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdWQ9YmQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT90ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx2ZD1mZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksd2Q9YmQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KSx4ZD1ILmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx5ZD1mZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHpkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2ZiLFwiYW5pbWF0aW9uRW5kXCJdLFtnYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbaGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtpYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLEFkPXt9LEJkPXt9O2Z1bmN0aW9uIENkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07QWRbYV09YjtCZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sXG5bXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWZkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgZmI6Y2FzZSBnYjpjYXNlIGhiOmE9b2Q7YnJlYWs7Y2FzZSBpYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPWJkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWdkO2JyZWFrO2RlZmF1bHQ6YT1IfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WWEoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjLnJldHVybjspYz1jLnJldHVybjtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPU5hKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sSmEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LFpiKGEubmF0aXZlRXZlbnQpKX12YXIgSGQ9ITA7ZnVuY3Rpb24gSWQoYSl7SGQ9ISFhfWZ1bmN0aW9uIEsoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/S2Q6TGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1cbmZ1bmN0aW9uIE1kKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0tkOkxkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gS2QoYSxiKXtUYihMZCxhLGIpfWZ1bmN0aW9uIExkKGEsYil7aWYoSGQpe3ZhciBjPVpiKGIpO2M9TmEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1qZChjKXx8KGM9bnVsbCk7aWYoRmQubGVuZ3RoKXt2YXIgZD1GZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtXYihHZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkZkLmxlbmd0aCYmRmQucHVzaChhKX19fVxudmFyIE5kPXtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gSGR9LHNldEVuYWJsZWQ6SWQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIEhkfSx0cmFwQnViYmxlZEV2ZW50OkssdHJhcENhcHR1cmVkRXZlbnQ6TWQsZGlzcGF0Y2hFdmVudDpMZH0sT2Q9e30sUGQ9MCxRZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gUmQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsUWQpfHwoYVtRZF09UGQrKyxPZFthW1FkXV09e30pO3JldHVybiBPZFthW1FkXV19ZnVuY3Rpb24gU2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gVGQoYSxiKXt2YXIgYz1TZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1TZChjKX19ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe2lmKCRkfHxudWxsPT1YZHx8WGQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gWmQmJmVhKFpkLGMpP251bGw6KFpkPWMsYT1ILmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxZYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1SZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/T2EoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihZYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0dhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7d2E9UWEuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTt4YT1RYS5nZXRJbnN0YW5jZUZyb21Ob2RlO3lhPVFhLmdldE5vZGVGcm9tSW5zdGFuY2U7R2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpEZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46aWQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpJYn0pO1xudmFyIGNlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxkZT1EYXRlLGVlPXNldFRpbWVvdXQsZmU9Y2xlYXJUaW1lb3V0LGdlPXZvaWQgMDtpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgaGU9cGVyZm9ybWFuY2U7Z2U9ZnVuY3Rpb24oKXtyZXR1cm4gaGUubm93KCl9fWVsc2UgZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gZGUubm93KCl9O3ZhciBpZT12b2lkIDAsamU9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00pe3ZhciBrZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2U/Y2U6ZnVuY3Rpb24oKXtBKFwiMjc2XCIpfSxMPW51bGwsbGU9bnVsbCxtZT0tMSxuZT0hMSxvZT0hMSxwZT0wLHFlPTMzLHJlPTMzLHNlPXtkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT1wZS1nZSgpO3JldHVybiAwPGE/YTowfX0sdWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnNjaGVkdWxlZENhbGxiYWNrLGQ9ITE7dHJ5e2MoYiksZD0hMH1maW5hbGx5e2plKGEpLGR8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX19LHRlPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09dGUmJihuZT0hMSxudWxsIT09TCkpe2lmKG51bGwhPT1MKXt2YXIgYj1nZSgpO2lmKCEoLTE9PT1cbm1lfHxtZT5iKSl7YT0tMTtmb3IodmFyIGM9W10sZD1MO251bGwhPT1kOyl7dmFyIGU9ZC50aW1lb3V0VGltZTstMSE9PWUmJmU8PWI/Yy5wdXNoKGQpOi0xIT09ZSYmKC0xPT09YXx8ZTxhKSYmKGE9ZSk7ZD1kLm5leHR9aWYoMDxjLmxlbmd0aClmb3Ioc2UuZGlkVGltZW91dD0hMCxiPTAsZD1jLmxlbmd0aDtiPGQ7YisrKXVlKGNbYl0sc2UpO21lPWF9fWZvcihhPWdlKCk7MDxwZS1hJiZudWxsIT09TDspYT1MLHNlLmRpZFRpbWVvdXQ9ITEsdWUoYSxzZSksYT1nZSgpO251bGw9PT1MfHxvZXx8KG9lPSEwLGtlKHZlKSl9fSwhMSk7dmFyIHZlPWZ1bmN0aW9uKGEpe29lPSExO3ZhciBiPWEtcGUrcmU7YjxyZSYmcWU8cmU/KDg+YiYmKGI9OCkscmU9YjxxZT9xZTpiKTpxZT1iO3BlPWErcmU7bmV8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX07aWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKGM9Z2UoKStcbmIudGltZW91dCk7aWYoLTE9PT1tZXx8LTEhPT1jJiZjPG1lKW1lPWM7YT17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTpjLHByZXY6bnVsbCxuZXh0Om51bGx9O251bGw9PT1MP0w9YTooYj1hLnByZXY9bGUsbnVsbCE9PWImJihiLm5leHQ9YSkpO2xlPWE7b2V8fChvZT0hMCxrZSh2ZSkpO3JldHVybiBhfTtqZT1mdW5jdGlvbihhKXtpZihudWxsIT09YS5wcmV2fHxMPT09YSl7dmFyIGI9YS5uZXh0LGM9YS5wcmV2O2EubmV4dD1udWxsO2EucHJldj1udWxsO251bGwhPT1iP251bGwhPT1jPyhjLm5leHQ9YixiLnByZXY9Yyk6KGIucHJldj1udWxsLEw9Yik6bnVsbCE9PWM/KGMubmV4dD1udWxsLGxlPWMpOmxlPUw9bnVsbH19fWVsc2V7dmFyIHdlPW5ldyBNYXA7aWU9ZnVuY3Rpb24oYSl7dmFyIGI9e3NjaGVkdWxlZENhbGxiYWNrOmEsdGltZW91dFRpbWU6MCxuZXh0Om51bGwscHJldjpudWxsfSxjPWVlKGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sXG5kaWRUaW1lb3V0OiExfSl9KTt3ZS5zZXQoYSxjKTtyZXR1cm4gYn07amU9ZnVuY3Rpb24oYSl7dmFyIGI9d2UuZ2V0KGEuc2NoZWR1bGVkQ2FsbGJhY2spO3dlLmRlbGV0ZShhKTtmZShiKX19ZnVuY3Rpb24geGUoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIHllKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9eGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gemUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEFlKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBCZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjkxXCIpOnZvaWQgMDtyZXR1cm4gcCh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBDZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0EoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpBKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBEZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBFZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgRmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gR2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBIZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/R2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgSWU9dm9pZCAwLEplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PUZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle0llPUllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO0llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPUllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIEtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgTGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sTWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKExlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe01lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7TGVbYl09TGVbYV19KX0pO1xuZnVuY3Rpb24gTmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8TGUuaGFzT3duUHJvcGVydHkoZSkmJkxlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIE9lPXAoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBQZShhLGIsYyl7YiYmKE9lW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/QShcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpBKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9BKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBRZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFJlPXYudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBTZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1SZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpNZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoXCJmb2N1c1wiLGEpO01kKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjokYihlLCEwKSYmTWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09amIuaW5kZXhPZihlKSYmSyhlLGEpfWNbZV09ITB9fX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PUZlLmh0bWwmJihkPUdlKGEpKTtkPT09RmUuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIFVlKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIFZlKGEsYixjLGQpe3ZhciBlPVFlKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SyhcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmPTA7ZjxqYi5sZW5ndGg7ZisrKUsoamJbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpLKFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SyhcImVycm9yXCIsYSk7SyhcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SyhcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpIYyhhLGMpO2Y9R2MoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj15ZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpBZShhLGMpO2Y9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtcbksoXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkNlKGEsYyk7Zj1CZShhLGMpO0soXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVBlKGIsZixSZSk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1oP05lKGEsayxSZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZKZShhLGspKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZLZShhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmS2UoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihyYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZTZShkLFxuaCk6bnVsbCE9ayYmRmMoYSxoLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/emUoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJnplKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9fVxuZnVuY3Rpb24gV2UoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUdjKGEsYyk7ZD1HYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9eWUoYSxjKTtkPXllKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9cCh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9QmUoYSxjKTtkPUJlKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9UGUoYixkLFJlKTtiPWE9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgaD1jW2FdO2ZvcihiIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShiKSYmKGd8fFxuKGc9e30pLGdbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtoPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1hKWlmKGgpe2ZvcihiIGluIGgpIWguaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChnfHwoZz17fSksZ1tiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmhbYl0hPT1rW2JdJiYoZ3x8KGc9e30pLGdbYl09a1tiXSl9ZWxzZSBnfHwoZnx8KGY9W10pLGYucHVzaChhLGcpKSxcbmc9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/aD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJlNlKGUsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9ZyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGcpO3JldHVybiBmfVxuZnVuY3Rpb24gWGUoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmSmMoYSxlKTtRZShjLGQpO2Q9UWUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9OZShhLGgsUmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/SmUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP0tlKGEsaCk6RmMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOktjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz96ZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG56ZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6emUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpLKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxqYi5sZW5ndGg7ZCsrKUsoamJbZF0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOksoXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOksoXCJlcnJvclwiLGEpO0soXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpLKFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6SGMoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6QWUoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpDZShhLGMpLEsoXCJpbnZhbGlkXCIsYSksU2UoZSxcIm9uQ2hhbmdlXCIpfVBlKGIsXG5jLFJlKTtkPW51bGw7Zm9yKHZhciBmIGluIGMpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGc9Y1tmXTtcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9hLnRleHRDb250ZW50IT09ZyYmKGQ9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZhLnRleHRDb250ZW50IT09XCJcIitnJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiZTZShlLGYpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9cmV0dXJuIGR9ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyICRlPXtjcmVhdGVFbGVtZW50OlRlLGNyZWF0ZVRleHROb2RlOlVlLHNldEluaXRpYWxQcm9wZXJ0aWVzOlZlLGRpZmZQcm9wZXJ0aWVzOldlLHVwZGF0ZVByb3BlcnRpZXM6WGUsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpZZSxkaWZmSHlkcmF0ZWRUZXh0OlplLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOktjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7XG5jPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVBhKGQpO2U/dm9pZCAwOkEoXCI5MFwiKTtkYyhkKTtLYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJnplKGEsISFjLm11bHRpcGxlLGIsITEpfX19LGFmPW51bGwsYmY9bnVsbDtmdW5jdGlvbiBjZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBkZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBlZj1nZSxmZj1pZSxnZj1qZTtmdW5jdGlvbiBoZihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGpmKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBrZj1bXSxsZj0tMTtmdW5jdGlvbiBtZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIE0oYSl7MD5sZnx8KGEuY3VycmVudD1rZltsZl0sa2ZbbGZdPW51bGwsbGYtLSl9ZnVuY3Rpb24gTihhLGIpe2xmKys7a2ZbbGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgbmY9bWYoaGEpLE89bWYoITEpLG9mPWhhO2Z1bmN0aW9uIHBmKGEpe3JldHVybiBxZihhKT9vZjpuZi5jdXJyZW50fVxuZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBoYTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBxZihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gc2YoYSl7cWYoYSkmJihNKE8sYSksTShuZixhKSl9ZnVuY3Rpb24gdGYoYSl7TShPLGEpO00obmYsYSl9XG5mdW5jdGlvbiB1ZihhLGIsYyl7bmYuY3VycmVudCE9PWhhP0EoXCIxNjhcIik6dm9pZCAwO04obmYsYixhKTtOKE8sYyxhKX1mdW5jdGlvbiB2ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpBKFwiMTA4XCIsdWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBwKHt9LGIsYyl9ZnVuY3Rpb24gd2YoYSl7aWYoIXFmKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8aGE7b2Y9bmYuY3VycmVudDtOKG5mLGIsYSk7TihPLE8uY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6QShcIjE2OVwiKTtpZihiKXt2YXIgZD12ZihhLG9mKTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWQ7TShPLGEpO00obmYsYSk7TihuZixkLGEpfWVsc2UgTShPLGEpO04oTyxiLGEpfVxuZnVuY3Rpb24geWYoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHpmKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeWYoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWYoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wcztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl2YXIgZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgaWM6cmV0dXJuIEJmKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2UgcGM6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgamM6Zj0xMTtifD0yO2JyZWFrO2Nhc2Uga2M6cmV0dXJuIGQ9bmV3IHlmKDE1LGEsZSxifDQpLGQudHlwZT1rYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIHJjOmY9MTY7Ynw9MjticmVhaztkZWZhdWx0OmE6e3N3aXRjaChcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kP2QuJCR0eXBlb2Y6bnVsbCl7Y2FzZSBsYzpmPTEzO2JyZWFrIGE7Y2FzZSBtYzpmPTEyO2JyZWFrIGE7Y2FzZSBxYzpmPTE0O2JyZWFrIGE7ZGVmYXVsdDpBKFwiMTMwXCIsbnVsbD09ZD9cbmQ6dHlwZW9mIGQsXCJcIil9Zj12b2lkIDB9fWI9bmV3IHlmKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZihhLGIsYyxkKXthPW5ldyB5ZigxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENmKGEsYixjKXthPW5ldyB5Zig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGYoYSxiLGMpe2I9bmV3IHlmKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gRWYoYSxiLGMpe2I9bmV3IHlmKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfXZhciBGZj1udWxsLEdmPW51bGw7ZnVuY3Rpb24gSGYoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIElmKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0ZmPUhmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtHZj1IZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEpmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZiYmRmYoYSl9ZnVuY3Rpb24gS2YoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEdmJiZHZihhKX12YXIgTGY9ITE7XG5mdW5jdGlvbiBNZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6MCxiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBOZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YS5leHBpcmF0aW9uVGltZSxiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIE9mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIFBmKGEsYixjKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jfVxuZnVuY3Rpb24gUWYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1kKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3ZhciBmPW51bGw7bnVsbD09PWUmJihlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBlPWEudXBkYXRlUXVldWUsZj1kLnVwZGF0ZVF1ZXVlLG51bGw9PT1lP251bGw9PT1mPyhlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSxmPWQudXBkYXRlUXVldWU9TWYoZC5tZW1vaXplZFN0YXRlKSk6ZT1hLnVwZGF0ZVF1ZXVlPU5mKGYpOm51bGw9PT1mJiYoZj1kLnVwZGF0ZVF1ZXVlPU5mKGUpKTtudWxsPT09Znx8ZT09PWY/UGYoZSxiLGMpOm51bGw9PT1lLmxhc3RVcGRhdGV8fG51bGw9PT1mLmxhc3RVcGRhdGU/KFBmKGUsYixjKSxQZihmLGIsYykpOihQZihlLGIsYyksZi5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gUmYoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7ZD1udWxsPT09ZD9hLnVwZGF0ZVF1ZXVlPU1mKGEubWVtb2l6ZWRTdGF0ZSk6U2YoYSxkKTtudWxsPT09ZC5sYXN0Q2FwdHVyZWRVcGRhdGU/ZC5maXJzdENhcHR1cmVkVXBkYXRlPWQubGFzdENhcHR1cmVkVXBkYXRlPWI6KGQubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixkLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKTtpZigwPT09ZC5leHBpcmF0aW9uVGltZXx8ZC5leHBpcmF0aW9uVGltZT5jKWQuZXhwaXJhdGlvblRpbWU9Y31mdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1OZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBUZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSAyOkxmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gVWYoYSxiLGMsZCxlKXtMZj0hMTtpZighKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmUpKXtiPVNmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLG49ZjtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5lKXtpZihudWxsPT09ZyYmKGc9ayxmPW4pLDA9PT1ofHxoPnIpaD1yfWVsc2Ugbj1UZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSk7az1rLm5leHR9cj1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciB3PWsuZXhwaXJhdGlvblRpbWU7aWYodz5lKXtpZihudWxsPT09ciYmKHI9ayxudWxsPT09XG5nJiYoZj1uKSksMD09PWh8fGg+dyloPXd9ZWxzZSBuPVRmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PXI/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1yJiYoZj1uKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9cjtiLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPW59fVxuZnVuY3Rpb24gVmYoYSxiKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYT9BKFwiMTkxXCIsYSk6dm9pZCAwO2EuY2FsbChiKX1cbmZ1bmN0aW9uIFdmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTthPWIuZmlyc3RFZmZlY3Q7Zm9yKGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bnVsbCE9PWE7KXt2YXIgZD1hLmNhbGxiYWNrO251bGwhPT1kJiYoYS5jYWxsYmFjaz1udWxsLFZmKGQsYykpO2E9YS5uZXh0RWZmZWN0fWE9Yi5maXJzdENhcHR1cmVkRWZmZWN0O2ZvcihiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbDtudWxsIT09YTspYj1hLmNhbGxiYWNrLG51bGwhPT1iJiYoYS5jYWxsYmFjaz1udWxsLFZmKGIsYykpLGE9YS5uZXh0RWZmZWN0fVxuZnVuY3Rpb24gWGYoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazp2YyhiKX19dmFyIFlmPW1mKG51bGwpLFpmPW1mKG51bGwpLCRmPW1mKDApO2Z1bmN0aW9uIGFnKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtOKCRmLGIuX2NoYW5nZWRCaXRzLGEpO04oWmYsYi5fY3VycmVudFZhbHVlLGEpO04oWWYsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gYmcoYSl7dmFyIGI9JGYuY3VycmVudCxjPVpmLmN1cnJlbnQ7TShZZixhKTtNKFpmLGEpO00oJGYsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn12YXIgY2c9e30sZGc9bWYoY2cpLGVnPW1mKGNnKSxmZz1tZihjZyk7ZnVuY3Rpb24gZ2coYSl7YT09PWNnP0EoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gaWcoYSxiKXtOKGZnLGIsYSk7TihlZyxhLGEpO04oZGcsY2csYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6SGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPUhlKGIsYyl9TShkZyxhKTtOKGRnLGIsYSl9ZnVuY3Rpb24gamcoYSl7TShkZyxhKTtNKGVnLGEpO00oZmcsYSl9ZnVuY3Rpb24ga2coYSl7ZWcuY3VycmVudD09PWEmJihNKGRnLGEpLE0oZWcsYSkpfWZ1bmN0aW9uIGxnKGEsYixjKXt2YXIgZD1hLm1lbW9pemVkU3RhdGU7Yj1iKGMsZCk7ZD1udWxsPT09Ynx8dm9pZCAwPT09Yj9kOnAoe30sZCxiKTthLm1lbW9pemVkU3RhdGU9ZDthPWEudXBkYXRlUXVldWU7bnVsbCE9PWEmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS5iYXNlU3RhdGU9ZCl9XG52YXIgcGc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1qZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1tZygpO2Q9bmcoZCxhKTt2YXIgZT1PZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7UWYoYSxlLGQpO29nKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPW1nKCk7ZD1uZyhkLGEpO3ZhciBlPU9mKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1FmKGEsZSxkKTtvZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1tZygpO2M9bmcoYyxhKTt2YXIgZD1PZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1FmKGEsZCxjKTtvZyhhLGMpfX07ZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBnPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnNob3VsZENvbXBvbmVudFVwZGF0ZT9nLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShiLGMpfHwhZWEoZCxlKTohMH1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZwZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5zdGF0ZU5vZGUsZT1hLnBlbmRpbmdQcm9wcyxmPXBmKGEpO2QucHJvcHM9ZTtkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnJlZnM9aGE7ZC5jb250ZXh0PXJmKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoVWYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYobGcoYSxmLGUpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChjPWQuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZcbmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWQuc3RhdGUmJnBnLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKFVmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgdGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHVnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9BKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpBKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09aGE/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9BKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6QShcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gdmcoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIHdnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj11ZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9QWYoYyxhLm1vZGUsZCk7ZC5yZWY9dWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiByKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjPUFmKGIsYS5tb2RlLGMpLGMucmVmPXVnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBoYzpyZXR1cm4gYj1EZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYodGcoYil8fHRjKGIpKXJldHVybiBiPUJmKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7dmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09aWM/cihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIGhjOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsfWlmKHRnKGMpfHx0YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpyKGEsYixjLGQsbnVsbCk7dmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1pYz9yKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBoYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbihiLGEsZCxlKX1pZih0ZyhkKXx8dGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwscihiLGEsZCxlLG51bGwpO3ZnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSmQoZSxnLGgsayl7Zm9yKHZhciB1PW51bGwseD1udWxsLHQ9ZyxxPWc9MCxuPW51bGw7bnVsbCE9PXQmJnE8aC5sZW5ndGg7cSsrKXt0LmluZGV4PnE/KG49dCx0PW51bGwpOm49dC5zaWJsaW5nO3ZhciBsPVAoZSx0LGhbcV0sayk7aWYobnVsbD09PWwpe251bGw9PT10JiYodD1uKTticmVha31hJiZ0JiZudWxsPT09bC5hbHRlcm5hdGUmJmIoZSxcbnQpO2c9ZihsLGcscSk7bnVsbD09PXg/dT1sOnguc2libGluZz1sO3g9bDt0PW59aWYocT09PWgubGVuZ3RoKXJldHVybiBjKGUsdCksdTtpZihudWxsPT09dCl7Zm9yKDtxPGgubGVuZ3RoO3ErKylpZih0PXcoZSxoW3FdLGspKWc9Zih0LGcscSksbnVsbD09PXg/dT10Onguc2libGluZz10LHg9dDtyZXR1cm4gdX1mb3IodD1kKGUsdCk7cTxoLmxlbmd0aDtxKyspaWYobj1uYyh0LGUscSxoW3FdLGspKWEmJm51bGwhPT1uLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PW4ua2V5P3E6bi5rZXkpLGc9ZihuLGcscSksbnVsbD09PXg/dT1uOnguc2libGluZz1uLHg9bjthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIHU9dGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHU/QShcIjE1MFwiKTp2b2lkIDA7aD11LmNhbGwoaCk7bnVsbD09aD9BKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHQ9dT1udWxsLG49Zyx4PVxuZz0wLHk9bnVsbCxsPWgubmV4dCgpO251bGwhPT1uJiYhbC5kb25lO3grKyxsPWgubmV4dCgpKXtuLmluZGV4Png/KHk9bixuPW51bGwpOnk9bi5zaWJsaW5nO3ZhciByPVAoZSxuLGwudmFsdWUsayk7aWYobnVsbD09PXIpe258fChuPXkpO2JyZWFrfWEmJm4mJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLG4pO2c9ZihyLGcseCk7bnVsbD09PXQ/dT1yOnQuc2libGluZz1yO3Q9cjtuPXl9aWYobC5kb25lKXJldHVybiBjKGUsbiksdTtpZihudWxsPT09bil7Zm9yKDshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9dyhlLGwudmFsdWUsayksbnVsbCE9PWwmJihnPWYobCxnLHgpLG51bGw9PT10P3U9bDp0LnNpYmxpbmc9bCx0PWwpO3JldHVybiB1fWZvcihuPWQoZSxuKTshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9bmMobixlLHgsbC52YWx1ZSxrKSxudWxsIT09bCYmKGEmJm51bGwhPT1sLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PWwua2V5P3g6bC5rZXkpLGc9ZihsLGcseCksbnVsbD09PVxudD91PWw6dC5zaWJsaW5nPWwsdD1sKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1pYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBuPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobilzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBnYzphOntuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1pYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWljP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj11ZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1pYz8oZD1CZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1BZihmLGEubW9kZSxoKSxoLnJlZj11ZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgaGM6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9Q2YoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYodGcoZikpcmV0dXJuIEpkKGEsZCxmLGgpO2lmKHRjKGYpKXJldHVybiBFKGEsZCxmLGgpO24mJnZnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6aD1hLnR5cGUsQShcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIHhnPXdnKCEwKSx5Zz13ZyghMSksemc9bnVsbCxBZz1udWxsLEJnPSExO2Z1bmN0aW9uIENnKGEsYil7dmFyIGM9bmV3IHlmKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gRGcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRWcoYSl7aWYoQmcpe3ZhciBiPUFnO2lmKGIpe3ZhciBjPWI7aWYoIURnKGEsYikpe2I9aGYoYyk7aWYoIWJ8fCFEZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtCZz0hMTt6Zz1hO3JldHVybn1DZyh6ZyxjKX16Zz1hO0FnPWpmKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQmc9ITEsemc9YX19XG5mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47emc9YX1mdW5jdGlvbiBHZyhhKXtpZihhIT09emcpcmV0dXJuITE7aWYoIUJnKXJldHVybiBGZyhhKSxCZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIWRmKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1BZztiOylDZyhhLGIpLGI9aGYoYik7RmcoYSk7QWc9emc/aGYoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtBZz16Zz1udWxsO0JnPSExfWZ1bmN0aW9uIFEoYSxiLGMpe0lnKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIElnKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/eWcoYixudWxsLGMsZCk6eGcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBKZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIEtnKGEsYixjLGQsZSl7SmcoYSxiKTt2YXIgZj0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighYyYmIWYpcmV0dXJuIGQmJnhmKGIsITEpLFIoYSxiKTtjPWIuc3RhdGVOb2RlO2VjLmN1cnJlbnQ9Yjt2YXIgZz1mP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmJiYoSWcoYSxiLG51bGwsZSksYi5jaGlsZD1udWxsKTtJZyhhLGIsZyxlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ4ZihiLCEwKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIExnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/dWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdWYoYSxiLmNvbnRleHQsITEpO2lnKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7bnVsbCE9PWUmJihlLnJldHVybj1hKTtmb3IoO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9ZDtlbHNlIGJyZWFrO2Y9Zi5yZXR1cm59Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1cbmUuY2hpbGR9aWYobnVsbCE9PWYpZi5yZXR1cm49ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtlLnJldHVybj1mLnJldHVybjtmPWU7YnJlYWt9Zj1mLnJldHVybn1lPWZ9fVxuZnVuY3Rpb24gUWcoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzLGc9ITA7aWYoTy5jdXJyZW50KWc9ITE7ZWxzZSBpZihmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7dmFyIGg9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZiloPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpO2g9MH1lbHNle3ZhciBrPWYudmFsdWU7aWYoaz09PWgmJigwIT09a3x8MS9rPT09MS9oKXx8ayE9PWsmJmghPT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7aD0wfWVsc2UgaWYoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxcbmgpOjEwNzM3NDE4MjMsaHw9MCwwPT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpfWVsc2UgTWcoYixkLGgsYyl9Yi5zdGF0ZU5vZGU9aDthZyhiKTtRKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0EoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gUmcoYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOkxnKGIpO2JyZWFrO2Nhc2UgMjp3ZihiKTticmVhaztjYXNlIDQ6aWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOmFnKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0EoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9cGYoYik7Zj1yZihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLGY9Zi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZiYmbGcoYixmLGUpLGU9d2YoYiksZC51cGRhdGVyPXBnLGIuc3RhdGVOb2RlPWQsZC5fcmVhY3RJbnRlcm5hbEZpYmVyPWIsc2coYixjKSxhPUtnKGEsYiwhMCxlLGMpKTooYi50YWc9MSxRKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9cGYoYiksZD1yZihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDI6ZT13ZihiKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPWIucGVuZGluZ1Byb3BzLGg9Yi50eXBlO2Q9cGYoYik7dmFyIGs9Mj09PWIudGFnJiZudWxsIT1iLnR5cGUuY29udGV4dFR5cGVzO2Y9az9yZihiLGQpOmhhO2c9bmV3IGgoZyxmKTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PVxuZy5zdGF0ZSYmdm9pZCAwIT09Zy5zdGF0ZT9nLnN0YXRlOm51bGw7Zy51cGRhdGVyPXBnO2Iuc3RhdGVOb2RlPWc7Zy5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7ayYmKGs9Yi5zdGF0ZU5vZGUsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtzZyhiLGMpO2Q9ITB9ZWxzZXtoPWIudHlwZTtkPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2Y9Yi5wZW5kaW5nUHJvcHM7ZC5wcm9wcz1rO3ZhciBuPWQuY29udGV4dDtnPXBmKGIpO2c9cmYoYixnKTt2YXIgcj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oayE9PWZ8fG4hPT1nKSYmcmcoYixkLGYsZyk7TGY9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO249ZC5zdGF0ZT13O3ZhciBQPWIudXBkYXRlUXVldWU7bnVsbCE9PVAmJihVZihiLFAsZixkLGMpLG49Yi5tZW1vaXplZFN0YXRlKTtrIT09Znx8dyE9PW58fE8uY3VycmVudHx8TGY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYobGcoYixyLGYpLG49Yi5tZW1vaXplZFN0YXRlKSwoaz1MZnx8cWcoYixrLGYsdyxuLGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZkLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmXG4oYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWYsYi5tZW1vaXplZFN0YXRlPW4pLGQucHJvcHM9ZixkLnN0YXRlPW4sZC5jb250ZXh0PWcsZD1rKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBoPWIudHlwZSxkPWIuc3RhdGVOb2RlLGY9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHMsZC5wcm9wcz1mLG49ZC5jb250ZXh0LGc9cGYoYiksZz1yZihiLGcpLHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGYhPT1rfHxuIT09ZykmJnJnKGIsZCxrLGcpLExmPSExLG49Yi5tZW1vaXplZFN0YXRlLHc9ZC5zdGF0ZT1uLFA9Yi51cGRhdGVRdWV1ZSxudWxsIT09UCYmKFVmKGIsUCxrLGQsYyksdz1iLm1lbW9pemVkU3RhdGUpLGYhPT1rfHxuIT09d3x8Ty5jdXJyZW50fHxMZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihsZyhiLHIsayksdz1iLm1lbW9pemVkU3RhdGUpLChyPUxmfHxxZyhiLGYsayxuLHcsZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGUmJmQuY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZyksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGUmJlxuKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWssYi5tZW1vaXplZFN0YXRlPXcpLGQucHJvcHM9ayxkLnN0YXRlPXcsZC5jb250ZXh0PWcsZD1yKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcbmY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gS2coYSxiLGQsZSxjKTtjYXNlIDM6TGcoYik7ZT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1lKWlmKGQ9Yi5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWQ/ZC5lbGVtZW50Om51bGwsVWYoYixlLGIucGVuZGluZ1Byb3BzLG51bGwsYyksZT1iLm1lbW9pemVkU3RhdGUuZWxlbWVudCxlPT09ZClIZygpLGE9UihhLGIpO2Vsc2V7ZD1iLnN0YXRlTm9kZTtpZihkPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZkLmh5ZHJhdGUpQWc9amYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksemc9YixkPUJnPSEwO2Q/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9eWcoYixudWxsLGUsYykpOihIZygpLFEoYSxiLGUpKTthPWIuY2hpbGR9ZWxzZSBIZygpLGE9UihhLGIpO3JldHVybiBhO2Nhc2UgNTphOntnZyhmZy5jdXJyZW50KTtlPWdnKGRnLmN1cnJlbnQpO2Q9SGUoZSxcbmIudHlwZSk7ZSE9PWQmJihOKGVnLGIsYiksTihkZyxkLGIpKTtudWxsPT09YSYmRWcoYik7ZT1iLnR5cGU7az1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFPLmN1cnJlbnQmJms9PT1kKXtpZihrPWIubW9kZSYxJiYhIWQuaGlkZGVuKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZigha3x8MTA3Mzc0MTgyMyE9PWMpe2E9UihhLGIpO2JyZWFrIGF9fWs9ZC5jaGlsZHJlbjtkZihlLGQpP2s9bnVsbDpmJiZkZihlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtKZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZC5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihRKGEsYixrKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxcbm51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGlnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9eGcoYixudWxsLGUsYyk6UShhLGIsZSksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLnJlbmRlcixjPWIucGVuZGluZ1Byb3BzLGQ9Yi5yZWYsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jfHxkIT09KG51bGwhPT1hP2EucmVmOm51bGwpPyhlPWUoYyxkKSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDExOnJldHVybiBjPVxuYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sTy5jdXJyZW50fHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTU6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsYi5tZW1vaXplZFByb3BzPT09Yz9hPVIoYSxiKTooUShhLGIsYy5jaGlsZHJlbiksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKSxhO2Nhc2UgMTM6cmV0dXJuIFFnKGEsYixjKTtjYXNlIDEyOmE6aWYoZD1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxrPWIubWVtb2l6ZWRQcm9wcyxlPWQuX2N1cnJlbnRWYWx1ZSxnPWQuX2NoYW5nZWRCaXRzLE8uY3VycmVudHx8MCE9PWd8fGshPT1mKXtiLm1lbW9pemVkUHJvcHM9ZjtoPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWh8fG51bGw9PT1oKWg9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1oO2lmKDAhPT0oZyZoKSlNZyhiLGQsZyxjKTtlbHNlIGlmKGs9PT1mKXthPVxuUihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtiLmVmZmVjdFRhZ3w9MTtRKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPVIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFNnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBUZz12b2lkIDAsVWc9dm9pZCAwLFZnPXZvaWQgMDtUZz1mdW5jdGlvbigpe307VWc9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZTZyhiKX07Vmc9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJlNnKGIpfTtcbmZ1bmN0aW9uIFdnKGEsYil7dmFyIGM9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBzZihiKSxudWxsO2Nhc2UgMzpqZyhiKTt0ZihiKTt2YXIgZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYiksYi5lZmZlY3RUYWcmPS0zO1RnKGIpO3JldHVybiBudWxsO2Nhc2UgNTprZyhiKTtkPWdnKGZnLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPWIuc3RhdGVOb2RlLGg9Z2coZGcuY3VycmVudCk7Zz1XZShnLGUsZixjLGQpO1VnKGEsYixnLGUsZixjLGQsaCk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9cbkEoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1nZyhkZy5jdXJyZW50KTtpZihHZyhiKSljPWIuc3RhdGVOb2RlLGU9Yi50eXBlLGY9Yi5tZW1vaXplZFByb3BzLGNbQ109YixjW01hXT1mLGQ9WWUoYyxlLGYsYSxkKSxiLnVwZGF0ZVF1ZXVlPWQsbnVsbCE9PWQmJlNnKGIpO2Vsc2V7YT1UZShlLGMsZCxhKTthW0NdPWI7YVtNYV09YzthOmZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXtpZig1PT09Zi50YWd8fDY9PT1mLnRhZylhLmFwcGVuZENoaWxkKGYuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1mLnRhZyYmbnVsbCE9PWYuY2hpbGQpe2YuY2hpbGQucmV0dXJuPWY7Zj1mLmNoaWxkO2NvbnRpbnVlfWlmKGY9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWYuc2libGluZzspe2lmKG51bGw9PT1mLnJldHVybnx8Zi5yZXR1cm49PT1iKWJyZWFrIGE7Zj1mLnJldHVybn1mLnNpYmxpbmcucmV0dXJuPWYucmV0dXJuO2Y9Zi5zaWJsaW5nfVZlKGEsZSxjLGQpO2NmKGUsYykmJlNnKGIpO2Iuc3RhdGVOb2RlPVxuYX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpVmcoYSxiLGEubWVtb2l6ZWRQcm9wcyxjKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjZcIik6dm9pZCAwLG51bGw7ZD1nZyhmZy5jdXJyZW50KTtnZyhkZy5jdXJyZW50KTtHZyhiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0NdPWIsWmUoZCxjKSYmU2coYikpOihkPVVlKGMsZCksZFtDXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSAxNTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGpnKGIpLFRnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYmcoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpBKFwiMTY3XCIpO1xuZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBYZyhhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZudWxsIT09YyYmdmMoYyk7bnVsbCE9PWMmJnVjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZ1YyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19ZnVuY3Rpb24gWWcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7WmcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gJGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEtmJiZLZihhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpZZyhhKTt2YXIgYj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1pnKGEsYyl9YnJlYWs7Y2FzZSA1OllnKGEpO2JyZWFrO2Nhc2UgNDphaChhKX19ZnVuY3Rpb24gYmgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBjaChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihiaChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59QShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkEoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihLZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8YmgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGY9YixnPWUuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxmKTpmLmFwcGVuZENoaWxkKGcpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PVxuZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBhaChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz9BKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoJGcoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzokZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBkaChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmKGNbTWFdPWQsWGUoYyxmLGUsYSxkKSl9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1mdW5jdGlvbiBlaChhLGIsYyl7Yz1PZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtmaChkKTtYZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIGdoKGEsYixjKXtjPU9mKGMpO2MudGFnPTM7dmFyIGQ9YS5zdGF0ZU5vZGU7bnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe251bGw9PT1oaD9oaD1uZXcgU2V0KFt0aGlzXSk6aGguYWRkKHRoaXMpO3ZhciBjPWIudmFsdWUsZD1iLnN0YWNrO1hnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZD9kOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gaWgoYSxiLGMsZCxlLGYpe2MuZWZmZWN0VGFnfD01MTI7Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbDtkPVhmKGQsYyk7YT1iO2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOmEuZWZmZWN0VGFnfD0xMDI0O2Q9ZWgoYSxkLGYpO1JmKGEsZCxmKTtyZXR1cm47Y2FzZSAyOmlmKGI9ZCxjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09aGh8fCFoaC5oYXMoYykpKXthLmVmZmVjdFRhZ3w9MTAyNDtkPWdoKGEsYixmKTtSZihhLGQsZik7cmV0dXJufX1hPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKX1cbmZ1bmN0aW9uIGpoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnNmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGpnKGEpLHRmKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBrZyhhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBqZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGJnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIGtoPWVmKCksbGg9MixtaD1raCxuaD0wLG9oPTAscGg9ITEsUz1udWxsLHFoPW51bGwsVD0wLHJoPS0xLHNoPSExLFU9bnVsbCx0aD0hMSx1aD0hMSxoaD1udWxsO1xuZnVuY3Rpb24gdmgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgMzpqZyhiKTt0ZihiKTticmVhaztjYXNlIDU6a2coYik7YnJlYWs7Y2FzZSA0OmpnKGIpO2JyZWFrO2Nhc2UgMTM6YmcoYil9YT1hLnJldHVybn1xaD1udWxsO1Q9MDtyaD0tMTtzaD0hMTtTPW51bGw7dWg9ITF9XG5mdW5jdGlvbiB3aChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPVdnKGIsYSxUKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1UfHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7dmFyIGY9MDtzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGc9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZyYmKGY9Zy5leHBpcmF0aW9uVGltZSl9Zm9yKGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7dWg9ITA7YnJlYWt9fWVsc2V7YT1qaChhLHNoLFQpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9NTExLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPVJnKGEuYWx0ZXJuYXRlLGEsVCk7bnVsbD09PWImJihiPXdoKGEpKTtlYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5aChhLGIsYyl7cGg/QShcIjI0M1wiKTp2b2lkIDA7cGg9ITA7aWYoYiE9PVR8fGEhPT1xaHx8bnVsbD09PVMpdmgoKSxxaD1hLFQ9YixyaD0tMSxTPXpmKHFoLmN1cnJlbnQsbnVsbCxUKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO3NoPSFjfHxUPD1saDtkb3t0cnl7aWYoYylmb3IoO251bGwhPT1TJiYhemgoKTspUz14aChTKTtlbHNlIGZvcig7bnVsbCE9PVM7KVM9eGgoUyl9Y2F0Y2goZil7aWYobnVsbD09PVMpZD0hMCxmaChmKTtlbHNle251bGw9PT1TP0EoXCIyNzFcIik6dm9pZCAwO2M9Uzt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSl7ZD0hMDtmaChmKTticmVha31paChhLGUsYyxmLHNoLFQsbWgpO1M9d2goYyl9fWJyZWFrfXdoaWxlKDEpO3BoPSExO2lmKGQpcmV0dXJuIG51bGw7aWYobnVsbD09PVMpe2lmKHVoKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1iLGEuY3VycmVudC5hbHRlcm5hdGU7c2g/QShcIjI2MlwiKTpcbnZvaWQgMDswPD1yaCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBiPWEuY3VycmVudC5leHBpcmF0aW9uVGltZTswIT09YiYmKDA9PT1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lfHxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPGIpJiZBaChhLGIpfSxyaCk7QmgoYS5jdXJyZW50LmV4cGlyYXRpb25UaW1lKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFpnKGEsYil7dmFyIGM7YTp7cGgmJiF0aD9BKFwiMjYzXCIpOnZvaWQgMDtmb3IoYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAyOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1oaHx8IWhoLmhhcyhkKSkpe2E9WGYoYixhKTthPWdoKGMsYSwxKTtRZihjLGEsMSk7b2coYywxKTtjPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzphPVhmKGIsYSk7YT1laChjLGEsMSk7UWYoYyxhLDEpO29nKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9WGYoYixhKSxjPWVoKGEsYywxKSxRZihhLGMsMSksb2coYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiBDaCgpe3ZhciBhPTIrMjUqKCgobWcoKS0yKzUwMCkvMjV8MCkrMSk7YTw9bmgmJihhPW5oKzEpO3JldHVybiBuaD1hfWZ1bmN0aW9uIG5nKGEsYil7YT0wIT09b2g/b2g6cGg/dGg/MTpUOmIubW9kZSYxP0RoPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpOjE7RGgmJigwPT09RWh8fGE+RWgpJiYoRWg9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBvZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9YjtudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmIpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWEucmV0dXJuKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IXBoJiYwIT09VCYmYjxUJiZ2aCgpO3ZhciBkPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTtwaCYmIXRoJiZxaD09PWN8fEFoKGMsZCk7Rmg+R2gmJkEoXCIxODVcIil9ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBtZygpe21oPWVmKCkta2g7cmV0dXJuIGxoPShtaC8xMHwwKSsyfVxuZnVuY3Rpb24gSGgoYSl7dmFyIGI9b2g7b2g9MisyNSooKChtZygpLTIrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e29oPWJ9fWZ1bmN0aW9uIEloKGEsYixjLGQsZSl7dmFyIGY9b2g7b2g9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtvaD1mfX12YXIgSmg9bnVsbCxWPW51bGwsS2g9MCxMaD12b2lkIDAsVz0hMSxYPW51bGwsWT0wLEVoPTAsTWg9ITEsTmg9ITEsT2g9bnVsbCxQaD1udWxsLFo9ITEsUWg9ITEsRGg9ITEsUmg9bnVsbCxHaD0xRTMsRmg9MCxTaD0xO2Z1bmN0aW9uIFRoKGEpe2lmKDAhPT1LaCl7aWYoYT5LaClyZXR1cm47bnVsbCE9PUxoJiZnZihMaCl9dmFyIGI9ZWYoKS1raDtLaD1hO0xoPWZmKFVoLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1cbmZ1bmN0aW9uIEFoKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1WPyhKaD1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1KaCk7ZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVd8fChaP1FoJiYoWD1hLFk9MSxWaChhLDEsITEpKToxPT09Yj9XaCgpOlRoKGIpKX1cbmZ1bmN0aW9uIFhoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVYpZm9yKHZhciBjPVYsZD1KaDtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj9BKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7Smg9Vj1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09SmgpSmg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9Smg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PVYpYnJlYWs7XG5jPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPVg7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GaCsrOkZoPTA7WD1iO1k9YX1mdW5jdGlvbiBVaChhKXtZaCgwLCEwLGEpfWZ1bmN0aW9uIFdoKCl7WWgoMSwhMSxudWxsKX1mdW5jdGlvbiBZaChhLGIsYyl7UGg9YztYaCgpO2lmKGIpZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSkmJighTWh8fG1nKCk+PVkpOyltZygpLFZoKFgsWSwhTWgpLFhoKCk7ZWxzZSBmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKTspVmgoWCxZLCExKSxYaCgpO251bGwhPT1QaCYmKEtoPTAsTGg9bnVsbCk7MCE9PVkmJlRoKFkpO1BoPW51bGw7TWg9ITE7WmgoKX1mdW5jdGlvbiAkaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtWaChhLGIsITEpO1doKCk7WmgoKX1cbmZ1bmN0aW9uIFpoKCl7Rmg9MDtpZihudWxsIT09Umgpe3ZhciBhPVJoO1JoPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtOaHx8KE5oPSEwLE9oPWQpfX19aWYoTmgpdGhyb3cgYT1PaCxPaD1udWxsLE5oPSExLGE7fWZ1bmN0aW9uIFZoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9haShhLGMsYik6KGM9eWgoYSxiLCEwKSxudWxsIT09YyYmKHpoKCk/YS5maW5pc2hlZFdvcms9YzphaShhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/YWkoYSxjLGIpOihjPXloKGEsYiwhMSksbnVsbCE9PWMmJmFpKGEsYyxiKSkpO1c9ITF9XG5mdW5jdGlvbiBhaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1SaD9SaD1bZF06UmgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO3RoPXBoPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9BKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0EoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7bWcoKTtlYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBlPWIuZmlyc3RFZmZlY3R9ZWxzZSBlPWI7ZWxzZSBlPWIuZmlyc3RFZmZlY3Q7YWY9SGQ7dmFyIGY9ZGEoKTtpZihVZChmKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmYpdmFyIGc9e3N0YXJ0OmYuc2VsZWN0aW9uU3RhcnQsZW5kOmYuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBoPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtpZihoJiYwIT09aC5yYW5nZUNvdW50KXtnPWguYW5jaG9yTm9kZTt2YXIgaz1oLmFuY2hvck9mZnNldCxuPWguZm9jdXNOb2RlO2g9aC5mb2N1c09mZnNldDt0cnl7Zy5ub2RlVHlwZSxuLm5vZGVUeXBlfWNhdGNoKFdhKXtnPW51bGw7YnJlYWsgYX12YXIgcj0wLHc9LTEsUD0tMSxuYz0wLEpkPTAsRT1mLHQ9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB4Ozspe0UhPT1nfHwwIT09ayYmMyE9PUUubm9kZVR5cGV8fCh3PXIrayk7RSE9PW58fDAhPT1oJiYzIT09RS5ub2RlVHlwZXx8KFA9citoKTszPT09RS5ub2RlVHlwZSYmKHIrPUUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh4PUUuZmlyc3RDaGlsZCkpYnJlYWs7dD1FO0U9eH1mb3IoOzspe2lmKEU9PT1mKWJyZWFrIGI7dD09PWcmJlxuKytuYz09PWsmJih3PXIpO3Q9PT1uJiYrK0pkPT09aCYmKFA9cik7aWYobnVsbCE9PSh4PUUubmV4dFNpYmxpbmcpKWJyZWFrO0U9dDt0PUUucGFyZW50Tm9kZX1FPXh9Zz0tMT09PXd8fC0xPT09UD9udWxsOntzdGFydDp3LGVuZDpQfX1lbHNlIGc9bnVsbH1nPWd8fHtzdGFydDowLGVuZDowfX1lbHNlIGc9bnVsbDtiZj17Zm9jdXNlZEVsZW06ZixzZWxlY3Rpb25SYW5nZTpnfTtJZCghMSk7Zm9yKFU9ZTtudWxsIT09VTspe2Y9ITE7Zz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXtpZihVLmVmZmVjdFRhZyYyNTYpe3ZhciB1PVUuYWx0ZXJuYXRlO2s9VTtzd2l0Y2goay50YWcpe2Nhc2UgMjppZihrLmVmZmVjdFRhZyYyNTYmJm51bGwhPT11KXt2YXIgeT11Lm1lbW9pemVkUHJvcHMsRD11Lm1lbW9pemVkU3RhdGUsamE9ay5zdGF0ZU5vZGU7amEucHJvcHM9ay5tZW1vaXplZFByb3BzO2phLnN0YXRlPWsubWVtb2l6ZWRTdGF0ZTt2YXIgbWk9amEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxcbkQpO2phLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW1pfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7Zj0hMCxnPVdhfWYmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxaZyhVLGcpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1mb3IoVT1lO251bGwhPT1VOyl7dT0hMTt5PXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe3ZhciBxPVUuZWZmZWN0VGFnO3EmMTYmJktlKFUuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgej1VLmFsdGVybmF0ZTtpZihudWxsIT09eil7dmFyIGw9ei5yZWY7bnVsbCE9PWwmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbD9sKG51bGwpOmwuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTQpe2Nhc2UgMjpjaChVKTtVLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OmNoKFUpO1UuZWZmZWN0VGFnJj0tMztkaChVLmFsdGVybmF0ZSxcblUpO2JyZWFrO2Nhc2UgNDpkaChVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDg6RD1VLGFoKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXt1PSEwLHk9V2F9dSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUseSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWw9YmY7ej1kYSgpO3E9bC5mb2N1c2VkRWxlbTt1PWwuc2VsZWN0aW9uUmFuZ2U7aWYoeiE9PXEmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PXUmJlVkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1UZChxLGwpLEQ9VGQocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPHoubGVuZ3RoO3ErKylsPXpbcV0sbC5lbGVtZW50LnNjcm9sbExlZnQ9bC5sZWZ0LGwuZWxlbWVudC5zY3JvbGxUb3A9bC50b3B9YmY9bnVsbDtJZChhZik7YWY9bnVsbDtjLmN1cnJlbnQ9Yjtmb3IoVT1lO251bGwhPT1VOyl7ZT0hMTtxPXZvaWQgMDt0cnl7Zm9yKHo9ZDtudWxsIT09VTspe3ZhciBoZz1VLmVmZmVjdFRhZztpZihoZyYzNil7dmFyIG9jPVUuYWx0ZXJuYXRlO2w9VTt1PXo7c3dpdGNoKGwudGFnKXtjYXNlIDI6dmFyIGNhPWwuc3RhdGVOb2RlO2lmKGwuZWZmZWN0VGFnJjQpaWYobnVsbD09PW9jKWNhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxjYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsY2EuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciB3aT1vYy5tZW1vaXplZFByb3BzLHhpPW9jLm1lbW9pemVkU3RhdGU7Y2EucHJvcHM9bC5tZW1vaXplZFByb3BzO1xuY2Euc3RhdGU9bC5tZW1vaXplZFN0YXRlO2NhLmNvbXBvbmVudERpZFVwZGF0ZSh3aSx4aSxjYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIE5nPWwudXBkYXRlUXVldWU7bnVsbCE9PU5nJiYoY2EucHJvcHM9bC5tZW1vaXplZFByb3BzLGNhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxXZihsLE5nLGNhLHUpKTticmVhaztjYXNlIDM6dmFyIE9nPWwudXBkYXRlUXVldWU7aWYobnVsbCE9PU9nKXt5PW51bGw7aWYobnVsbCE9PWwuY2hpbGQpc3dpdGNoKGwuY2hpbGQudGFnKXtjYXNlIDU6eT1sLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDI6eT1sLmNoaWxkLnN0YXRlTm9kZX1XZihsLE9nLHksdSl9YnJlYWs7Y2FzZSA1OnZhciB5aT1sLnN0YXRlTm9kZTtudWxsPT09b2MmJmwuZWZmZWN0VGFnJjQmJmNmKGwudHlwZSxsLm1lbW9pemVkUHJvcHMpJiZ5aS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO1xuZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihoZyYxMjgpe2w9dm9pZCAwO3ZhciB5Yz1VLnJlZjtpZihudWxsIT09eWMpe3ZhciBQZz1VLnN0YXRlTm9kZTtzd2l0Y2goVS50YWcpe2Nhc2UgNTpsPVBnO2JyZWFrO2RlZmF1bHQ6bD1QZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgeWM/eWMobCk6eWMuY3VycmVudD1sfX12YXIgemk9VS5uZXh0RWZmZWN0O1UubmV4dEVmZmVjdD1udWxsO1U9eml9fWNhdGNoKFdhKXtlPSEwLHE9V2F9ZSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUscSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfXBoPXRoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZiYmSmYoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoaGg9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIHpoKCl7cmV0dXJuIG51bGw9PT1QaHx8UGgudGltZVJlbWFpbmluZygpPlNoPyExOk1oPSEwfVxuZnVuY3Rpb24gZmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO05ofHwoTmg9ITAsT2g9YSl9ZnVuY3Rpb24gQmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxXaCgpfX1mdW5jdGlvbiBjaShhLGIpe2lmKFomJiFRaCl7UWg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7UWg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIGRpKGEsYil7Vz9BKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBJaChhLGIpfWZpbmFsbHl7Wj1jLFdoKCl9fVxuZnVuY3Rpb24gZWkoYSxiLGMpe2lmKERoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUVofHwoWWgoRWgsITEsbnVsbCksRWg9MCk7dmFyIGQ9RGgsZT1aO1o9RGg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtEaD1kLChaPWUpfHxXfHxXaCgpfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1aO1o9ITA7dHJ5e0loKGEpfWZpbmFsbHl7KFo9Yil8fFd8fFloKDEsITEsbnVsbCl9fVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGc7Yjp7Mj09PWpkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkEoXCIxNzBcIik7Zm9yKGc9YzszIT09Zy50YWc7KXtpZihxZihnKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShnPWcucmV0dXJuKT92b2lkIDA6QShcIjE3MVwiKX1nPWcuc3RhdGVOb2RlLmNvbnRleHR9Yz1xZihjKT92ZihjLGcpOmd9ZWxzZSBjPWhhO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPU9mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtRZihmLGUsZCk7b2coZixkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0EoXCIxODhcIik6QShcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1tZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1mdW5jdGlvbiBpaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1tZygpO2U9bmcoZixlKTtyZXR1cm4gZ2koYSxiLGMsZSxkKX1mdW5jdGlvbiBqaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24ga2koYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSWYocCh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW1kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfVxudmFyIGxpPXt1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmdpLGNyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVmKGEsYixjKX0sdXBkYXRlQ29udGFpbmVyOmlpLGZsdXNoUm9vdDokaCxyZXF1ZXN0V29yazpBaCxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOkNoLGJhdGNoZWRVcGRhdGVzOmJpLHVuYmF0Y2hlZFVwZGF0ZXM6Y2ksZGVmZXJyZWRVcGRhdGVzOkhoLHN5bmNVcGRhdGVzOkloLGludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1d8fDA9PT1FaHx8KFloKEVoLCExLG51bGwpLEVoPTApfSxmbHVzaENvbnRyb2xsZWQ6ZmksZmx1c2hTeW5jOmRpLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpqaSxmaW5kSG9zdEluc3RhbmNlOmhpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpraX07XG5mdW5jdGlvbiBuaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOmhjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fUtiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQoJGUpO2Z1bmN0aW9uIG9pKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPUNoKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1cbm9pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkEoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBwaTtnaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07b2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xub2kucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkEoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/QShcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTskaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtvaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gcGkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1waS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucGkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gcWkoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1FZihhLGIsYyl9cWkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBwaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7aWkoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBwaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7aWkobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtxaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgcGk7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO2lpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5xaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgb2kodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiByaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9U2I9bGkuYmF0Y2hlZFVwZGF0ZXM7VGI9bGkuaW50ZXJhY3RpdmVVcGRhdGVzO1ViPWxpLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gc2koYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxaShhLCExLGIpfVxuZnVuY3Rpb24gdGkoYSxiLGMsZCxlKXtyaShjKT92b2lkIDA6QShcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWppKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2koYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9amkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fWNpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBqaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gdWkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtyaShiKT92b2lkIDA6QShcIjIwMFwiKTtyZXR1cm4gbmkoYSxiLG51bGwsYyl9XG52YXIgdmk9e2NyZWF0ZVBvcnRhbDp1aSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6aGkoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGkobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9BKFwiMzhcIik6dm9pZCAwO3JldHVybiB0aShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtyaShhKT92b2lkIDA6QShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGNpKGZ1bmN0aW9uKCl7dGkobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdWkuYXBwbHkodm9pZCAwLFxuYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6YmksdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOkhoLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaFN5bmM6ZGksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TmR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHFpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07a2koe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgQWk9e2RlZmF1bHQ6dml9LEJpPUFpJiZ2aXx8QWk7bW9kdWxlLmV4cG9ydHM9QmkuZGVmYXVsdD9CaS5kZWZhdWx0OkJpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHAvQXBwJztcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlL3N0b3JlJztcbmltcG9ydCAnLi9tYWluLmNzcyc7XG5cblxuUmVhY3RET00ucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICA8QXBwLz5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcbik7Il0sInNvdXJjZVJvb3QiOiIifQ==